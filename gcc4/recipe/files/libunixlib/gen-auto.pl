#!/usr/bin/perl
# Create UnixLib Makefile.am and include/unixlib/stubs.h.
# Copyright (c) 2005, 2006, 2007 UnixLib developers

$sourceunixlibtree = "$ENV{'GCCSDK_SRCDIR'}/libunixlib" ;

if (! -e "$sourceunixlibtree/sys/_syslib.s") {
  die "$sourceunixlibtree looks invalid as UnixLib source directory\n";
}

# Return an array of files with a certain suffix type.
sub filelist {
    my $dir = $_[0];
    my $suffix = $_[1];
    my @a = ();
    opendir (DIR, "$dir");
    while ($e = readdir (DIR)) {
	next if ($e eq '.' or $e eq '..' or $e eq '.svn');
	if ($e =~ /\.$suffix$/) {
	    push (@a, $e);
	}
    }
    closedir (DIR);
    return @a;
}

sub collect_headers {
    my $from = $_[0];
    my @header_list = ();

    opendir (ROOT, "$from");
    my @subdirs = ();
    while ($entry = readdir (ROOT)) {
	next if ($entry eq '.' or $entry eq '..' or $entry eq '.svn');
	if (-d "$from/$entry") {
	    # Deal with sub-directories later
	    push (@subdirs, $entry);
	    next;
	}

	my $src = "$from/$entry";
	if ($entry =~ /\.h$/) {
	    push (@header_list, "$entry");
	} elsif ($entry =~ /\.s$/) {
	    push (@header_list, "$entry");
	}
    }
    closedir (ROOT);

    # Deal with header file subdirectories
    foreach $dir (@subdirs) {
	opendir (SUBDIR, "$from/$dir");
	while ($entry = readdir (SUBDIR)) {
	    next if ($entry eq '.' or $entry eq '..' or $entry eq '.svn');
	    my $src = "$from/$dir/$entry";
	    if ($entry =~ /\.h$/) {
		push (@header_list, "$dir/$entry");
	    } elsif ($entry =~ /\.s$/) {
		push (@header_list, "$dir/$entry");
	    }
	}
	closedir (SUBDIR);
    }

    return @header_list;
}


# output_make_var (makefile_name, array of files, optional directory)
sub output_make_var {
    my $name = $_[0];
    my $a = $_[1];
    my $dir = $_[2];
    my @array = @$a;

    printf MAKE "%s = ", $name;
    for (my $x = 0; $x <= $#array; $x++) {
	printf MAKE "\t%s/%s", $dir, $array[$x] if ($dir ne "");
	printf MAKE "\t%s", $array[$x] if ($dir eq "");

	print MAKE " \\" if ($x != $#array);
	printf MAKE "\n";
    }
}

# Construct the automake Makefile as we go along
open (MAKE, "> $sourceunixlibtree/Makefile.am") or die $^E;
print MAKE<<EOF;
# Automake style makefile for UnixLib
# THIS FILE IS GENERATED BY 'gen-auto.pl' SO DO NOT EDIT
# Copyright (c) 2005, 2006, 2007 UnixLib developers
# Written by Nick Burrett <nick\@sqrt.co.uk>

# Directory where headers will be installed.
tooldir = \$(exec_prefix)/\$(target_alias)

# Multilib support
MAKEOVERRIDES=

# These flags exclusively apply to a C compiler
WARNINGSC = -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations \\
	-Wnested-externs

WARNINGS = -pedantic -Wall -Wundef -Wpointer-arith \\
	-Wcast-align -Wwrite-strings -Winline -Wno-unused \\
	-Winline -Wno-unused -W -Wcast-qual -Wshadow \$(WARNINGSC)

# The -isystem command tells GCC to prefer the header files in UnixLib,
# rather than trying to compile the library with the system headers.
# Header files that provide additional defintions only required for the
# building of UnixLib should be held in the source directories.
AM_CPPFLAGS = -isystem \$(top_srcdir)/include -I \$(top_srcdir)/incl-local

# C99 mode is required to build UnixLib because the library now contains
# a lot of C99 features.
# The __UNIXLIB_INTERNALS definition will disappear when the system headers
# have moved all private data into private header files.
# The NO_LONG_DOUBLE definition results in having the 'long double' math
# routines aliased as the normal 'double' onces.
AM_CFLAGS = -D__UNIXLIB_INTERNALS -DNO_LONG_DOUBLE -D_GNU_SOURCE=1 -std=c99 \$(LIBM_FLAGS)

# Assembler files rely heavily on the C preprocessor to keep structures
# referred to by both languages in sync.
AM_CCASFLAGS = -xassembler-with-cpp -isystem \$(top_srcdir)/include -I \$(top_srcdir)/incl-local

SUBDIRS = test

includedir = \$(prefix)
EOF

# Contain a list of the make variables that hold a per-directory list
# of source code files.
@makevars = ();

# The top level source directory only contains sub-directories.
opendir (ROOT, "$sourceunixlibtree");
while ($dir = readdir (ROOT)) {
    # Do not look at .svn directories or the main header file
    # directories 'include', 'test', 'contrib' and 'incl-local'.
    next if ($dir eq '.' or $dir eq '..' or $dir eq ".svn"
	     or $dir eq "test"
	     or $dir eq "contrib" or $dir eq "autom4te.cache"
	     or $dir eq "include" or $dir eq "incl-local");
    next if (! -d "$sourceunixlibtree/$dir");

    my @c_files = filelist ("$sourceunixlibtree/$dir", "c");
    my @h_files = filelist ("$sourceunixlibtree/$dir", "h");
    my @s_files = filelist ("$sourceunixlibtree/$dir", "s");
    my @marray = ();
    foreach $sf (@c_files) {
	# libm-support/libm.c is specially handled
	next if ($dir eq "libm-support" and $sf eq "libm.c");

	push (@marray, $sf);
    }

    foreach $sf (@s_files) {
	push (@marray, $sf);
    }

    my $mvar = $dir."_src";
    $mvar =~ s/-/_/g; # Convert hyphens to underscores

    push (@makevars, $mvar);
    output_make_var ($mvar, \@marray, $dir);

    print MAKE "\n";
}
closedir (ROOT);

# Deal with the header files
@inst_headers = collect_headers ("$sourceunixlibtree/include" ) ;
@noinst_headers = collect_headers ("$sourceunixlibtree/incl-local" ) ;

output_make_var ("libc_headers", \@inst_headers, "");
print MAKE "libc_headers += unixlib/stubs.h\n";

print MAKE "\n";
output_make_var ("nobase_noinst_HEADERS", \@noinst_headers, "incl-local");
print MAKE "\n";

print MAKE "libm_la_SOURCES = libm-support/libm.c\n\n";
print MAKE "toolexeclib_LTLIBRARIES = libunixlib.la libm.la\n";

print MAKE "libunixlib_la_SOURCES = ";
my $x = 0;
foreach $m (@makevars) {
    # Don't include the SUL module in the library make list.
    next if ($m eq 'module_src');
    printf MAKE "\$(%s) ", $m;
    $x ++;
    if ($x == 4) {
	printf MAKE "\\\n\t";
	$x = 0;
    }
}

print MAKE "\n\n";

print MAKE "libunixlib_la_LDFLAGS = -Wc,-lgcc_s -Wc,-nostdlib -version-info 5:0:0 -Wl,--version-script -Wl,\$(top_srcdir)/vscript\n\n";

print MAKE "libm_la_LDFLAGS = -Wc,-nostdlib -version-info 1:0:0\n\n";

print MAKE "# Build the SharedUnixLibrary module\n";
print MAKE "bin_PROGRAMS = sul\n\n";
print MAKE "sul.o: module/sul.s\n";
print MAKE "\t\$(CCASCOMPILE) -o sul.o -c \`test -f \'module/sul.s\' || echo \'\$(srcdir)/\'\`module/sul.s\n\n";

print MAKE "# The ARM linker cannot change output formats during the link\n";
print MAKE "# stage.  We must use strip to convert the ELF binary into\n";
print MAKE "# a raw binary\n";
print MAKE "sul\$(EXEEXT): sul.o\n";
print MAKE "\t\$(STRIP) -O binary -o sul\$(EXEEXT) sul.o\n";
print MAKE "\n";
print MAKE "# These rules are copied direct from a generated Makefile.\n";
print MAKE "# The only difference is that stack checking is turned off\n";
print MAKE "# for these targets.\n";
print MAKE "# Automake doesn't seem to provide a per-object file flag\n";
print MAKE "# setting function.\n";

@nostackfiles = ("sys/brk", "sys/stackalloc", "debug/dvsprintf");
foreach $f (@nostackfiles) {
    my $leaf = $f;
    $leaf =~ s/[a-z]*\///;
    printf MAKE "%s.lo: %s.c\n", $leaf, $f;
    printf MAKE "\tif \$(LTCOMPILE) -Wc,-mno-apcs-stack-check \\\n";
    printf MAKE "\t-MT %s.lo -MD -MP -MF \"\$(DEPDIR)/%s.Tpo\" -c -o %s.lo \\\n", $leaf, $leaf, $leaf;
    printf MAKE "\t\`test -f \'%s.c\' || echo \'\$(srcdir)/\'\`%s.c; \\\n", $f, $f;
    printf MAKE "\tthen mv -f \"\$(DEPDIR)/%s.Tpo\" \"\$(DEPDIR)/%s.Plo\"; \\\n", $leaf, $leaf;
    printf MAKE "\telse rm -f \"\$(DEPDIR)/%s.Tpo\"; exit 1; fi\n\n", $leaf;
}

print MAKE "install-data-local: install-headers\n\n";
print MAKE "install-headers:\n";
print MAKE "\t\$(mkinstalldirs) \$(DESTDIR)\${tooldir}/include/libunixlib\n";
print MAKE "\tfor dir in arpa bits net netinet resolv rpc string sys unixlib; do \\\n";
print MAKE "\t  \$(mkinstalldirs) \$(DESTDIR)\${tooldir}/include/libunixlib/\$\${dir} ; done\n";
print MAKE "\tfor file in \${libc_headers}; do \\\n";
print MAKE "\t  \$(INSTALL_DATA) \$(srcdir)/include/\$\${file} \$(DESTDIR)\${tooldir}/include/libunixlib/\$\${file} ; done\n";

print MAKE "\n";
close MAKE;

# We purposely ignore any tests that are not in sub-directories as
# they are probably not setup to run correctly with the automake
# testsuite.
@testdirs = ();
# Collect all test subdirectories:
opendir (ROOT, "$sourceunixlibtree/test");
while ($dir = readdir (ROOT)) {
    # Do not look at .svn directories.
    next if ($dir eq '.' or $dir eq '..' or $dir eq ".svn");
    next if (! -d "$sourceunixlibtree/test/$dir");

    push (@testdirs, $dir);
}
closedir (ROOT);

open (MAKE, "> $sourceunixlibtree/test/Makefile.am") or die $^E;
print MAKE<<EOF;
# Testsuite automake-style infrastructure
# THIS FILE IS GENERATED BY 'gen-auto.pl' SO DO NOT EDIT

AUTOMAKE_OPTIONS = no-dependencies
SUBDIRS = \\
EOF
print MAKE "\t";
for (my $t = 0; $t <= $#testdirs; $t++) {
    printf MAKE "%s ", $testdirs[$t];
    }
print MAKE "\n";
close MAKE;


foreach $dir (@testdirs) {
    open (MAKE, "> $sourceunixlibtree/test/$dir/Makefile.am") or die $^E;
    print MAKE "# Testsuite automake-style infrastructure\n";
    print MAKE "# THIS FILE IS GENERATED BY 'gen-auto.pl' SO DO NOT EDIT\n\n";
    print MAKE "AUTOMAKE_OPTIONS = no-dependencies\n";
    print MAKE "AM_CPPFLAGS = -isystem \$(top_srcdir)/include -I \$(top_srcdir)/test -D_GNU_SOURCE=1 -std=c99\n";
    print MAKE "LDADD = -L\$(top_builddir)\n\n";

    opendir (TESTS, "$sourceunixlibtree/test/$dir");
    my @tests = ();
    while ($entry = readdir (TESTS)) {
	next if ($entry eq '.' or $entry eq '..' or $entry eq '.svn');
	if ($entry =~ /\.c$/) {
	    push (@tests, $entry);
	}
    }
    close TESTS;

    print MAKE "check_PROGRAMS = ";
    my $x = 0;
    for (my $y = 0; $y <= $#tests; $y++) {
	my $test = $tests[$y];
	$x ++;
	# Strip suffix as automake wants the program name.
	$test =~ s/\.c//;
	printf MAKE "%s ", $test;
	if ($x == 5 and $y != $#tests) {
	    printf MAKE "\\\n\t";
	    $x = 0;
	}
    }
    print MAKE "\n\nTESTS = \$(check_PROGRAMS)\n";
    close MAKE;
}

# Generate configure.ac file from configure.template by filling in the
# AC_OUTPUT() parameters.
open (CONF_T, "<$sourceunixlibtree/configure.template") or die $^E;
open (CONF_AC, ">$sourceunixlibtree/configure.ac") or die $^E;
print CONF_AC "dnl This file 'configure.ac' is generated from 'configure.template'\n"
             ."dnl by 'gen-auto.pl'\n\n";

while (<CONF_T>) {
  if (/^(.*)AC_OUTPUT\(.*\)(.*)$/) {
    print CONF_AC "$1AC_OUTPUT\(Makefile test/Makefile ";
    foreach $dir (@testdirs) {
      print CONF_AC " test/$dir/Makefile";
    }
    print CONF_AC "\)$2\n";
  } else {
    print CONF_AC $_;
  }
}
close CONF_AC;
close CONF_T;

# Generate the stubs header file

my @dirs;
my @srcs;
my @objs;

# Find all source files
sub find_files {
  my $dir = $_[0];
  my @entries = glob("$dir/*");
  my $entry;
  foreach $entry (@entries) {
    # Make sure names are in unix format
    $entry =~ s/\/([cosh])\/([^\/\.]*)$/\/$2.$1/;
    # Ignore special directories
    next if $entry =~ m/^(.svn)/;
    next if $entry =~ m/^(test)|^(include)|^(module)|^(contrib)|^(autom4te.cache)|^(incl-local)/;
    if (-d "$entry") {
      push @dirs, $entry if !($entry =~ m/^(.*\/)?[cosh]$/);
      find_files("$entry");
    } else {
      if ($entry =~ m/\.[cs]$/) {
        my $obj = $entry;
        $obj =~ s/[cs]$/o/;
        push @objs, $obj;
        push @srcs, $entry;
      }
    }
  }
}

find_files($sourceunixlibtree);

# Generate include/unixlib/stubs.h
open (STUBS, ">$sourceunixlibtree/include/unixlib/stubs.h") or die $^E;

print STUBS "/* This file is automatically generated by 'gen-auto.pl'.\n"
           ."It defines a symbol `__stub_FUNCTION' for each function\n"
           ."in the C library which is a stub, meaning it will fail\n"
           ."every time called, usually setting errno to ENOSYS.  */\n\n";

foreach $src (@srcs) {
  # Only check c files
  next if !($src =~ m/\.c$/);
  open (SRC, "<".$src) or die $^E;
  my $funcname = "none";
  my $return = 1;
  while (<SRC>) {
    # Get function name
    if (/^(\w*) \([^\)]*\)\W*$/) {
      $funcname = $1;
      $return = 0;
    }
    # Find the return statement
    if (/^\W*return.*ENOSYS/) {
      $return = -1 if ($return == 0);
    } elsif (/^\W*return/) {
      # Only a stub iff there is one return that always returns ENOSYS
      $return = 1;
    }
    # Find function end
    if (/^\}\W*$/) {
      print STUBS "#define __stub_$funcname\n" if ($return == -1);
    }
  }
  close SRC;
}
close STUBS;

exit 0;
