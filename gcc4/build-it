#!/bin/bash
# Written by John Tytgat <John.Tytgat@aaug.net>
# Copyright (c) 2006-2007 GCCSDK Developers
#
# Builds either the cross-compiler, either the native RISC OS compiler by
# first configuring it, then doing the compiling and finally the installing.
#
# Syntax:
#   "build-it <options>"
#   "build-it <options> cross"
#     Builds the cross-compiler
#   "build-it <options> riscos"
#     Builds the native RISC OS compiler
#
# With <options>
#   -jX
#         Make -j option
#         When you have a multicore or multicpu machine, you might want to
#         specify '-jX' with 'X' a suitable number (see 'man make') to speed
#         up compilations.
#   -static
#         By default we build shared (target) ARM libraries, but with this
#         option we only build the static ones.
#   -lang=XXX (default: "c,c++")
#         Specified which languages are to be compiled.  Currently only C or
#         C++ is supported.
#   -no-multilib
#         No multilib configuration which means only softfloat UnixLib runtime
#         and no SharedCLibrary runtime (nor module support).
#   -h
#         Help

set -e

pushd `dirname $0` > /dev/null
GCCSDK_ROOT=`pwd`
popd > /dev/null
source $GCCSDK_ROOT/setup-gccsdk-params

give_help() {
  echo -e "$0 [-jX] [-static] [-lang=xxx] [-no-multilib ] [-h] [ \"\" | \"cross\" | \"riscos\" ]\n"
  echo -e "\t-jX\t\tMake -j option (replace X with a number or leave it out)"
  echo -e "\t-static\t\tOnly build the static ARM libraries, not the shared ones"
  echo -e "\t-lang=\t\tSpecify which languages need to be built (default: c,c++)"
  echo -e "\t-no-multilib\tOnly softfloat UnixLib (no SharedCLibrary) support"
  echo -e "\t-h\t\tThis help output"
  echo
  echo -e "\tcross\t\tBuild the cross compiler (default)"
  echo -e "\triscos\t\tBuild the native RISC OS compiler"
}

# Setup the default values which can be overruled by user options given:
GCCSDK_MAKE_ARGS=""
GCCSDK_BUILD_ACTION=""
GCCSDK_TARGET_LIBTYPE="--enable-shared=libunixlib,libgcc,libstdc++"
GCCSDK_LANGUAGES="c,c++"
GCCSDK_MULTILIB="--enable-multilib"
for param in $@ ; do
  case "$param" in
    -j*)
       GCCSDK_MAKE_ARGS="$GCCSDK_MAKE_ARGS $param"
       ;;
    -static)
       GCCSDK_TARGET_LIBTYPE="--disable-shared"
       ;;
    -lang=*)
       GCCSDK_LANGUAGES=`expr "$param" : '[^=]*=\(.*\)'`
       ;;
    -no-multilib)
       GCCSDK_MULTILIB="--disable-multilib"
       ;;
    -h | -help)
       give_help
       exit 0
       ;;
    -*)
       echo "Unknown option $param" && echo
       give_help
       exit 1
       ;;
    *)
       if [ ! -z "$GCCSDK_BUILD_ACTION" ] ; then
         echo "More than one build action defined: $GCCSDK_BUILD_ACTION and $param" && echo
         give_help
         exit 1
       fi
       GCCSDK_BUILD_ACTION=$param
       ;;
  esac
done


if [ "$GCCSDK_BUILD_ACTION" == "" ] || [ "$GCCSDK_BUILD_ACTION" == "cross" ] ; then
  # Build the cross-compiler
  GCCSDK_BUILDDIR=$GCCSDK_CROSS_BUILDDIR
  GCCSDK_PREFIX=$GCCSDK_CROSS_PREFIX
  GCCSDK_CONFIGURE_ARGS="--target=$GCCSDK_TARGET_NAME"
elif [ "$GCCSDK_BUILD_ACTION" == "riscos" ] ; then
  # Build the native RISC OS compiler
  GCCSDK_BUILDDIR=$GCCSDK_RISCOS_BUILDDIR
  GCCSDK_PREFIX=$GCCSDK_RISCOS_PREFIX
  GCCSDK_CONFIGURE_ARGS="--build=`$GCCSDK_SRCDIR/config.guess` --host=$GCCSDK_TARGET_NAME --target=$GCCSDK_TARGET_NAME"

  # Make sure our cross-compiler binaries can be found.
  PATH=$GCCSDK_CROSS_PREFIX/bin:$PATH
else
  echo Error: called $0 with unknown build action $GCCSDK_BUILD_ACTION
  exit 1
fi

# Make sure build dir and install dir exist:
if [ ! -d $GCCSDK_BUILDDIR ] ; then
  mkdir -p $GCCSDK_BUILDDIR
fi
if [ ! -d $GCCSDK_PREFIX ] ; then
  mkdir -p $GCCSDK_PREFIX
fi

cd $GCCSDK_BUILDDIR
# Notes:
#   1) --with-cross-host is needed to correctly find the target libraries in
#      $GCCSDK_{CROSS|RISCOS}_PREFIX/arm-unknown-riscos/lib instead of
#      $GCCSDK_{CROSS|RISCOS}_PREFIX/lib.
$GCCSDK_SRCDIR/configure --prefix=$GCCSDK_PREFIX $GCCSDK_CONFIGURE_ARGS \
	--enable-threads=posix \
	--disable-nls --enable-sjlj-exceptions=no \
	--disable-c-mbchar --enable-languages=$GCCSDK_LANGUAGES \
	--enable-checking=no --disable-libstdcxx-pch \
	--enable-c99 --enable-cmath \
	--with-cross-host \
	$GCCSDK_MULTILIB \
	--without-pic $GCCSDK_TARGET_LIBTYPE --without-x --enable-libgcj \
	--enable-maintainer-mode

# When you want the host binaries with debug information:
#   make CFLAGS='-O0 -g' LIBCFLAGS='-O0 -g' LIBCXXFLAGS='-O0 -g' all
# When you want to have optimized ARM libraries:
#   make CFLAGS_FOR_TARGET="-O3 -march=armv5" CXXFLAGS_FOR_TARGET="-O3 -march=armv5" all
make $GCCSDK_MAKE_ARGS all
make $GCCSDK_MAKE_ARGS install
