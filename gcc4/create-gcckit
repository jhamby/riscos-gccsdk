#!/bin/bash
# Written by John Tytgat <John.Tytgat@aaug.net>
# Copyright (c) 2007 GCCSDK Developers
#
# Creates the RISC OS GCCSDK kits
#
# Syntax:
#   create-gcckit [-pkg] [-h]
#     Creates the GCCSDK kits in $GCCSDK_RELEASE_AREA and optionally packages
#     these as well.

set -e

pushd `dirname $0` > /dev/null
GCCSDK_ROOT=`pwd`
popd > /dev/null
source $GCCSDK_ROOT/setup-gccsdk-params

give_help() {
  echo -e "$0 [-pkg] [-h]\n"
  echo -e "\t-pkg\t\tPackage the kits as zip or bz2 tar files."
  echo -e "\t-h\t\tThis help output"
}

# Setup the default values which can be overruled by user options given:
GCCSDK_DO_PKG="NO"
for param in $@ ; do
  case "$param" in
    -h | -help)
       give_help
       exit 0
       ;;
    -pkg)
       GCCSDK_DO_PKG="YES"
       ;;
    -*)
       echo "Unknown option $param" && echo
       give_help
       exit 1
       ;;
    *)
       echo "Unknown parameter $param" && echo
       give_help
       exit 1
       ;;
  esac
done

# We have the following binary kits (BKIT..) and source kits (SKIT...):
#   1. GCC Core: Minimal binary GCCSDK kit holding C compiler, !SharedLibs
#      (C libs only), !System, binutils, examples and documentation.
BKIT_GCCCORE_NAME=gccsdk-gcc-core-bin-$GCCSDK_RELEASE_NAME
#   2. G++: Optional binary kit adding C++ support to !GCC and !SharedLibs.
BKIT_GCCGPP_NAME=gccsdk-gcc-g++-bin-$GCCSDK_RELEASE_NAME
#   3. User binary distribution: !System
BKIT_SYSTEM_NAME=system
#   4. User binary distribution: !SharedLibs (C support)
BKIT_SHAREDLIBSCORE_NAME=gccsdk-sharedlibs-core
#   5. User binary distribution: !SharedLibs (optional, C++ support)
BKIT_SHAREDLIBSGPP_NAME=gccsdk-sharedlibs-g++
#   6. Source CMunge with GCCSDK changes:
SKIT_CMUNGE_NAME=cmunge-src-`grep Module_MajorVersion_CMHG $GCCSDK_RISCOS/cmunge/VersionNum | tr -s " " | cut -d ' ' -f 3`-gccsdk4-support
#   7. Source used to build GCC, Binutils, SCL and UnixLib:
SKIT_GCC_NAME=gccsdk-gcc-src-$GCCSDK_RELEASE_NAME
#   8. Source used to build riscos tools:
SKIT_RISCOS_NAME=gccsdk-riscos-tools-src-$GCCSDK_RELEASE_NAME

# In $GCCSDK_RELEASE_AREA/full we will have the full unpacked binary kits.
# We first make sure that this gets fully populated, then we make a copy to
# $GCCSDK_RELEASE_AREA/copy and use that to distribute to all the binary
# kits.
GCCSDK_UNPACKED=$GCCSDK_RELEASE_AREA/full

BKIT_GCC_UNPACKED=$GCCSDK_UNPACKED/\!GCC
BKIT_SYSTEM_UNPACKED=$GCCSDK_UNPACKED/system
BKIT_SHAREDLIBS_UNPACKED=$GCCSDK_UNPACKED/\!SharedLibs
BKIT_EXAMPLES_UNPACKED=$GCCSDK_UNPACKED/Examples

# Do a sanity check to see if the native RISC OS compiler has been built.
if [ ! -d $BKIT_GCC_UNPACKED/bin ] ; then
  echo "The native RISC OS compiler doesn't seem to be built at $BKIT_GCC_UNPACKED."
  echo "Use './build-it riscos' for doing this."
  exit 1
fi

# Do suffix swapping of all the .c/.cc/.tcc/.cmhg/.s/.h/.o files (don't do this
# for .so/.a/.la suffixes).
# Has one argument specifying the directory where the suffix swapping needs to happen.
do_suffix_swapping() {
  pushd $1 > /dev/null
  for suffix in c cc tcc cmhg s h o ; do
    for dir in `find . -type f -name "*.$suffix" -exec dirname {} \; | sort | uniq` ; do
      mkdir -p $dir/$suffix
      find $dir -maxdepth 1 -type f -name "*.$suffix" -exec rename -f 's/(.+)\/(.+)\.(.+)/$1\/$3\/$2/' {} \;
    done
  done
  popd > /dev/null
}

create_empty_dir() {
  test -d $1 && rm -rf $1
  mkdir -p $1
}

remove_if_there() {
  if [ -e $1 ] ; then rm -rf $1 ; fi
}

# Populates $BKIT_SYSTEM_UNPACKED
create_system_kit() {
  if [ ! -d $BKIT_SYSTEM_UNPACKED/\!System ] ; then
    create_empty_dir $BKIT_SYSTEM_UNPACKED/\!System

    # Copy !System skeleton:
    svn export -q --force $GCCSDK_RISCOS/dist/\!System $BKIT_SYSTEM_UNPACKED/\!System

    # Move SharedUnixLibrary module from !GCC/bin to !System:
    test -f $BKIT_GCC_UNPACKED/bin/sul && mkdir -p $BKIT_SYSTEM_UNPACKED/\!System/310/Modules && mv $BKIT_GCC_UNPACKED/bin/sul $BKIT_SYSTEM_UNPACKED/\!System/310/Modules/SharedULib,ffa

    # Checks if we have SharedULib,ffa:
    test ! -f $BKIT_SYSTEM_UNPACKED/\!System/310/Modules/SharedULib,ffa && echo "WARNING: SharedULib,ffa not present"

    # Copy documentation, license:
    #   - FIXME: SharedUnixLibrary license:
    #   - Copy drenderer documentation:
    create_empty_dir $BKIT_SYSTEM_UNPACKED/docs/drenderer
    cp $GCCSDK_RISCOS/drenderer/{COPYING,DocDRender} $BKIT_SYSTEM_UNPACKED/docs/drenderer
    #   - FIXME: syslogd, enable this when we can build syslogd and have a copy stored in !System.
    ##test ! -d $BKIT_SYSTEM_UNPACKED/docs/syslogd && mkdir -p $BKIT_SYSTEM_UNPACKED/docs/syslogd
    ##cp $GCCSDK_RISCOS/syslogd/ReadMe $BKIT_SYSTEM_UNPACKED/docs/syslogd
  fi
}

# Populates $BKIT_EXAMPLES_UNPACKED
create_examples_kit() {
  create_empty_dir $BKIT_EXAMPLES_UNPACKED

  # Copy Examples:
  svn export -q --force $GCCSDK_RISCOS/dist/Examples $BKIT_EXAMPLES_UNPACKED

  do_suffix_swapping $BKIT_EXAMPLES_UNPACKED
}

# Removes all files which we can't use on RISC OS or which don't make sense
# to keep around.
# Also uses RISC OS link files (filetype 0x1C8) instead of hard-linked files.
slim_gcckit() {
  # Remove the target prefixed binaries.  We don't need them as we have the
  # non-target prefixed binaries as well.
  cd $BKIT_GCC_UNPACKED/bin
  test -f $GCCSDK_TARGET_NAME-ln && mv $GCCSDK_TARGET_NAME-ln ln
  find . -name "$GCCSDK_TARGET_NAME-*" -print0 | xargs -0 rm -f
  # Remove gcc bug submit script (won't work under RISC OS):
  remove_if_there gccbug
  # Remove c++ as it is same as g++:
  remove_if_there c++
  # Use links:
  cd $BKIT_GCC_UNPACKED/$GCCSDK_TARGET_NAME/bin
  for f in `ls` ; do
    test -f $BKIT_GCC_UNPACKED/bin/$f && $GCCSDK_CROSS_PREFIX/bin/$GCCSDK_TARGET_NAME-ln -s -f ^.^.bin.$f $f,1c8 && rm $BKIT_GCC_UNPACKED/$GCCSDK_TARGET_NAME/bin/$f
  done
  # Remove install-tools which is useless on RISC OS
  remove_if_there $BKIT_GCC_UNPACKED/lib/gcc/$GCCSDK_TARGET_NAME/$GCCSDK_SUPPORTED_GCC_RELEASE/install-tools
  remove_if_there $BKIT_GCC_UNPACKED/libexec/gcc/$GCCSDK_TARGET_NAME/$GCCSDK_SUPPORTED_GCC_RELEASE/install-tools

  # Remove the softfloat libscl.  This is useless and a fallout of the multilib
  # configuration madness.
  remove_if_there $BKIT_GCC_UNPACKED/$GCCSDK_TARGET_NAME/lib/libscl.a

  # Remove the shared libgcc_so.so for each of the libscl configurations:
  # Commented out as we're going to remove all shared libraries under scl directory.
  ##remove_if_there $BKIT_GCC_UNPACKED/lib/scl/fpu/libgcc_s.so
  ##remove_if_there $BKIT_GCC_UNPACKED/lib/scl/fpu/module/libgcc_s.so

  # Remove all shared libraries (even the fpu ones) as we have them shipped in !SharedLibs:
  find $BKIT_GCC_UNPACKED -name "*.so*" -print0 | xargs -0 rm -f

  # Strip the RISC OS binaries.  We won't need the debug info nor the symbols.
  # We don't process arm-unknown-riscos/bin as the binaries there are hard-linked to bin ones.
  cd $BKIT_GCC_UNPACKED
  for bindir in bin $GCCSDK_TARGET_NAME/bin libexec/gcc/$GCCSDK_TARGET_NAME/$GCCSDK_SUPPORTED_GCC_RELEASE ; do
    for f in `find $bindir -maxdepth 1 -type f` ; do
      filetype=`file $f`
      if echo $filetype | grep -q ARM ; then
        $GCCSDK_CROSS_PREFIX/bin/$GCCSDK_TARGET_NAME-strip $f
        # Take the opportunity to add ,e1f suffix to ELF binaries:
        if ! echo $f | grep -q ",e1f" ; then
          mv $f $f,e1f
        fi
      elif echo $filetype | grep -q "RISC OS AIF" ; then
        # Add ,ff8 suffix to AIF binaries:
        if ! echo $f | grep -q ",ff8" ; then
          mv $f $f,ff8
        fi
      fi
    done
  done

  ### FIXME: need to do the stripping for .so files as well ?
  ## Do the stripping for all .so files (don't do this for .a files):
  ##cd $BKIT_GCC_UNPACKED
  ##find . -type f -name "*.a" -exec $GCCSDK_CROSS_PREFIX/bin/$GCCSDK_TARGET_NAME-strip {} \;

  do_suffix_swapping $BKIT_GCC_UNPACKED
}

# Populates $BKIT_GCC_UNPACKED and $BKIT_SHAREDLIBS_UNPACKED:
create_gcc_kit() {
  slim_gcckit

  # Copy !GCC skeleton:
  svn export -q --force $GCCSDK_RISCOS/dist/\!GCC $BKIT_GCC_UNPACKED

  # GCC & binutils documentation: we remove the info & man pages as they are not
  # really useful on RISC OS but create HTML versions instead and use those.
  remove_if_there $BKIT_GCC_UNPACKED/share
  if [ ! -f $GCCSDK_RISCOS_BUILDDIR/libiberty/libiberty.html -o ! -d $GCCSDK_RISCOS_BUILDDIR/binutils/doc/binutils.html -o ! -d $GCCSDK_RISCOS_BUILDDIR/gas/doc/as.html -o ! -d $GCCSDK_RISCOS_BUILDDIR/ld/ld.html -o ! -d $GCCSDK_RISCOS_BUILDDIR/gprof/gprof.html -o ! -d $GCCSDK_RISCOS_BUILDDIR/gcc/HTML/gcc-$GCCSDK_SUPPORTED_GCC_RELEASE ] ; then
    # Build the HTML documentation:
    cd $GCCSDK_RISCOS_BUILDDIR && PATH=$GCCSDK_CROSS_PREFIX/bin:$PATH make html
  fi
  # Copy documentation:
  mkdir -p $BKIT_GCC_UNPACKED/docs/libiberty && cp -r $GCCSDK_RISCOS_BUILDDIR/libiberty/libiberty.html $BKIT_GCC_UNPACKED/docs/libiberty
  mkdir -p $BKIT_GCC_UNPACKED/docs/binutils && cp -r $GCCSDK_RISCOS_BUILDDIR/binutils/doc/binutils.html/* $BKIT_GCC_UNPACKED/docs/binutils
  mkdir -p $BKIT_GCC_UNPACKED/docs/as && cp -r $GCCSDK_RISCOS_BUILDDIR/gas/doc/as.html/* $BKIT_GCC_UNPACKED/docs/as
  mkdir -p $BKIT_GCC_UNPACKED/docs/ld && cp -r $GCCSDK_RISCOS_BUILDDIR/ld/ld.html/* $BKIT_GCC_UNPACKED/docs/ld
  mkdir -p $BKIT_GCC_UNPACKED/docs/gprof && cp -r $GCCSDK_RISCOS_BUILDDIR/gprof/gprof.html/* $BKIT_GCC_UNPACKED/docs/gprof
  mkdir -p $BKIT_GCC_UNPACKED/docs/gcc && cp -r $GCCSDK_RISCOS_BUILDDIR/gcc/HTML/gcc-$GCCSDK_SUPPORTED_GCC_RELEASE/* $BKIT_GCC_UNPACKED/docs/gcc
  # Some parts of the documentation are not useful for RISC OS developers:
  remove_if_there $BKIT_GCC_UNPACKED/docs/gcc/cppinternals
  remove_if_there $BKIT_GCC_UNPACKED/docs/gcc/gccinstall
  remove_if_there $BKIT_GCC_UNPACKED/docs/gcc/gccint

  # Copy CMunge documentation:
  remove_if_there $BKIT_GCC_UNPACKED/docs/cmunge
  svn export -q --force $GCCSDK_RISCOS/cmunge/Docs $BKIT_GCC_UNPACKED/docs/cmunge
  cp $GCCSDK_RISCOS/cmunge/GCCSDK-CHANGES $BKIT_GCC_UNPACKED/docs/cmunge
  # Copy drenderer documentation:
  create_empty_dir $BKIT_GCC_UNPACKED/docs/drenderer
  cp $GCCSDK_RISCOS/drenderer/{COPYING,DocDRender} $BKIT_GCC_UNPACKED/docs/drenderer
  # Copy elf2aif documentation:
  create_empty_dir $BKIT_GCC_UNPACKED/docs/elf2aif
  cp $GCCSDK_RISCOS/elf2aif/{ChangeLog,AUTHORS,COPYING,README} $BKIT_GCC_UNPACKED/docs/elf2aif
  # Copy ln documentation:
  create_empty_dir $BKIT_GCC_UNPACKED/docs/ln
  cp $GCCSDK_RISCOS/ln/{ChangeLog,AUTHORS,COPYING,README} $BKIT_GCC_UNPACKED/docs/ln
  # Copy mkresfs documentation:
  remove_if_there $BKIT_GCC_UNPACKED/docs/mkresfs
  svn export -q --force $GCCSDK_RISCOS/mkresfs/doc $BKIT_GCC_UNPACKED/docs/mkresfs
  cp $GCCSDK_RISCOS/mkresfs/{ChangeLog,AUTHORS,COPYING} $BKIT_GCC_UNPACKED/docs/mkresfs
  # Copy UnixLib documentation:
  create_empty_dir $BKIT_GCC_UNPACKED/docs/libunixlib
  cp $GCCSDK_SRCDIR/libunixlib/{ChangeLog,contrib/Help,COPYING,README} $BKIT_GCC_UNPACKED/docs/libunixlib
  # Copy SCL documentation:
  create_empty_dir $BKIT_GCC_UNPACKED/docs/libscl
  cp $GCCSDK_SRCDIR/libscl/{ChangeLog,COPYING,README} $BKIT_GCC_UNPACKED/docs/libscl
  # Copy syslogd documentation:
  create_empty_dir $BKIT_GCC_UNPACKED/docs/syslogd
  cp $GCCSDK_RISCOS/syslogd/ReadMe $BKIT_GCC_UNPACKED/docs/syslogd
}

# Move the C++ library to a separate kit:
split_off_sharedlibsgpp() {
  create_empty_dir $GCCSDK_UNPACKED/$BKIT_SHAREDLIBSGPP_NAME
  mkdir -p $GCCSDK_UNPACKED/$BKIT_SHAREDLIBSGPP_NAME/\!SharedLibs/lib
  mv $BKIT_SHAREDLIBS_UNPACKED/lib/{libstdc++.so\,1c8,libstdc++.so.6\,1c8} $GCCSDK_UNPACKED/$BKIT_SHAREDLIBSGPP_NAME/\!SharedLibs/lib
  mv $BKIT_SHAREDLIBS_UNPACKED/lib/libstdc++.6.0.8.so,e1f $GCCSDK_UNPACKED/$BKIT_SHAREDLIBSGPP_NAME/\!SharedLibs/lib
}

split_off_sharedlibscore() {
  create_empty_dir $GCCSDK_UNPACKED/$BKIT_SHAREDLIBSCORE_NAME
  mv $BKIT_SHAREDLIBS_UNPACKED $GCCSDK_UNPACKED/$BKIT_SHAREDLIBSCORE_NAME
}

# Move the C++ compiler to a separate kit:
split_off_gccgpp() {
  create_empty_dir $GCCSDK_UNPACKED/$BKIT_GCCGPP_NAME
  for obj in $GCCSDK_TARGET_NAME/lib/{libstdc++.la,libsupc++.la,libstdc++.a,libsupc++.a} \
             $GCCSDK_TARGET_NAME/lib/fpu/{libstdc++.la,libsupc++.la,libstdc++.a,libsupc++.a} \
             bin/{g++\,e1f,c++filt\,e1f} \
             include/c++ ; do
    mkdir -p $GCCSDK_UNPACKED/$BKIT_GCCGPP_NAME/`basename $BKIT_GCC_UNPACKED`/`dirname $obj`
    mv $BKIT_GCC_UNPACKED/$obj $GCCSDK_UNPACKED/$BKIT_GCCGPP_NAME/`basename $BKIT_GCC_UNPACKED`/`dirname $obj`
  done

  # Copy sharedlibsgpp in there:
  cp -r $GCCSDK_UNPACKED/$BKIT_SHAREDLIBSGPP_NAME/* $GCCSDK_UNPACKED/$BKIT_GCCGPP_NAME
}

split_off_gcccore() {
  create_empty_dir $GCCSDK_UNPACKED/$BKIT_GCCCORE_NAME
  mv $BKIT_GCC_UNPACKED $GCCSDK_UNPACKED/$BKIT_GCCCORE_NAME

  # Move Examples in there:
  mv $BKIT_EXAMPLES_UNPACKED $GCCSDK_UNPACKED/$BKIT_GCCCORE_NAME

  # Copy sharedlibscore and system in there:
  cp -r $GCCSDK_UNPACKED/$BKIT_SHAREDLIBSCORE_NAME/* $GCCSDK_UNPACKED/$BKIT_GCCCORE_NAME
  cp -r $BKIT_SYSTEM_UNPACKED/\!System $GCCSDK_UNPACKED/$BKIT_GCCCORE_NAME
}

# Here starts the real work:
create_system_kit
create_gcc_kit
create_examples_kit

# Make a copy:
cp -r $GCCSDK_UNPACKED $GCCSDK_UNPACKED/../kits
GCCSDK_UNPACKED=$GCCSDK_RELEASE_AREA/kits
BKIT_GCC_UNPACKED=$GCCSDK_UNPACKED/\!GCC
BKIT_SYSTEM_UNPACKED=$GCCSDK_UNPACKED/system
BKIT_SHAREDLIBS_UNPACKED=$GCCSDK_UNPACKED/\!SharedLibs
BKIT_EXAMPLES_UNPACKED=$GCCSDK_UNPACKED/Examples

split_off_sharedlibsgpp
split_off_sharedlibscore
split_off_gccgpp
split_off_gcccore

if [ "$GCCSDK_DO_PKG" == "YES" ] ; then
  # Package all the kits:
  if [ ! -f $GCCSDK_CROSS_PREFIX/bin/zip ] ; then
    echo Unable to create kits because of missing zip executable.
    exit 1
  fi

  cd $GCCSDK_UNPACKED

  # CMunge source kit:
  remove_if_there $SKIT_CMUNGE_NAME
  svn export -q --force $GCCSDK_RISCOS/cmunge $SKIT_CMUNGE_NAME
  # Add GCCSDK patch file:
  svn diff svn://svn.riscos.info/gccsdk/branches/CMungeImportBranch/cmunge svn://svn.riscos.info/gccsdk/trunk/gcc4/riscos/cmunge > $SKIT_CMUNGE_NAME/GCCSDK-DIFF

  # riscos tools source kit (everything without cmunge source):
  create_empty_dir $SKIT_RISCOS_NAME
  cd $GCCSDK_RISCOS
  for obj in `find . -maxdepth 1 -mindepth 1 -type d` ; do
    case "$obj" in
      *cmunge | *.svn)
        # Skip the CMunge sources, those are packed in a separate source kit
        # $SKIT_CMUNGE_NAME. Skip also the .svn directory.
        ;;
      *)
        svn export -q --force $obj $GCCSDK_UNPACKED/$SKIT_RISCOS_NAME/$obj
        ;;
    esac
  done

  cd $GCCSDK_UNPACKED
  # Create from each binary and source directoy a zip file:
  for dir in `find . -maxdepth 1 -mindepth 1 -type d` ; do
     echo Creating $dir.zip
     cd $dir && $GCCSDK_CROSS_PREFIX/bin/zip -, -9rq ../$dir.zip * && cd ..
     rm -rf $dir
  done

  cd $GCCSDK_SRCDIR
  echo Creating $SKIT_GCC_NAME.tar.bz2
  tar --exclude="*.svn*" -cjf $GCCSDK_UNPACKED/$SKIT_GCC_NAME.tar.bz2 .
fi
