# Top-level Makefile fragment

# Default target
all: release

# Name of component
COMPONENT := GDBServer

# Environment
TOP ?= $(CURDIR)
EXPORT := $(TOP)/dist
RELEASEDIR := build/Release
DEBUGDIR := build/Debug
COVERAGEDIR := build/coverage

# List of items to delete on clean
ITEMS_CLEAN :=
# List of items to delete on distclean
ITEMS_DISTCLEAN :=

# List of targets to run for testing
TARGET_TESTS :=

# Source files
SOURCES :=

# Include configuration Makefile fragment
include build/Makefile.config

# Include Makefile fragments in subdirectories

define do_include
DIR := $$(dir $(1))
include $(1)

endef

MAKE_INCLUDES := $(wildcard */Makefile)
$(eval $(foreach INC, $(MAKE_INCLUDES), $(call do_include,$(INC))))

# Calculate objects to build
OBJECTS := $(filter %.o, $(subst /,_,$(subst .cmhg,.o,$(SOURCES))) \
	$(subst /,_,$(subst .s,.o,$(SOURCES))) \
	$(subst /,_,$(subst .c,.o,$(SOURCES))))

.PHONY: release debug test coverage profile \
	clean distclean setup export install uninstall

# Rules
release: setup $(addprefix $(RELEASEDIR)/,$(OBJECTS))
	@$(LD) $(LDFLAGS) -o $(COMPONENT)$(EXEEXT) $(addprefix $(RELEASEDIR)/,$(OBJECTS))

debug: setup $(addprefix $(DEBUGDIR)/,$(OBJECTS))
	@$(LD) $(LDFLAGS) -o $(COMPONENT)$(EXEEXT) $(addprefix $(DEBUGDIR)/,$(OBJECTS))

test: debug $(TARGET_TESTS)

coverage: clean
	@$(LCOV) --directory . --zerocounters
	@$(MAKE) test CFLAGS="$(CFLAGS) -fprofile-arcs -ftest-coverage" \
		LDFLAGS="$(LDFLAGS) -lgcov"
	@$(LCOV) --directory $(DEBUGDIR) --base-directory $(TOP) \
		--capture --output-file $(COVERAGEDIR)/$(COMPONENT)_tmp.info
	@$(LCOV) --extract $(COVERAGEDIR)/$(COMPONENT)_tmp.info "$(TOP)/src*" \
		-o $(COVERAGEDIR)/$(COMPONENT).info
	@$(RM) $(RMFLAGS) $(COVERAGEDIR)/$(COMPONENT)_tmp.info
	@$(GENHTML) -o $(COVERAGEDIR) --num-spaces 2 \
		$(COVERAGEDIR)/$(COMPONENT).info

profile: clean
	@$(MAKE) test CFLAGS="$(CFLAGS) -pg" LDFLAGS="-pg $(LDFLAGS)"

clean:
	-@$(RM) $(RMFLAGS) $(ITEMS_CLEAN)
	-@$(RM) $(RMFLAGS) gmon.out
	-@$(RM) $(RMFLAGS) -r $(COVERAGEDIR)
	-@$(RM) $(RMFLAGS) -r $(RELEASEDIR)
	-@$(RM) $(RMFLAGS) -r $(DEBUGDIR)
	-@$(RM) $(RMFLAGS) $(COMPONENT)$(EXEEXT)

distclean: clean
	-@$(RM) $(RMFLAGS) $(ITEMS_DISTCLEAN)
	-@$(RM) $(RMFLAGS) -r $(TOP)/dist

setup:
	@$(MKDIR) $(MKDIRFLAGS) $(RELEASEDIR)/deps
	@$(MKDIR) $(MKDIRFLAGS) $(DEBUGDIR)/deps
	@$(MKDIR) $(MKDIRFLAGS) $(COVERAGEDIR)

export:
	@$(MKDIR) $(MKDIRFLAGS) -p $(TOP)/dist
	@$(MAKE) install PREFIX="$(TOP)/dist"

install: release

uninstall:

$(RELEASEDIR)/deps/created:
	@$(MKDIR) $(MKDIRFLAGS) $(RELEASEDIR)/deps
	@$(TOUCH) $(TOUCHFLAGS) $(RELEASEDIR)/deps/created

$(DEBUGDIR)/deps/created:
	@$(MKDIR) $(MKDIRFLAGS) $(DEBUGDIR)/deps
	@$(TOUCH) $(TOUCHFLAGS) $(DEBUGDIR)/deps/created

DEPFILES :=

define do_dep
DEPFILES += $(2)
$$(RELEASEDIR)/deps/$(2): $$(RELEASEDIR)/deps/created $(1)
	@$$(ECHO) $$(ECHOFLAGS) "DEP $(1)"
	@$$(RM) $$(RMFLAGS) $$(RELEASEDIR)/deps/$(2)
	@$$(CC) $$(RELEASECFLAGS) $(4) -MM -MT \
		'$$(RELEASEDIR)/deps/$(2) $$(RELEASEDIR)/$(3)' \
		-MF $$(RELEASEDIR)/deps/$(2) $(1)

$$(DEBUGDIR)/deps/$(2): $$(DEBUGDIR)/deps/created $(1)
	@$$(ECHO) $$(ECHOFLAGS) "DEP $(1)"
	@$$(RM) $$(RMFLAGS) $$(DEBUGDIR)/deps/$(2)
	@$$(CC) $$(DEBUGCFLAGS) $(4) -MM -MT \
		'$$(DEBUGDIR)/deps/$(2) $$(DEBUGDIR)/$(3)' \
		-MF $$(DEBUGDIR)/deps/$(2) $(1)

endef

# Finally, build rules for compilation
define do_compile
$$(RELEASEDIR)/$(2): $(1)
	@$$(ECHO) $$(ECHOFLAGS) "==> $(1)"
	@$$(CC) -c $$(RELEASECFLAGS) $(3) -o $$@ $(1)

$$(DEBUGDIR)/$(2): $(1)
	@$$(ECHO) $$(ECHOFLAGS) "==> $(1)"
	@$$(CC) -c $$(DEBUGCFLAGS) $(3) -o $$@ $(1)

endef

define do_cmhg
$$(RELEASEDIR)/$(2): $(1)
	@$$(ECHO) $$(ECHOFLAGS) "==> $(1)"
	@$$(CMHG) $$(CMHGFLAGS) $$< -o $$@ -d $$(subst .cmhg,.h,$$<)

$$(DEBUGDIR)/$(2): $(1)
	@$$(ECHO) $$(ECHOFLAGS) "==> $(1)"
	@$$(CMHG) $$(CMHGFLAGS) $$< -o $$@ -d $$(subst .cmhg,.h,$$<)

endef

$(eval $(foreach SOURCE,$(filter %.c,$(SOURCES)), \
	$(call do_dep,$(SOURCE),$(subst /,_,$(SOURCE:.c=.d)),$(subst /,_,$(SOURCE:.c=.o)),)))

$(eval $(foreach SOURCE,$(filter %.s,$(SOURCES)), \
	$(call do_dep,$(SOURCE),$(subst /,_,$(SOURCE:.s=.d)),$(subst /,_,$(SOURCE:.s=.o)),-x assembler-with-cpp)))

ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
-include $(sort $(addprefix $(RELEASEDIR)/deps/,$(DEPFILES)))
-include $(sort $(addprefix $(DEBUGDIR)/deps/,$(DEPFILES)))
endif

$(eval $(foreach SOURCE,$(filter %.cmhg,$(SOURCES)), \
	$(call do_cmhg,$(SOURCE),$(subst /,_,$(SOURCE:.cmhg=.o)),)))

$(eval $(foreach SOURCE,$(filter %.c,$(SOURCES)), \
	$(call do_compile,$(SOURCE),$(subst /,_,$(SOURCE:.c=.o)),)))

$(eval $(foreach SOURCE,$(filter %.s,$(SOURCES)), \
	$(call do_compile,$(SOURCE),$(subst /,_,$(SOURCE:.s=.o)),-x assembler-with-cpp)))


