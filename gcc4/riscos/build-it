#!/bin/bash
# Written by John Tytgat <John.Tytgat@aaug.net>
# Copyright (c) 2007 GCCSDK Developers
#
# Builds the RISC OS specific binaries in GCCSDK, either for cross-compilation
# usage, either a native RISC OS binaries.
#
# Syntax:
#   "build-it <options>"
#   "build-it <options> cross"
#     Build the RISC OS specific binaries suited for cross-compilation usage
#   "build-it <options> riscos"
#     Build the RISC OS specific binaries for native execution on RISC OS
#
# With <options>
#   -h
#         Help

set -e

pushd `dirname $0`/.. > /dev/null
GCCSDK_ROOT=`pwd`
popd > /dev/null
source $GCCSDK_ROOT/setup-gccsdk-params

give_help() {
  echo -e "$0 [-h] [ \"\" | \"cross\" | \"riscos\" ]\n"
  echo -e "\t-h\t\tThis help output"
  echo
  echo -e "\tcross\t\tBuild the RISC OS specific binaries suited for cross-compilation usage (default)"
  echo -e "\triscos\t\tBuild the RISC OS specific binaries for native execution on RISC OS"
}

# Setup the default values which can be overruled by user options given:
for param in $@ ; do
  case "$param" in
    -h | -help)
       give_help
       exit 0
       ;;
    -*)
       echo "Unknown option $param" && echo
       give_help
       exit 1
       ;;
    *)
       if [ ! -z "$GCCSDK_BUILD_ACTION" ] ; then
         echo "More than one build action defined: $GCCSDK_BUILD_ACTION and $param" && echo
         give_help
         exit 1
       fi
       GCCSDK_BUILD_ACTION=$param
       ;;
  esac
done

if [ "$GCCSDK_BUILD_ACTION" == "" ] || [ "$GCCSDK_BUILD_ACTION" == "cross" ] ; then
  # Build binaries suited for cross-compilation
  GCCSDK_BUILDDIR=$GCCSDK_CROSS_BUILDDIR
  GCCSDK_PREFIX=$GCCSDK_CROSS_PREFIX
  GCCSDK_CONFIGURE_ARGS="--target=$GCCSDK_TARGET_NAME"
elif [ "$GCCSDK_BUILD_ACTION" == "riscos" ] ; then
  # Build binaries suites for native RISC OS usage
  GCCSDK_BUILDDIR=$GCCSDK_RISCOS_BUILDDIR
  GCCSDK_PREFIX=$GCCSDK_RISCOS_PREFIX
  GCCSDK_CONFIGURE_ARGS="--build=`$GCCSDK_SRCDIR/config.guess` --host=$GCCSDK_TARGET_NAME --target=$GCCSDK_TARGET_NAME"

  # Make sure our cross-compiler binaries can be found.
  PATH=$GCCSDK_CROSS_PREFIX/bin:$PATH
else
  echo Error: called $0 with unknown build action $GCCSDK_BUILD_ACTION
  exit 1
fi

# Build the programs which we use for cross-compiling and for native RISC OS compiling:
for roapp in cmunge elf2aif mkresfs ln ; do
  if [ ! -f $GCCSDK_PREFIX/bin/$roapp -a ! -f $GCCSDK_PREFIX/bin/$roapp,ff8 -a ! -f $GCCSDK_PREFIX/bin/$roapp,e1f ] ; then
    echo +++ Building $roapp
    test ! -f $GCCSDK_RISCOS/$roapp/configure && cd $GCCSDK_RISCOS/$roapp && autoreconf --install && test -d $GCCSDK_BUILDDIR/$roapp && rm -rf $GCCSDK_BUILDDIR/$roapp
    mkdir -p $GCCSDK_BUILDDIR/$roapp
    cd $GCCSDK_BUILDDIR/$roapp
    export CFLAGS=""
    if [ "$GCCSDK_BUILD_ACTION" == "riscos" ] ; then
      # These apps are using SCL as runtime library:
      case $roapp in
        cmunge | elf2aif)
          export CFLAGS="-O3 -mlibscl"
          ;;
      esac
    fi
    $GCCSDK_RISCOS/$roapp/configure --prefix=$GCCSDK_PREFIX $GCCSDK_CONFIGURE_ARGS
    make $GCCSDK_MAKE_ARGS install
  fi
done

if [ "$GCCSDK_BUILD_ACTION" == "" ] || [ "$GCCSDK_BUILD_ACTION" == "cross" ] ; then
  # dynamic loader
  echo +++ Building dl
  cd $GCCSDK_RISCOS/soloader
  PATH=$GCCSDK_CROSS_PREFIX/bin:$PATH make install-cross LIBDIR=$GCCSDK_PREFIX/$GCCSDK_TARGET_NAME/lib

elif [ "$GCCSDK_BUILD_ACTION" == "riscos" ] ; then
  # These make only sense in the native RISC OS build:
  # FIXME: drenderer (we can not build this yet)

  # SOManager module:
  if [ ! -f $GCCSDK_RELEASE_AREA/\!DSO-libs/SOManager,ffa ] ; then
    echo +++ Building SOManager
    test ! -f $GCCSDK_RISCOS/soloader/module2/configure && cd $GCCSDK_RISCOS/soloader/module2 && autoreconf --install && test -d $GCCSDK_BUILDDIR/somanager && rm -rf $GCCSDK_BUILDDIR/somanager
    mkdir -p $GCCSDK_BUILDDIR/somanager
    cd $GCCSDK_BUILDDIR/somanager
    export CFLAGS=""
    $GCCSDK_RISCOS/soloader/module2/configure --prefix=$GCCSDK_RELEASE_AREA/\!DSO-libs --bindir=$GCCSDK_RELEASE_AREA/\!DSO-libs $GCCSDK_CONFIGURE_ARGS
    make $GCCSDK_MAKE_ARGS install
  fi

  # dynamic loader
  echo +++ Building dl
  cd $GCCSDK_RISCOS/soloader
  make install-riscos LIBDIR=$GCCSDK_RELEASE_AREA/\!DSO-libs/lib
  svn export -q --force dist/\!DSO-libs $GCCSDK_RELEASE_AREA/\!DSO-libs
  if [ -f $GCCSDK_RISCOS_PREFIX/$GCCSDK_TARGET_NAME/lib/libunixlib.5.0.0.so ] ; then
    cp $GCCSDK_RISCOS_PREFIX/$GCCSDK_TARGET_NAME/lib/libunixlib.5.0.0.so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/system/libunixlib.5.0.0.so,e1f
    arm-unknown-riscos-ln -s -f system.libunixlib/5/0/0/so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/libunixlib.so.5,1c8
    arm-unknown-riscos-ln -s -f system.libunixlib/5/0/0/so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/libunixlib.so,1c8
  fi
  if [ -f $GCCSDK_RISCOS_PREFIX/lib/libgcc_s.so.1 ] ; then
    cp $GCCSDK_RISCOS_PREFIX/lib/libgcc_s.so.1 $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/system/libgcc_s.so.1,e1f
    arm-unknown-riscos-ln -s -f system.libgcc_s/so/1 $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/libgcc_s.so.1,1c8
    arm-unknown-riscos-ln -s -f system.libgcc_s/so/1 $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/libgcc_s.so,1c8
  fi
  if [ -f $GCCSDK_RISCOS_PREFIX/$GCCSDK_TARGET_NAME/lib/libm.1.0.0.so ] ; then
    cp $GCCSDK_RISCOS_PREFIX/$GCCSDK_TARGET_NAME/lib/libm.1.0.0.so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/system/libm.1.0.0.so,e1f
    arm-unknown-riscos-ln -s -f system.libm/1/0/0/so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/libm.so.1,1c8
    arm-unknown-riscos-ln -s -f system.libm/1/0/0/so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/libm.so,1c8
  fi
  if [ -f $GCCSDK_RISCOS_PREFIX/$GCCSDK_TARGET_NAME/lib/libstdc++.6.0.8.so ] ; then
    cp $GCCSDK_RISCOS_PREFIX/$GCCSDK_TARGET_NAME/lib/libstdc++.6.0.8.so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/system/libstdc++.6.0.8.so,e1f
    arm-unknown-riscos-ln -s -f system.libstdc++/6/0/8/so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/libstdc++.so.6,1c8
    arm-unknown-riscos-ln -s -f system.libstdc++/6/0/8/so $GCCSDK_RELEASE_AREA/\!DSO-libs/lib/libstdc++.so,1c8
  fi

  # FIXME: syslogd (we can not build this yet)
fi
