The RISC OS Software Development Kit [GCCSDK 4.x Release y]
===========================================================

This is a lightweight build environment which combines a GCC 4.1.1 release,
binutils 2.17 release and UnixLib 5.0 into one directory which can
be used to build a RISC OS cross-compiler with target arm-unknown-riscos.

We expect that the current set of GCCSDK patches for GCC and binutils can
be applied to later versions than GCC 4.1.1 and binutils 2.17 as is, or at
least with a minimum of changes of those patches.  However this still needs to
be verified if that's really going to be the case as we're currently focusing
to get all GCCSDK specific development done for GCC 4.1.1 and binutils 2.17.

Currently it might be necessary to define LTCONFIG_VERSION as:

  $ export LTCONFIG_VERSION=1.4a-GCC3.0

And GCCSDK_NOE1F to some value (otherwise all executables, even the onces
temporary made using building and configuration will have ,e1f extensions
leading to odd build failures):

  $ export GCCSDK_NOE1F=xxx

0. Required build tools
~~~~~~~~~~~~~~~~~~~~~~~

The following is a non exhaustive list of programs which are needed to compile
and work with GCCSDK on top of a typical recent standard Unix distribution.

- svn v1.2 or later (only to be used to checkout GCCSDK source code)
- gcc v3.4.x or v4.x (other versions might work too)
- make v3.81 (other versions might work too)
- libtool v1.5.22 (other versions might work too)
- automake v1.9 (no other version !)
- autogen v5.8.8 (other versions might work too)

1. Checking out
~~~~~~~~~~~~~~~

To check out GCCSDK 4 build code:

  $ mkdir gccsdk4
  $ cd gccsdk4
  $ svn co svn://svn.riscos.info/gccsdk/trunk/gcc4

We have now in 'gcc4' the GCCSDK 4.x code.

2. Build steps
~~~~~~~~~~~~~~

1. Build cross-compiler with target arm-unknown-riscos (static ELF target only
   at the moment).
2. Build RISC OS ELF loader (in development at the moment).

[ Not developed yet: 3. Build the native RISC OS compiler ]

Make sure GCCSDK_ROOT is defined at the directory path where GCCSDK 4.x
code is located :

  $ export GCCSDK_ROOT=`pwd`/gcc4

Prerequisites for building GCC can be found at
<URL:http://gcc.gnu.org/install/prerequisites.html>.

2.1. Build cross-compiler
~~~~~~~~~~~~~~~~~~~~~~~~~

The setup-gccsdk-params file contains several definitions as environment
variables which you can change if really desired.  Like with GCCSDK 3.4.6, we
recommend setting up $GCCSDK_INSTALL_CROSSBIN which then can be used by
setup-gccsdk-params files to determine where the cross-compiler will be
installed during 'make install' (note: $GCCSDK_INSTALL_CROSSBIN actually
specifies the pathname 'bin' subdirectory of the directory where the complete
cross-compiler will be installed).

1. Use the definitions in the setup-gccsdk-params file :

   $ cd $GCCSDK_ROOT
   $ source setup-gccsdk-params

2. Place an unchanged GCC 4.x release in $GCCSDK_GCCORIG (either tarball, either
   result of SVN checkout).

   Tarball:

     Fetch GCC 4.x.y tarball (at {http|ftp}://ftp.gnu.org/gnu/gcc or using one
     of the GNU mirrors) and extract its gcc-4.x.y/gcc directory as
     $GCCSDK_GCCORIG.

   SVN checkout:

     $ svn co svn://gcc.gnu.org/svn/gcc/branches/gcc-4_1-branch $GCCSDK_GCCORIG

   Note that the contents of $GCCSDK_GCCORIG is considered read-only from
   now on and used in the scripts 'create-gccsdk' (see step 3) and
   'create-patch' (to update or create patches).

3. Place a binutils 2.17 release in $GCCSDK_BINUTILSORIG (either tarball,
   either result of CVS checkout).

   Tarball:

     Fetch binutils 2-17 tarball (at {http|ftp}://ftp.gnu.org/gnu/binutils/binutils-2.17.tar.bz2
     or using one of the GNU mirrors) and extract its binutils-2.17/binutils
     directory as $GCCSDK_BINUTILSORIG.

   CVS checkout:

     $ cvs -z9 -d:pserver:anoncvs@sourceware.org:/cvs/src login
       -> password: anoncvs
     $ cd `dirname $GCCSDK_BINUTILSORIG`
     $ cvs -z9 -d:pserver:anoncvs@sourceware.org:/cvs/src co -RPN -d tmp.binutils binutils
     $ mv tmp.binutils/src `basename $GCCSDK_BINUTILSORIG`
     $ rm -rf tmp.binutils

   Note that the contents of $GCCSDK_BINUTILSORIG is considered read-only from
   now on and used in the scripts 'create-gccsdk' (see step 4) and
   'create-patch' (to update or create patches).

4. Combine the contents of $GCCSDK_GCCORIG, $GCCSDK_BINUTILSORIG and
   UnixLib 5.0 (GAS assembler syntax and ELF configuration) into
   $GCCSDK_SRCDIR and apply the necessary patches for arm-unknown-riscos
   target by running:

     $ cd $GCCSDK_ROOT
     $ ./create-gccsdk

   At this point the source tree at $GCCSDK_SRCDIR is used to do the real build.
   Developer changes can and should be done here and when those changes are
   ready to be commited, either patches need to be created (using create-patch),
   either full file copy needs to be made in the correct subdirector under
   $GCCSDK_RECIPE_FILES.

5. Build and install the cross-compiler into $PREFIX:

     $ cd $GCCSDK_ROOT
     $ ./build-it > build-output.txt 2>&1

   When the configuration part has been successfully done during ./build-it,
   you can restart the build by:

     $ cd $GCCSDK_ROOT/arm-unknown-riscos
     $ make
     $ make install

   When you want specific compiler options for target libraries, you can
   specify them like (e.g. taking the options "-O3 -march=armv4"):

     $ cd $GCCSDK_ROOT/arm-unknown-riscos
     $ make CFLAGS_FOR_TARGET="-O3 -march=armv4" CXXFLAGS_FOR_TARGET="-O3 -march=armv4"
     $ make install

2.2. Build RISC OS ELF loader
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is at the moment not fully buildable because not all RISC OS ELF related
changes have been made to the cross-compiler, UnixLib and/or the soloader sources.

   $ cd riscos/soloader
   $ ./build-it > build-output.txt 2>&1

3. Developing
~~~~~~~~~~~~~

GCCSDK specific changes for the original gcc/binutils sources are done via
patches (recipe/patches directory), copying full source files (recipe/files)
or via scripts (recipe/scripts).  Easy patch (re)creation can be done using the
./create-patch script.

4. Testing
~~~~~~~~~~

After building the cross-compiler you can run the GCC testsuite.  This can be
easily done under Linux using its binfmt_misc kernel module and QEMU containing
RISC OS specific changes (cfr http://www.riscos.info/index.php/QEMU) as those
together allow you to run unmodified ELF RISC OS binaries under Linux.

The GCC testsuite requires the installation of at least DejaGnu, Tcl and Expect
and can be started using:

  $ cd $GCCSDK_ROOT/arm-unknown-riscos/gcc
  $ make check

More information on running GCC testsuite can be found at
http://gcc.gnu.org/install/test.html.

5. Porting tools
~~~~~~~~~~~~~~~~

The files in the subdirectory 'porting-scripts' can help you to easily use the
cross-compiler for porting of existing programs.  More information can be found
in the 'PortingTools.html' file how this works.

To install those scripts:

  1. Define GCCSDK_INSTALL_ENV as the directory where those porting scripts can
     be installed.  E.g.:

       $ export GCCSDK_INSTALL_ENV=/home/riscos/env

  2. GCCSDK_INSTALL_CROSSBIN still needs to be defined where the cross-compiler
     has been instaled (see above).

  3. Run 'install-env':

       $ ./install-env

Note that the GCCSDK Autobuilder framework will use these porting-scripts in
order to do its job (cfr http://www.riscos.info/index.php/Using_GCCSDK).

Some GCCSDK Autobuilder projects still have AOF based assembler and currently
the best way to handle these (and remain GCCSDK 3.4.6 compatible until GCCSDK
4.x is completely selfhosting) is to temporary use GCCSDK 3.4.6 and instructing
its assembler to write ELF output instead of AOF.  This requires:

  1. Building GCCSDK 3.4.6 in gccsdk/gcc cross-compiler ('make build-cross')
     using the same GCCSDK_INSTALL_CROSSBIN as above.
  2. Rename the GCCSDK 3.4.6 binaries using 'move-3-4-6-away' (actually they
     get prefixed with 'arm-riscos-aof-'.
  3. AOF assembler based project need to use in their Makefile:

       AS = $(GCCSDK_INSTALL_CROSSBIN)/arm-riscos-aof-gcc
       ASFLAGS = -Wa,-elf,-ILibraries,-I$(@D) -c

     It is advised to do this only when AB_ELFBUILD is defined as "yes".

6. Credits
~~~~~~~~~~

The initial static ELF RISC OS work for GCC 4.1 was done by Nick Burrett (Jun
2005). Integrating Nick's work in a GCCSDK build environment and bringing it
up-to-date was done by John Tytgat and John-Mark Bell (Oct 2006).

Lee Noar contributed his RISC OS ELF loader work together with the necessary
dynamic ELF changes for RISC OS (originally developed for GCCSDK 3.4)
(Oct 2006).

Peter Naulls wrote the Autobuilder and Porting tools, and contributed
most of the ports in the Autobuilder.

The riscos.info Wiki is run by Peter Naulls and John Tytgat, and credit for
additional GCCSDK information also goes to Theo Markettos and Adam Richardson.

All of the work in GCC 4.1 for RISC OS would never have been possible without
important contributions from many people in the original GCC 3.x GCCSDK;
in particular, endless improvements to UnixLib which made it practical to
run a wide range of software on RISC OS.  See those versions for full details.

Copyright (c) 2005, 2006, 2007 GCCSDK Developers
http://gccsdk.riscos.info/
