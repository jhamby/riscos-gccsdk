The RISC OS Software Development Kit [GCCSDK GCC 4.1.1 Release 3 - Development]
====================================

This is a lightweight build environment which currently combines GCC 4.1.1
release, binutils 2.20 release, UnixLib 5.0 and libscl 2.0 into one directory
which can be used to build a RISC OS cross-compiler and native RISC OS compiler
with target 'arm-unknown-riscos' (APCS-32 compliant).

We don't have the GCC and binutils sources stored in our SVN server and these
will be automatically downloaded during building from their official
repositories.  Only patches to those sources and full copies of new files and
build system are stored in the GCCSDK SVN repository.


0. Required build tools
~~~~~~~~~~~~~~~~~~~~~~~

The following is a non exhaustive list of programs which are needed to compile
and work with GCCSDK on top of a typical recent standard Unix distribution:

- autogen v5.5.4 (or later)
- autoconf at least v2.58
- m4 v1.4.11 (other versions might work too)
- bison v2.3 (other versions might work too)
- svn v1.2 or later (only to be used to checkout GCCSDK source code from
  svn.riscos.info Subversion server)
- gcc & g++ v3.4.x or v4.x (other versions might work too)
- make v3.81 (other versions might work too)
- libtool v1.5.22 (other versions might work too)
- patch v2.5.9 (other versions might work too)
- makeinfo v4.8 (other versions might work too, Debian package 'texinfo')
- help2man
- wget (to fetch the binutils, gcc and autoconf/automake sources)

Specific versions of automake and autoconf are also needed but they will
be automatically downloaded, built & installed locally and used.

When you want to build Ada:

- gcc and g++ need to be version 4.1.
- GMP library (Debian package 'libgmp3-dev')
- MPFR library (Debian package 'libmpfr-dev')
- GNAT 4.1 (Debian package 'gnat-4.1')

When you want to run the GCC testsuite, you need at least:

- DejaGnu
- Tcl
- Expect

Other and more detailed prerequisites for building GCC can be found at
<URL:http://gcc.gnu.org/install/prerequisites.html>.


1. Checking out
~~~~~~~~~~~~~~~

To check out GCCSDK 4 build code:

  $ mkdir gccsdk4
  $ cd gccsdk4
  $ svn co svn://svn.riscos.info/gccsdk/trunk/gcc4


2. Build and using cross compiler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From inside the 'gcc4' directory run:

  $ ./build-world

Follow the prompts as required, and rerun as noted when you are happy
with the settings written to the file 'gccsdk-params'.  If 'build-world'
completes ok, then you will have completed build of the cross compiler and
porting tools, and you can jump straight to step 3 "Using the cross compiler".

2.1. Build setup
~~~~~~~~~~~~~~~~

What follows documents the more involved semi-manual build procedure. This
might be required if you have problems with the build and need to 
debug issues. It is also relevant if you want to make improvements 
to GCCSDK.

You need to have a valid 'gccsdk-params' file.  If you don't have it, run
'./build-world' once which will generate one which you can or have to
finetune as this file determines where the cross compiler is going to be
installed.

The build steps are the following:

1. Build cross-compiler.
2. Build the porting tools.

People only interested in having the cross-compiler only need to do step 1
and they might also be interested in the porting tools as well which ease
porting existing programs using the cross-compiler.  Note that in order to
use Autobuilder, you need to have the porting tools built.

Building the native RISC OS compiler is very similar to building the
cross-compiler and more details can be found in "4. Build the native RISC OS
compiler" section.

2.2. Build cross-compiler
~~~~~~~~~~~~~~~~~~~~~~~~~

This is done by:

  $ make

Or if you want to catch the full output in a log file, you do this by:

  $ make 2>&1 | tee build-output-cross.txt

This makefile will build the cross-compiler in several big steps.  After
each successful step, an empty file gets written in the 'buildstepsdir'
directory.  The filename of each file in 'buildstepsdir' follows a
simple name convention: <type>-<subtype>

Following <type> values are in use:

  cross     : Build & installation of that part of cross-compiler is done.
              Parts are 'binutils', 'gcc-bootstrap' and 'gcc-full'.
  ronative  : Build & installation of that part of the RISC OS native compiler
              is done.  Parts are 'binutils' and 'gcc-full'.
  src       : Source downloaded in srcdir.orig directory.  Those sources are
              binutils, gcc, autoconf & automake (possibly different versions
              for binutils and gcc).
  buildtool : Build & installed tool needed during the build.  Those tools are
              currently autoconf and automake.
  clean     : Removes temporary build produced files but not the installed
              compiler.
  distclean : Removes temporary build produced files including the installed
              compiler.

The 'make' command will always fully rebuild the next uncompleted step even if
that step was nearly done (nothing will be reused of that step).  If you
want to avoid this (especially during developing or debugging), you can
restart that step where it left off:

  1. Make sure the environment variables mentioned in 'gccsdk-params' are
     defined in your shell:

       $ source gccsdk-params

  2. Figure our where the build directory is of the step you want to restart
     (should be a subdirectory of 'builddir').
     The easiest way to find this out is to look at the end of the failed
     build output, for a line similar to:

     make[4]: Leaving directory `/home/riscos/gcc4/builddir/cross-gcc-full/arm-unknown-riscos/libunixlib'

     The build directory to go is builddir/cross-gcc-full/arm-unknown-riscos/libunixlib:

       $ cd builddir/cross-gcc-full/arm-unknown-riscos/libunixlib

  3. Completing the build step is usually just a matter of:

       $ make install

     Sometimes the already built binaries are needed to complete the
     buildstep.  Examples are:

     - When building RISC OS native compiler (i.e. not the cross-compiler),
       the cross-compiler is used.  So you need to do something like:

         $ PATH=$GCCSDK_INSTALL_CROSSBIN:$PATH make install

     - When autoconf/automake tools are used to recreate 'configure',
       makefile, etc by gcc and/or binutils, you need exact versions of these
       tools.  Those specific versions of autoconf/automake are also built
       and locally installed (instead of relying them to be present and
       installed on the host system).

       Depending of the versions of binutils and gcc, the required autoconf
       and automake versions can be different, so if reconfiguring and/or
       regenerating of the makefile is needed for one of the binutils
       components, use:

         $ PATH=<path-to-builddir>/installed-buildtools-for-binutils/bin:$PATH make install
     
       For one of the gcc components, use:

         $ PATH=<path-to-builddir>/installed-buildtools-for-gcc/bin:$PATH make install

2.3. Build porting tools
~~~~~~~~~~~~~~~~~~~~~~~~

The files in the subdirectory 'porting-scripts' can help you to easily use the
cross-compiler for porting of existing programs.  More information can be
found in the 'PortingTools.html' file how this works.

To (re)install those scripts:

  $ ./install-env

Note that the GCCSDK Autobuilder framework will use these porting-scripts in
order to do its job, cfr. <URL:http://www.riscos.info/index.php/Using_GCCSDK>
for more information.


3. Using the cross-compiler
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The cross-compiler can be used on its own.  The recommended way is to
define the environment variable GCCSDK_INSTALL_CROSSBIN.

  $ export GCCSDK_INSTALL_CROSSBIN=/home/riscos/cross/bin

Add add this environment value to your PATH.

  $ PATH=$GCCSDK_INSTALL_CROSSBIN:$PATH

Then use it as you would the GCC compiler normally.

GCCSDK_INSTALL_CROSSBIN is sometimes also used explicitly to access the
GCCSDK cross-compiler.

3.1. RISC OS filename compatibility issues for the cross-compiler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since the cross-compiler is built to execute on a Unix-like file system,
it expects file naming conventions particular to that operating system.
However, since there is going to be a lot of source code out there that
makes use of some RISC OS pathname features, the pre-processor has been
fixed to cope with path variable names in file names.

When the pre-processor attempts to read an include statement like:

  #include <DeskLib:Wimp.h>

it will try to resolve the DeskLib reference against the environment variable
DESKLIB_PATH.  So you could install the DeskLib header files in a place
such as /home/riscos/env/include/DeskLib.  To get GCC to search in that
directory for those headers, simply define the variable:

  $ export DESKLIB_PATH=/home/riscos/env/include/DeskLib

The xxx_PATH environment variable is in fact a search path containing one
or more directories separated by a comma where the part after "xxx:" in
the #include line is being searched for.

3.2. Throwback
~~~~~~~~~~~~~~

When used in conjunction with the SysLogD module, the cross-compiler can
produce throwback messages on a RISC OS machine when cross-compiling on
a different machine. This allows you to edit in RISC OS files stored on
a network filing system, cross-compile, and get throwback as if the
compiler was running on the RISC OS machine. It can also be used if the
cross-compiler is invoked by distcc.

To use throwback:

- On RISC OS install the SysLogD module and set up a mappings file as
  described in its help file (see riscos/syslogd/ReadMe).
- On the machine running the cross-compiler, set the THROWBACK_HOST
  environment variable to the hostname or IP address of the RISC OS machine.
  Add -mthrowback to the compiler command line.


4. Build the native RISC OS compiler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The native RISC OS compiler and associated programs like the ELF loader (part
of !SharedLibs) are built using the previously built cross-compiler.  It is
using the same Makefile driven build using the 'ronative' target.

   $ make ronative 2>&1 | tee build-output-ronative.txt

The RISC OS GCC release consists of several kits.  These are prepared using:

   $ ./create-gcckit

And you can find the result in the 'release-area' subdirectory.  The directory
and file structure there are exactly what will be packaged as either a set
of plain zip files (the old style of distributing RISC OS native compiler)
or either as a set of packages suitable for use with the RISC OS Packaging
Project (which are also zip files, cfr. <URL:http://www.riscpkg.org>).

For both cases the 'zip' tool is required to be present in
$GCCSDK_INSTALL_ENV/bin.

  1. Packaging in zip files happens by:

       $ ./create-gcckit -pkg

     The packages are output to release-area/kits.

  2. A set of packages suitable for use with the RISC OS Packaging Project
     can be created by running:

       $ ./create-riscpkg

     The packages are output to release-area/riscpkg.

     The compilers and base GCC use the version numbers of the GCCSDK, however
     the support modules, shared library loader, C and C++ shared libraries
     need their versions set by editing the 'riscpkg-versions' script.


5. Developing GCCSDK
~~~~~~~~~~~~~~~~~~~~

Developer changes can and should first be done in 'srcdir' directory and you
can then rebuild parts of GCCSDK by going to the appropriate subdirectory
inside 'builddir' and issue a 'make' or 'make install' there (cfr. point 2.2).

When those changes are ready to be committed, either patches need to be created
(in recipe/patches directory) or either full file copy needs to be made (in
recipe/files directory).

Easy patch (re)creation can be done using the 'create-patch' script. This
script will also take care of making full copies inside recipe/files directory
when it concerns a file not belonging to GCC nor binutils standard
distribution.

  $ cd srcdir
  $ ../create-patch <file to patch or file to copy>

Don't forget to do a 'svn add recipe/...' when it concerns a new patch file or
a new file inside recipe/files or recipe/scripts.


6. Testing
~~~~~~~~~~

After building the cross-compiler you can run the GCC testsuite.  This can be
easily done under Linux using its binfmt_misc kernel module and QEMU
containing RISC OS specific changes
(cfr. <URL:http://www.riscos.info/index.php/QEMU>) as those together allow
you to run unmodified ELF RISC OS binaries under Linux.

The GCC testsuite requires the installation of at least DejaGnu, Tcl and
Expect and can be started using:

  $ cd builddir-cross/gcc
  $ make check-gcc//unix/{-static}

Currently the testing works only for static libraries so that why you need to
specify the '-static' option. When you want to test the hard-float
configuration use:

  $ make check-gcc//unix/{-static -mhard-float}

Or both at the same time:

  $ make check-gcc//unix/{-static -mhard-float,-static -msoft-float}

More information on running GCC testsuite can be found at
<URL:http://gcc.gnu.org/install/test.html>.


7. RISC OS Packaging Project packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A set of packages suitable for use with the RISC OS Packaging Project
can be created by running:

  $ ./create-riscpkg

from the gcc4 directory after running the create-gcckit script documented
above.

The packages are output to release-area/riscpkg.

The 'zip' tool is required to be present in $GCCSDK_INSTALL_ENV/bin to run
this script.

The compilers and base GCC use the version numbers of the GCCSDK, however
the support modules, shared library loader, C and C++ shared libraries
need their versions set by editing the riscpkg-versions script.

More information on the RISC OS Packaging Project can be found at
<URL:http://www.riscpkg.org>.


8. Credits
~~~~~~~~~~

The initial static ELF RISC OS work for GCC 4.1 was done by Nick Burrett (Jun
2005). Integrating Nick's work in a GCCSDK build environment and bringing it
up-to-date was done by John Tytgat and John-Mark Bell (Oct 2006).

Module support, multilib, libscl integration and build support changes was
realised by John Tytgat.

Lee Noar contributed his RISC OS ELF loader work together with the necessary
dynamic ELF changes for RISC OS (originally developed for GCCSDK 3.4)
(Oct 2006).

Peter Naulls wrote the Autobuilder and Porting tools, and contributed
most of the ports in the Autobuilder.

The riscos.info Wiki is run by Peter Naulls and John Tytgat, and credit for
additional GCCSDK information also goes to Theo Markettos and Adam Richardson.

All of the work in GCC 4.1 for RISC OS would never have been possible without
important contributions from many people in the original GCC 3.x GCCSDK;
in particular, endless improvements to UnixLib which made it practical to
run a wide range of software on RISC OS.  See those versions for full details.

Copyright (c) 2005-2010 GCCSDK Developers
<URL:http://gccsdk.riscos.info/>
