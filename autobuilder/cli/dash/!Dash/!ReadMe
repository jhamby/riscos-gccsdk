Dash has been compiled with JOBS=0 so bg, fg and job control generally will not do anything.
Also, no extra lineeditting is compiled in, but running the `stty erase ^H` command as suggested in the dash_init file will at least
give you delete character on the backspace key.
Optionally stty werase ^? could reassign the delete key to word erase rather than have it display the control characters.
stty is part of the CoreUtils package.
ENV has to be set to the full path of the dash_init file so it will found and run by dash (interactive start mode).
In command mode the arguments following dash -c must be quoted, otherwise only the first arg is read. (same as linux)
Note bash scripts may need tweaking for dash (look up bashisms) and pipes will probably need redirecting to /tmp/file instead.
eg. command1 > /tmp/dtemp && command2 /tmp/dtemp && rm /tmp/dtemp
Paths are separated with semicolons to allow full RISC OS filesystem double colons. 
Without this full drive/path description, when the CSD (PWD) is changed to another FS/drive, the intended PATH is lost.
See (and edit) the PATH and ENV examples in the !Dash.!Boot file.
Variables could be used in PATHS, but the result should still be of the form /ADFS::4.$/my/path/somewhere - in other words there is
no conversion from RISC OS.
The dash builtin, type <cmd> is useful to observe the actual path used for the given cmd name, or if it has found the builtin cmd 

Quoting from the documentation:
    Path Search

    When locating a command, the shell first looks to see if it has a shell function by that name. Then, if PATH does not contain
an entry for %builtin, it looks for a builtin command by that name. Finally, it searches each entry in PATH in turn for the command.

    The value of the PATH variable should be a series of entries separated by colons. Each entry consists of a directory name, or a
directory name followed by a flag beginning with a percent sign. The current directory should be indicated by an empty directory name.
If no percent sign is present, then the entry causes the shell to search for the command in the specified directory. If the flag is
%builtin then the list of shell builtin commands is searched. If the flag is %func then the directory is searched for a file which is
read as input to the shell. This file should define a function whose name is the name of the command being searched for.

    Command names containing a slash are simply executed without performing any of the above searches.
Unquote

 A cmd in a given PATH item takes precedence over a builtin with the same name by appending %builtin to the particular PATH item.

Note: A cat cmd builtin from bsd has been added, The autobuilder patches could serve as a guideline, if you want to add more builtins.
The start up wimpslot is currently 384K but running an external cmd and this doubles because of fork/exec.
Still, this is a lot smaller than Bash that starts with over a MB and also doubles when running external cmds.

The smallest memory footprint might be achieved by having cmds small and large, as builtins, but in a shared library so they don't
have to be all loaded at startup in the way a static build does.

---

