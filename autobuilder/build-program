#!/bin/bash -e

echo "Autobuilder: Building package: $AB_PACKAGE"

if [ -z "$GCCSDK_INSTALL_ENV" ] ; then
  echo "Do not call this script directly" 1>&2
  exit 1
fi

# Reset vars for each package with default values:
AB_MANPAGE=
AB_ROVERSION=1
AB_PVERSION=
AB_PRECONF=
AB_INSTALL=no
AB_CATEGORY=
AB_COPYSOURCE=yes
AB_DISTCLEAN=
AB_INSTALLDOCS="README ChangeLog FAQ AUTHORS CHANGES COPYING LICENSE"
AB_CONFIG=$GCCSDK_INSTALL_ENV/ro-config
AB_PATCHOPT="-l -p0"

# if the AB_CPUS variable is set, use that number of parallel processes in
# our compile (may go wrong if makefiles are poorly written)
if [ -z "$AB_CPUS" ] || [ "$AB_CPUS"=="X" ] ; then
	KERNEL=$(uname)
	if [ "$KERNEL"=="Linux" ] ; then
		NUMCPUS=$(grep -c '^processor' /proc/cpuinfo)
		CPUMESSAGE="Detected $NUMCPUS CPUs"
	else
		CPUMESSAGE="Can't detect number of CPUs, using 1"
		NUMCPUS=1
	fi
	export MAKEFLAGS="-j$NUMCPUS"
	echo "Autobuilder: $CPUMESSAGE: set AB_CPUS to use more or fewer (eg in case build breaks)"
	export AB_MAKE="MAKEFLAGS=\"$MAKEFLAGS\" $GCCSDK_INSTALL_ENV/ro-make"
else
	export MAKEFLAGS="-j$AB_CPUS"
	echo "Autobuilder: Using $AB_CPUS CPUs"
	export AB_MAKE="MAKEFLAGS=\"$MAKEFLAGS\" $GCCSDK_INSTALL_ENV/ro-make"
fi

export AB_INSTALLTARGET=install

if [ "$AB_ELFBUILD" != "yes" ] ; then
  # Use ChoX11 (libCX11) as X library instead of cross-compiled one (libX11)
  # Only needed for GCCSDK 3.4 AOF builds.
  export TLINK_CX11=
fi

H=$AB_HOME/$AB_PACKAGEDIR

rm -f $AB_HOME/last-zips

# Make $CC, $CXX available, i.e. our RISC OS cross-compiler.
eval $(grep "export CC=" $GCCSDK_INSTALL_ENV/ro-config)
eval $(grep "export CXX=" $GCCSDK_INSTALL_ENV/ro-config)
# Make $HOST_CC and $HOST_CXX available, i.e. our native compiler.
export HOST_CC=$(which cc)
[ -z "$HOST_CC" ] && HOST_CC=$(which gcc)
export HOST_CXX=$(which c++)
[ -z "$HOST_CXX" ] && HOST_CXX=$(which g++)

if [ -x $GCCSDK_INSTALL_ENV/bin/unzip ] ; then
  export GCCSDK_UNZIP="$GCCSDK_INSTALL_ENV/bin/unzip -F "
else
  export GCCSDK_UNZIP="echo \"Autobuilder: unzip binary not found (build native-unzip package first). Called with arguments \" "
fi

addzip() {
  if [ ! -x $GCCSDK_INSTALL_ENV/bin/zip ] ; then
    echo "Autobuilder: zip binary not found (build native-zip package first)"
    exit 1
  fi
  export GCCSDK_ZIP="$GCCSDK_INSTALL_ENV/bin/zip -, -9"
  result=$($GCCSDK_INSTALL_ENV/bin/zip -, -9 $@ -x "*/CVS/*" -x "*/\.svn/*" -x "*~" -x "*~,fff" 2>&1)
  #echo $result
  if echo $result | grep -q "zip warning"; then
    exit 1
  fi
}

ab_package() {
  echo "Autobuilder: Not Packaging"
  AB_NOPACKAGE=yes
}

ab_make() {
  if [ "$AB_MAKE" == "$GCCSDK_INSTALL_ENV/ro-make" ] &&
     ! [ -e Makefile ] && ! [ -e makefile ] ; then
    echo "Autobuilder: No known build method" 1>&2
    exit 1
  fi

  eval $AB_MAKE
  return
}


ab_create_app() {
  local app
  local section
  local package

  if [ -z "$2" ] ; then
    section=$1
    app=$AB_PACKAGE
  else
    app=$1
    section=$2
  fi

  if [ -n "$3" ] ; then
    package=$3
  else
    package=$AB_PACKAGE
  fi

  local check
  local found=false
  for check in $AB_PACKAGES; do
    if [ "$check" == "$package" ] ; then
      found=true
      break
    fi
  done

  if ! $found; then
    AB_PACKAGES="$AB_PACKAGES $package"
  fi


  if [ -z "$AB_CATEGORY" ] ; then
    AB_CATEGORY=$(sed s#^Apps/## <<<$section)
  fi

  export AB_SUBPACKAGE=$package

  A=$D/$package/$section/\!$app/
  AA=$app
  mkdir -p $A

  if [ -e $H/\!$app ] ; then
    /bin/cp -av $H/\!$app $D/$package/$section
  fi

  if ! [ -e $A/\!Boot,feb ] ; then
    echo -e "| !Boot file for $app\n" > $A/\!Boot,feb
    echo "Set $app\$Dir <Obey\$Dir>" >> $A/\!Boot,feb
    echo -e "IfThere <$app\$Dir>.!Sprites then Iconsprites <$app\$Dir>.!Sprites\n" >> $A/\!Boot,feb
  fi
}


ab_create_command_app() {
  ab_create_app $1 $2 $3

  # For commands applications, just run the !Boot file
  if ! [ -e $A/\!Run,feb ] ; then
    echo -e "| !Run file for $AA\n" > $A/\!Run,feb
    echo "/<Obey\$Dir>.!Boot" >> $A/\!Run,feb
  fi
}


ab_add_commands() {
  local program
  for program in $@; do
    if [ "$AB_ELFBUILD" == yes ] && file -b $program | grep -q -e "ELF.*statically" ; then
      # Call elf2aif only for statically linked ELF binaries.  In that case,
      # change ,e1f extension (if any) to ,ff8.
      local abs_program
      abs_program=`sed -e s#,e1f## <<< $program`,ff8
      $GCCSDK_INSTALL_ENV/ro-path elf2aif $program $abs_program
      [ "$program" != "$abs_program" ] && rm $program
      program=$abs_program
    fi

    # Determine minimal WimpSlot size for binaries (will be empty for ObeyFiles)
    # We don't just strip AB_EXEEXT but any RISC OS filetype extension
    # as we can have ObeyFiles, Absolute (e.g. when using SCL), etc. files here.
    local name=$(basename $program | sed -e s#,[a-f\|0-9][a-f\|0-9][a-f\|0-9]##)
    local slotsize=`$GCCSDK_INSTALL_ENV/bin/makerun $program 2>/dev/null`
    if [ -z "$slotsize" ] ; then
      echo "Set Alias\$$name Run <${AA}\$Dir>.$name %%*0" >> $A/\!Boot,feb
    else
      echo "Set Alias\$$name WimpSlot -min `echo $slotsize`k|MRun <${AA}\$Dir>.$name %%*0" >> $A/\!Boot,feb
    fi

    /bin/cp -av $program $A
  done
}

ab_docs() {
  local doc
  local help=false

  mkdir -p $A/docs

  ln -sf . man3

  for doc in $@; do
    case $doc in
      -h)
        help=true
        ;;

      *.1|*.man|*.info)
        if $help; then
          rman -f HTML $doc > $A/docs/\!Help,faf
          help=false
        else
          rman -f HTML $doc > $A/docs/$(basename $doc),faf
        fi
        ;;

      *)
        if $help; then
          cp -av $doc $A/docs/\!Help
          help=false
        else
          cp -av $doc $A/docs/
        fi
        ;;
    esac
  done

  rm -f man3

  if ! [ -e $A/\!Help ] && ! [ -e $A/\!Help,feb ] && ! [ -e $A/\!Help,faf ] ; then
    echo "Filer_OpenDir <Obey\$Dir>.docs" > $A/\!Help,feb

    if [ -e $A/docs/\!Help ] || [ -e $A/docs/\!Help,faf ] ; then
      echo "Filer_Run <Obey\$Dir>.docs.!Help" >> $A/\!Help,feb
    fi
  fi
}


# Default function to package the source code
# Only used on if AB_COPYSOURCE=yes and object
# has been packaged.
ab_package_source() {
  AB_SRCDIR=$S
  cd $S
  if [ -z "$AB_DISTCLEAN" ] ; then
    AB_DISTCLEAN="$AB_MAKE distclean || $AB_MAKE clean"
  fi

  eval $AB_DISTCLEAN

  # Ensure no RISC OS files left behind
  find . -name "*${AB_EXEEXT}" -type f -print0 | xargs -0 rm -f
  find . -name "*,faf" -type f -print0 | xargs -0 rm -f
  find . -name "*.o" -type f -print0 | xargs -0 rm -f
  find . -name "*.a" -type f -print0 | xargs -0 rm -f

  mkdir -p $S/riscos
  /bin/cp -r $H/* $S/riscos || true
  rm -f $S/riscos/last-failure
  rm -f $S/riscos/last-success
}

ab_subpackage_versions() {
  # look up a version for the specific subpackage based on a
  # variable with the package name- eg AB_PVERSION_libglib2_0
  
  # inherit variable 'package' with current subpackage
  # illegal characters in package names are replaced by underlines
  subpkg_clean=$(echo ${package} | sed s/\[-.,\]/_/g )
  subpkg_varname=AB_PVERSION_${subpkg_clean}
  eval subpkg_version=\$${subpkg_varname}
  if [ -z "$subpkg_version" ] ; then
    pkgversion=$AB_PVERSION
  else
    pkgversion=$subpkg_version
  fi

  subpkg_rovarname=AB_ROVERSION_${subpkg_clean}
  eval subpkg_roversion=\$${subpkg_rovarname}
  if [ -z "$subpkg_roversion" ] ; then
     pkgroversion=$AB_ROVERSION
  else
    pkgroversion=$subpkg_roversion
  fi
  
  #echo "AB_SUBPACKAGE=$AB_SUBPACKAGE"
  #echo "subpkg_clean=$subpkg_clean"
  #echo "subpkg_varname=$subpkg_varname"
  #echo "pkgver=$pkgversion"
  #echo "rover=$pkgroversion"
}

# Override 'cp' to ensure we look for extension and no-extension during
# packaging.  This is similar code to that in ro-install
cp() {
  local param
  local params
  local dest

  for param in $@ ; do
    params="$params $dest"

    if [ "$(echo "$param" | cut -c 1)" != "-" ] ; then
      if ! [ -e "$param" ] ; then
        # Add extension if the source doesn't exist but it's there with ,e1f
        if [ -e "$param$AB_EXEEXT" ] ; then
          param="$param$AB_EXTEXT"
        else
          # If it's there without an extension, then symlink
          local plain=$(sed "s#$AB_EXEEXT##" <<< $param)

          if [ -e "$plain" ] ; then
            /bin/ln $plain $param
          fi
        fi
      fi
    fi
    dest=$param
  done

  /bin/cp $params $dest
}


# Generate WimpSlot values
ab_makerun() {
  local app=$1
  local dest=$2
  local run=$3
  local aif

  if [ -z "$dest" ] ; then
    dest=$app
  fi

  if [ -z "$run" ] ; then
    run=$A/\!Run
  fi

  aif=$(basename $dest | sed "s#,e1f\$#,ff8#")

  if ! grep -q ,ff8 <<< $aif; then
    aif=$aif,ff8
  fi

  $GCCSDK_INSTALL_ENV/ro-path elf2aif $app $A/$aif

  if [ -e $run,feb ] ; then
    mv $run,feb $run
  else
    # Create standard !Run
    echo -e "WIMPSLOT\n" > $run
    echo -e "Set $AA\$Dir <Obey\$Dir>\n" >> $run
    echo "Run <$AA\$Dir>.$(basename $(sed "s#,ff8##" <<< $dest)) >null: 2><Obey\$Dir>.stderr" >> $run
  fi

  $GCCSDK_INSTALL_ENV/bin/makerun $A/$aif $run $run,feb
  rm -f $run
}



AB_CONFIG=$GCCSDK_INSTALL_ENV/ro-config
export AB_MAKE=$GCCSDK_INSTALL_ENV/ro-make

if true; then

  # Build directory
  if [ "$AB_NOFETCH" == "yes" ] ; then
    AB_DIR=$AB_TMPDIR
  else
    AB_DIR=$AB_TMPDIR/$AB_PACKAGE
  fi

  D=$AB_DIR/package

  # Remove old dir and create new one
  [ "$AB_DEBUG" == "yes" ] || [ "$AB_NOFETCH" == "yes" ] || rm -rf $AB_DIR
  [ "$AB_NOFETCH" == "yes" ] || mkdir -p $AB_DIR
  cd $AB_DIR

  if [ -e $AB_HOME/$AB_PACKAGEDIR/alias ] ; then
    echo "Autobuilder: Calling alias"
    . $AB_HOME/$AB_PACKAGEDIR/alias
  fi

  if [ "$AB_NOFETCH" != "yes" ] ; then
    # Fetch the source
    echo "Autobuilder: Fetching source for $AB_PACKAGE"
    . $AB_HOME/fetch-program
  fi

  AB_FULLNAME=$(find . -mindepth 1 -maxdepth 1 -type d | grep -v unpack | grep -v package | grep -v CVS | cut -b 3-)

  if [ "$(wc -w <<<$AB_FULLNAME)" != "1" ] ; then
    if ! [ -e $AB_HOME/$AB_PACKAGEDIR/preprocess ] ; then
      echo "Autobuilder: Could not determine package name.  Found \"$AB_FULLNAME\"" 1>&2
      exit 1
    fi
    unset AB_FULLNAME
  fi

  # Run any preprocess script to unpack it in any special way
  if [ -e $AB_HOME/$AB_PACKAGEDIR/preprocess ] ; then
    if [ -n "$AB_FULLNAME" ] ; then cd $AB_FULLNAME; fi
    echo "Autobuilder: Calling preprocess"
    . $AB_HOME/$AB_PACKAGEDIR/preprocess

    if [ -z "$AB_FULLNAME" ] ; then
      AB_FULLNAME=$(find . -mindepth 1 -maxdepth 1 -type d | grep -v unpack | grep -v package | grep -v CVS | cut -b 3-)

      if [ "$(wc -w <<<$AB_FULLNAME)" != "1" ] ; then
        echo "Autobuilder: Could not determine package name.  Found \"$AB_FULLNAME\"" 1>&2
        exit 1
      fi
    fi

  # Check to see if it's tarred up inside
  elif [ -d "$AB_FULLNAME/upstream" ] ; then

    mkdir unpack
    cd unpack

    for tarball in $(find ../$AB_FULLNAME/upstream/ | grep gz) ; do
      tar xfz $tarball
    done

    /bin/cp -a */* ../$AB_FULLNAME

    cd ../$AB_FULLNAME
    rm -rf ../unpack

    AB_PATCHES=

    if [ -d upstream/patches ] ; then
      AB_PATCHES=$(find upstream/patches/ | grep "\.patch$" | sort -n || true)
    fi

    # Apply any Debian/Upstream patches
    for AB_PATCH in $AB_PATCHES ; do
      echo "Autobuilder: Upstream patch: $AB_PATCH"
      patch -p1 -l < "$AB_PATCH" || true
    done
  else
    cd $AB_FULLNAME
  fi

  # FIXME: needed for the TIFF project, is it a more general problem ?
  # Workaround when *.gz file is the contents of the package.orig.tar.gz file.
  ( cd .. && find $AB_FULLNAME -maxdepth 1 -name '*.gz' -exec tar -xzf '{}' \; )

  S=$PWD
  echo "Autobuilder: source directory is $S"

  AB_PATCH_DIR=debian/patches
  if ! [ -d "$AB_PATCH_DIR" ] ; then
    AB_PATCH_DIR=debian/patch
  fi

  # Apply any Debian patches
  if [ -d "$AB_PATCH_DIR" ] ; then
    if [ -e $AB_PATCH_DIR/series ] ; then
      patches=$(grep -v ^# $AB_PATCH_DIR/series || true)
    elif [ -e $AB_PATCH_DIR/00list ] ; then
      patches=$(grep -v ^# $AB_PATCH_DIR/00list || true)
    else
      patches=$(cd $AB_PATCH_DIR; find . -type f | sort -n || true)
    fi

    for AB_PATCH in $patches; do
      # Skip any options.  Assume we'll be able to apply them anyway
      if [ "${AB_PATCH:0:1}" == "-" ] ; then
        continue;
      fi

      echo "Autobuilder: Debian patch: $AB_PATCH"
      AB_PATCH=$AB_PATCH_DIR/$AB_PATCH

      if ! [ -e $AB_PATCH ] ; then
        AB_PATCH=$AB_PATCH.dpatch

        if ! [ -e $AB_PATCH ] ; then
          echo "Autobuilder: Patch \"$AB_PATCH\" not found" 1>&2
          exit 1
        fi
      fi

      # Not all patches are at the same level. Do some heuristic (see simple-patchsys.mk).
      AB_PATCH_SUCCESS=""
      for AB_PATCH_LEVEL in 0 1 2 ; do
        if [ -z "$AB_PATCH_SUCCESS" ] ; then
          echo "  ...trying level $AB_PATCH_LEVEL"
          if patch -E --dry-run -p$AB_PATCH_LEVEL -l >/dev/null 2>&1 < $AB_PATCH; then
            # Patching at this level seems to work out.  Do it now for real:
            patch -E -p$AB_PATCH_LEVEL -l < $AB_PATCH
            AB_PATCH_SUCCESS="yes"
          fi
        fi
      done
      if [ -z "$AB_PATCH_SUCCESS" ] ; then
        echo "  ...FAILED"
        echo "Autobuilder: Debian patches failed" 1>&2
        #exit 1
      else
        echo "  ...success !"
      fi
    done
  fi

  # Apply any RISC OS patches
  patches=$(find $AB_HOME/$AB_PACKAGEDIR/ | grep "\.p\$" || true)
  if [ "$AB_ELFBUILD" == "yes" ] ; then
    patches="$patches $(find $AB_HOME/$AB_PACKAGEDIR/ | grep \.p.elf\$ || true)"
  else
    patches="$patches $(find $AB_HOME/$AB_PACKAGEDIR/ | grep \.p.aof\$ || true)"
  fi

  patch_ok=true

  for AB_PATCH in $patches; do
    echo "Autobuilder: RISC OS patch: $AB_PATCH"
    if ! patch $AB_PATCHOPT < $AB_PATCH && [ "$AB_DEBUG" != "yes" ] ; then
      patch_ok=false
    fi
  done

  if ! $patch_ok; then
    echo "Autobuilder: Patches failed"
    exit 1
  fi

  # Set default for source copy based on the premise
  # that most open source programs have a COPYING file
  if [ -z "$AB_COPYSOURCE" ] ; then
    if [ -e COPYING ]; then
      AB_COPYSOURCE=yes
    fi
  fi

  # Try to guess the version number.  This isn't reliable, and might need to be
  # explictly set by the package
  if [ -z "$AB_PVERSION" ] ; then
    AB_PVERSION=$(echo $AB_FULLNAME | sed -e s#$AB_PACKAGE-## -e "s/[^-]*-//" -e "s/~//")

    if [ -z "$AB_PVERSION" ] ; then
      AB_PVERSION=1
    fi
  fi

  if [ "$AB_TRY" != yes ] ; then
    echo "Autobuilder: Calling setvars"
    . $AB_HOME/$AB_PACKAGEDIR/setvars
  fi

  # If no preference is set for shared versus dynamic, then by default build libraries dynamically
  # (which usually also builds a static library) but others statically
  if [ -z "$RO_SHAREDLIBS" ] ; then
    if [ "$AB_INSTALL" == "yes" ] && [ "$AB_ELFBUILD" == "yes" ] ; then
      export RO_SHAREDLIBS=yes
    else
      export RO_SHAREDLIBS=no
    fi
  fi

  if [ -n "$AB_ZIPNAME" ] ; then
    echo "Autobuilder: AB_ZIPNAME (set to \"$AB_ZIPNAME\") is no longer used.  Instead, set AB_PVERSION, and use ab_create_app, etc" 1>&2
    exit 1
  fi

  export AB_DIR

  if [ -e Imakefile ] ; then
    echo "Autobuilder: Calling xmkmf"
    $GCCSDK_INSTALL_ENV/ro-path $GCCSDK_INSTALL_ENV/bin/xmkmf -a
  elif [ -e configure ] || [ ! -z "$RO_CPATH" -a -e $RO_CPATH/configure ] ; then
    if [ "$AB_PRECONF" != ":" ] ; then
      echo "Autobuilder: Calling configure command: $AB_PRECONF $AB_CONFIG $AB_CONFLAGS"
    fi
    eval $AB_PRECONF $AB_CONFIG $AB_CONFLAGS
  fi

  if [ -e $AB_HOME/$AB_PACKAGEDIR/post-configure ] ; then
    echo "Autobuilder: Calling post-configure"
    . $AB_HOME/$AB_PACKAGEDIR/post-configure
  fi

  S=$PWD

  echo "Autobuilder: Running make command: $AB_MAKE"
  ab_make

  if [ -e install-sh ] && ! [ -h install-sh ] ; then
    mv install-sh install.sh-old
    ln -s $GCCSDK_INSTALL_ENV/ro-install install-sh
  fi

  # Need to install in $GCCSDK_INSTALL_ENV ?
  if [ "$AB_INSTALL" == "env" ] || [ "$AB_INSTALL" == "yes" ] ; then
    echo "Autobuilder: Running make install"
    # Append GCCSDK_INSTALL_ENV to PATH so that cp/rm/ln are picked up there.
    eval "$AB_MAKE $AB_INSTALLTARGET"
  fi

  # Need to package the installed files ?
  if [ "$AB_INSTALL" == "yes" ] ; then
    export AB_OUTPUTLIB
    export AB_INSTALLDOCS

    export RO_PKG=${AB_PACKAGE}_${AB_PVERSION}${AB_TARGET}-${AB_ROVERSION}
    $AB_HOME/ro-libpack
  fi
fi


export AB_MAINTAINER
export AB_LICENCE

# Custom package routine ?
rm -rf $D
mkdir -p $D

# export variable required by add-riscpkg
export AB_PVERSION
export AB_ROVERSION
export AB_CATEGORY
export AB_DEBNAME

if [ "$AB_MANPAGE" != "" ] ; then
  ln -sf . man3

  for AB_PAGE in $AB_MANPAGE ; do
    rman -f HTML $S/$AB_PAGE > $D/$(basename $AB_PAGE),faf
  done
  rm -f man3
fi

ab_package

if [ "$AB_NOPACKAGE" == "" ] ; then

  if [ "$AB_CATEGORY" == "" ] ; then
    echo "Autobuilder: No category specified, not packaging" 1>&2
    exit 1
  fi

  echo "Autobuilder: Packaging files"

  cd $D
  if [ "$AB_ELFBUILD" == "yes" ] ; then
    # strip and convert binaries and libraries where possible
    binaries=$(find . -type f -wholename "*,e1f")
    for binary in $binaries; do
      $GCCSDK_INSTALL_ENV/ro-path arm-unknown-riscos-strip $binary 2>/dev/null || true
      if $GCCSDK_INSTALL_ENV/ro-path elf2aif $binary $(sed "s#,e1f\$#,ff8#" <<<$binary) 2>/dev/null; then
        rm $binary
      fi
    done

    libs=$(find . -type f -wholename "*.so,fff")
    for lib in $libs; do
      $GCCSDK_INSTALL_ENV/ro-path arm-unknown-riscos-strip $lib 2>/dev/null || true
    done
  fi

  if [ -z "$AB_PACKAGES" ] ; then
    AB_PACKAGES=$AB_PACKAGE
  fi

  rm -f $AB_HOME/last-zips

  for package in $AB_PACKAGES ; do
    echo "Autobuilder: Packaging as $package"

    if [ -d "$package" ] ; then
      unset section
      if [ -e "$package/RiscPkg/Control,fff" ] ; then
        section=`grep "Section: " $package/RiscPkg/Control,fff | cut -d ' ' -f 2`
      fi
      if [ -e "$package/RiscPkg/Control" ] ; then
        section=`grep "Section: " $package/RiscPkg/Control | cut -d ' ' -f 2`
      fi
      if [ -z "$section" ] ; then
        section="$AB_CATEGORY"
      fi
      ab_subpackage_versions

      AB_PZIP=${AB_DIR}/${package}_${pkgversion}${AB_TARGET}-${pkgroversion}.zip

      # Used for source zip name
      if [ -z "$AB_ZIP" ] ; then
        AB_ZIP=$AB_PZIP
      fi

      # Remove an existing ZIP file (otherwise the old contents will be merged with the new one)
      if [ -e $AB_PZIP ] ; then
	echo "Autobuilder: Removing old $AB_PZIP"
        rm $AB_PZIP
      fi
      cd $package
      addzip -r $AB_PZIP *
      #echo "Making directory !!$AB_OUTPUTPACK/$section !!"
      mkdir -p $AB_OUTPUTPACK/$section
      mv $AB_PZIP $AB_OUTPUTPACK/$section
      ls -l $AB_OUTPUTPACK/$section/$(basename $AB_PZIP)
      echo $AB_OUTPUTPACK/$section/$(basename $AB_PZIP) >> $AB_HOME/last-zips
      cd ..
    else
      echo "Autobuilder: package directory missing $package" 1>&2
      exit 1
    fi
  done

  # Package source if required
  if [ "$AB_COPYSOURCE" == "yes" ] && [ "$AB_DEBUG" != "yes" ] ; then
    echo "Autobuilder: Packaging source"
    ab_package_source
    if [ -z $AB_SRCRDIR ] && [ -d $AB_SRCDIR ] ; then
      AB_SRCZIP=$(echo "$AB_ZIP" | sed s#"\.zip$"#"-src.zip"#)
      if [ -e $AB_SRCZIP ] ; then
        rm $AB_SRCZIP
      fi

      cd $AB_SRCDIR
      $GCCSDK_INSTALL_ENV/bin/zip -r $AB_SRCZIP * -x "*/CVS/*" -x "*/\.svn/*"
      mv $AB_SRCZIP $AB_OUTPUTPACK/$AB_CATEGORY
      echo $AB_OUTPUTPACK/$AB_CATEGORY/$(basename $AB_SRCZIP) >> $AB_HOME/last-zips
      cd $D
    else
      echo "Autobuilder: Warning! Source directory for source package missing '$AB_SRCDIR'"
    fi
  fi
fi

cd $AB_DIR/..
[ "$AB_NOFETCH" == "yes" ] || [ "$AB_DEBUG" == "yes" ] || rm -rf $AB_DIR

echo "Autobuilder: Package stage completed"
