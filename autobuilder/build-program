#!/bin/bash -e

if [ "$AB_PACKONLY" != "yes" ] ; then
  echo "Autobuilder: Building package: $AB_PACKAGE"
else
  echo "Autobuilder: Zipping package: $AB_PACKAGE"
fi

# Reset vars for each package with default values:
AB_MANPAGE=
AB_ROVERSION=1
AB_PVERSION=
AB_PRECONF=
AB_INSTALL=no
AB_CATEGORY=
export AB_ZIPNAME=
AB_README=ReadMe
AB_COPYSOURCE=
AB_DISTCLEAN=
AB_INSTALLDOCS="README ChangeLog FAQ AUTHORS CHANGES COPYING LICENSE"
AB_CONFIG=$GCCSDK_INSTALL_ENV/ro-config
export AB_MAKE=$GCCSDK_INSTALL_ENV/ro-make
export AB_INSTALLTARGET=install

if [ "$AB_VERBOSE" == "yes" ] ; then
  # Use ChoX11 (libCX11) as X library instead of cross-compiled one (libX11)
  # Only needed for GCCSDK 3.4 AOF builds.
  export TLINK_CX11=
fi

H=$AB_HOME/$AB_PACKAGEDIR


# Make $CC, $CXX available 
eval $(grep "export CC=" $GCCSDK_INSTALL_ENV/ro-config)
eval $(grep "export CXX=" $GCCSDK_INSTALL_ENV/ro-config)

addzip() {
 result=$($GCCSDK_INSTALL_CROSSBIN/zip -, $@ -x "*/CVS/*" -x "*/\.svn/*" 2>&1)
 echo $result
 if echo $result | grep "zip warning" > /dev/null ; then
   exit 1
 fi
}

ab_package() {
  echo "Autobuilder: Not Packaging"
  AB_NOPACKAGE=yes
}

ab_make() {
  eval $AB_MAKE
  return
}


ab_create_command_app() {
  local app=$1
  local section=$2

  if [ -z "$AB_CATEGORY" ] ; then
    AB_CATEGORY=$(sed s#^Apps/## <<<$section)
  fi

  A=$D/$section/\!$app/
  AA=$app
  mkdir -p $A

  if [ -e $H/\!$app ] ; then
    cp -av $H/\!$app $D/$section
  fi

  if ! [ -e $A/\!Run,feb ] ; then
    echo -e "| !Run file for $app\n" > $A/\!Run,feb
    echo "<Obey\$Dir>.!Boot" >> $A/\!Run,feb
  fi

  if ! [ -e $A/\!Boot,feb ] ; then
    echo -e "| !Boot file for $app\n" > $A/\!Boot,feb
    echo "Set $app\$Dir <Obey\$Dir>" >> $A/\!Boot,feb
    echo -e "Iconsprites <$app\$Dir>.!Sprites\n" >> $A/\!Boot,feb
  fi
}


ab_add_commands() {
  for program in $@; do
    name=$(basename $program | sed -e s#$AB_EXEEXT##)
    echo "Set Alias\$$name <${AA}\$Dir>.$name %%*0" >> $A/\!Boot,feb
    cp -av $program $A
  done
}

# Might vary in future
ab_create_app() {
  ab_create_command_app $1 $2
}


# Default function to package the source code
# Only used on if AB_COPYSOURCE=yes and object
# has been packaged.
ab_package_source() {
  AB_SRCDIR=$S
  cd $S
  if [ -z "$AB_DISTCLEAN" ] ; then
    AB_DISTCLEAN="$AB_MAKE distclean"
  fi

  eval $AB_DISTCLEAN

  # Ensure no RISC OS files left behind
  find . -name "*${AB_EXEEXT}" -type f -print0 | xargs -0 rm -f
  find . -name "*,faf" -type f -print0 | xargs -0 rm -f

  # Remove man3 links
  rm -f $S/man3 $S/man/man3

  mkdir -p $S/riscos
  cp -r $H/* $S/riscos || true
  rm -f $S/riscos/last-failure
  rm -f $S/riscos/last-success
}

AB_CONFIG=$GCCSDK_INSTALL_ENV/ro-config
export AB_MAKE=$GCCSDK_INSTALL_ENV/ro-make

if [ "$AB_PACKONLY" == "yes" ] ; then

 AB_DIR=.
 D=$AB_DIR/package
 S=$PWD

 if [ -e $AB_HOME/$AB_PACKAGEDIR/preprocess ] ; then
  echo "Autobuilder: Calling preprocess"
  . $AB_HOME/$AB_PACKAGEDIR/preprocess
 fi
 
 echo "Autobuilder: Calling setvars"
 . $AB_HOME/$AB_PACKAGEDIR/setvars

else
 
 # Build directory
 if [ "$AB_NOFETCH" == "yes" ] ; then
   AB_DIR=$AB_TMPDIR
 else
   AB_DIR=$AB_TMPDIR/$AB_PACKAGE
 fi

 D=$AB_DIR/package

 # Remove old dir and create new one
 [ "$AB_DEBUG" == "yes" ] || [ "$AB_NOFETCH" == "yes" ] || rm -rf $AB_DIR
 [ "$AB_NOFETCH" == "yes" ] || mkdir -p $AB_DIR
 cd $AB_DIR

 if [ -e $AB_HOME/$AB_PACKAGEDIR/alias ] ; then
  AB_ZIPNAME=$AB_PACKAGE
  echo "Autobuilder: Calling alias"
  . $AB_HOME/$AB_PACKAGEDIR/alias
 fi

 if [ "$AB_NOFETCH" != "yes" ] ; then
   # Fetch the source
   echo "Autobuilder: Fetching source for $AB_PACKAGE"
   . $AB_HOME/fetch-program
 fi
 
 AB_FULLNAME=$(find -mindepth 1 -maxdepth 1 -type d | grep -v unpack | grep -v package | cut --bytes 3-)

 # Run any preprocess script to unpack it in any special way
 if [ -e $AB_HOME/$AB_PACKAGEDIR/preprocess ] ; then
   cd $AB_FULLNAME
   echo "Autobuilder: Calling preprocess"
   . $AB_HOME/$AB_PACKAGEDIR/preprocess

 # Check to see if it's tarred up inside
 elif [ -d "$AB_FULLNAME/upstream" ] ; then

   mkdir unpack
   cd unpack

   for tarball in $(find ../$AB_FULLNAME/upstream/ | grep gz) ; do
     tar xfz $tarball
   done

   cp -a */* ../$AB_FULLNAME

   cd ../$AB_FULLNAME
   rm -rf ../unpack

   AB_PATCHES=

   if [ -d upstream/patches ] ; then
     AB_PATCHES=$(find upstream/patches/ | grep "\.patch$" | sort -n || true)
   fi

   # Apply any Debian/Upstream patches
   for AB_PATCH in $AB_PATCHES ; do
    echo "Autobuilder: Upstream patch: $AB_PATCH"
    patch -p1 -l < "$AB_PATCH" || true
   done
 else
   cd $AB_FULLNAME
 fi

 # FIXME: needed for the TIFF project, is it a more general problem ?
 # Workaround when *.gz file is the contents of the package.orig.tar.gz file.
 ( cd .. && find $AB_FULLNAME -maxdepth 1 -name '*.gz' -exec tar -xzf '{}' \; )

 S=$PWD
 echo "Autobuilder: source directory is $S"

 # Apply any Debian patches
 if [ -d debian/patches ] ; then
   if [ -e debian/patches/series ] ; then
     patches=$(cat debian/patches/series)
   else
     patches=$(cd debian/patches; find -type f | sort -n || true)
   fi

   for AB_PATCH in $patches; do
     echo "Autobuilder: Debian patch: $AB_PATCH"
     AB_PATCH=debian/patches/$AB_PATCH
     # Not all patches are at the same level. Do some heuristic (see simple-patchsys.mk).
     AB_PATCH_SUCCESS=""
     for AB_PATCH_LEVEL in 0 1 2 ; do
       if [ -z "$AB_PATCH_SUCCESS" ] ; then
         echo "  ...trying level $AB_PATCH_LEVEL"
         if cat $AB_PATCH | patch -E --dry-run -p$AB_PATCH_LEVEL -l 1> /dev/null 2>&1 ; then
           # Patching at this level seems to work out.  Do it now for real:
           cat $AB_PATCH | patch -E -p$AB_PATCH_LEVEL -l
           AB_PATCH_SUCCESS="yes"
         fi
       fi
     done
     if [ -z "$AB_PATCH_SUCCESS" ] ; then
       echo "  ...FAILED"
     else
       echo "  ...success !"
     fi
   done
 fi  
 
 # Apply any RISC OS patches
 patches=$(find $AB_HOME/$AB_PACKAGEDIR/ | grep "\.p\$" || true)
 if [ "$AB_ELFBUILD" == "yes" ] ; then
   patches="$patches $(find $AB_HOME/$AB_PACKAGEDIR/ | grep \.p.elf\$ || true)"
 else
   patches="$patches $(find $AB_HOME/$AB_PACKAGEDIR/ | grep \.p.aof\$ || true)"
 fi

 for AB_PATCH in $patches ; do
   echo "Autobuilder: RISC OS patch: $AB_PATCH"
   patch -p0 -l < $AB_PATCH || [ "$AB_DEBUG" == "yes" ]
 done

 # Set default for source copy based on the premise
 # that most open source programs have a COPYING file
 if [ -z "$AB_COPYSOURCE" ] ; then
  if [ -e COPYING ]; then
    AB_COPYSOURCE=yes
  fi
 fi
 
 # Try to guess the version number.  This isn't reliable, and might need to be
 # explictly set by the package
 if [ -z "$AB_PVERSION" ] ; then
   AB_PVERSION=$(echo $AB_FULLNAME | sed -e s#$AB_PACKAGE-## -e "s/[^-]*-//")
 fi

 if [ -z "$AB_PVERSION" ] ; then
   AB_PVERSION=1
 fi 

 if [ "$AB_TRY" != yes ] ; then
   echo "Autobuilder: Calling setvars"
   . $AB_HOME/$AB_PACKAGEDIR/setvars
 fi

 if [ -z "$AB_ZIPNAME" ] ; then
   AB_ZIPNAME=$AB_PACKAGE
 fi

 AB_PACKAGENAME=${AB_ZIPNAME}_${AB_PVERSION}${AB_TARGET}-${AB_ROVERSION}
 AB_ZIP=${AB_DIR}/$AB_PACKAGENAME.zip
 
 export AB_DIR

 if [ -e Imakefile ] ; then
   echo "Autobuilder: Calling xmkmf"
   $GCCSDK_INSTALL_ENV/ro-path $GCCSDK_INSTALL_ENV/bin/xmkmf -a
 elif [ -e configure ] || [ ! -z "$RO_CPATH" -a -e $RO_CPATH/configure ] ; then
   if [ "$AB_PRECONF" != ":" ] ; then
     echo "Autobuilder: Calling configure command: $AB_PRECONF $AB_CONFIG $AB_CONFLAGS"
   fi
   eval $AB_PRECONF $AB_CONFIG $AB_CONFLAGS
 elif [ -e Makefile ] || [ -e makefile ] ; then
   :
 elif [ "$AB_MAKE" == "$GCCSDK_INSTALL_ENV/ro-make" ] ; then
   echo "Autobuilder: No known build method"
   exit 1
 fi
 
 if [ -e $AB_HOME/$AB_PACKAGEDIR/post-configure ] ; then
   echo "Autobuilder: Calling post-configure"
   . $AB_HOME/$AB_PACKAGEDIR/post-configure
 fi

 S=$PWD

 echo "Autobuilder: Running make command: $AB_MAKE"
 ab_make

 # Ensure links in man pages work when creating HTML with rman 
 if ! [ -e $S/man3 ] ; then
   ln -s . $S/man3
 fi
 if [ -e $S/man ] && ! [ -e $S/man/man3 ] ; then
   ln -s . $S/man/man3
 fi

 if [ -e install-sh ] && ! [ -h install-sh ] ; then
   mv install-sh install.sh-old
   ln -s $GCCSDK_INSTALL_ENV/ro-install install-sh
 fi

 # Need to install in $GCCSDK_INSTALL_ENV ?
 if [ "$AB_INSTALL" == "env" ] || [ "$AB_INSTALL" == "yes" ] ; then
   echo "Autobuilder: Running make install"
   # Append GCCSDK_INSTALL_ENV to PATH so that cp/rm/ln are picked up there.
   eval "$AB_MAKE $AB_INSTALLTARGET"
 fi

 # Need to package the installed files ?
 if [ "$AB_INSTALL" == "yes" ] ; then
   export AB_OUTPUTLIB
   export AB_INSTALLDOCS

   export RO_PKG=$AB_PACKAGENAME
   $AB_HOME/ro-libpack
 fi
fi # Package only


export AB_MAINTAINER
export AB_LICENCE

# Custom package routine ?
rm -rf $D
mkdir -p $D

# export variable required by add-riscpkg
export AB_PVERSION
export AB_ROVERSION
export AB_CATEGORY

if [ "$AB_MANPAGE" != "" ] ; then
  for AB_PAGE in $AB_MANPAGE ; do
    rman -f HTML $S/$AB_PAGE > $D/$(basename $AB_PAGE),faf
    #addzip -j $AB_ZIP $S/$AB_PAGE,faf
   done
 fi

 ab_package

if [ "$AB_NOPACKAGE" == "" ] ; then

 if [ "$AB_CATEGORY" == "" ] ; then
   echo "Autobuilder: No category specified, not packaging"
   exit 1
 fi

 echo "Autobuilder: Packaging files"
 if [ "$AB_PACKONLY" == "yes" ] ; then

   if [ -n "$AB_ZIPNAME" ] ; then
     echo "Autobuilder: Packaging as $AB_ZIPNAME$AB_TARGET"
     AB_ZIP=$AB_ZIPNAME$AB_TARGET.zip
   else
     AB_ZIP=$AB_PACKAGE$AB_TARGET.zip
   fi

 else
   echo "Autobuilder: Packaging as $AB_ZIPNAME"
 fi

 cd $D
 if [ "$AB_ELFBUILD" == "yes" ] ; then
   # strip and convert binaries
   binaries=$(find -type f -wholename "*,e1f")
   for binary in $binaries; do
     $GCCSDK_INSTALL_ENV/ro-path arm-unknown-riscos-strip $binary || true
     $GCCSDK_INSTALL_ENV/ro-path elf2aif $binary $(sed "s#,e1f\$#,ff8#" <<<$binary)
     rm $binary
   done
 fi

 if [ -z "$AB_PACKAGES" ] ; then
   # Single package

   # Remove an existing ZIP file (otherwise the old contents will be merged with the new one)
   if [ -e $AB_ZIP ] ; then
     rm $AB_ZIP
   fi

   if [ -e $H/ReadMe ] ; then
     cp $H/ReadMe $D/ReadMe

     if [ "$AB_README" != "ReadMe" ] ; then
       mv $AB_DIR/ReadMe $AB_README
     fi
   fi

   # This will not add files beginning with a dot
   addzip -r $AB_ZIP *

   mkdir -p  $AB_OUTPUTPACK/$AB_CATEGORY
   mv $AB_ZIP $AB_OUTPUTPACK/$AB_CATEGORY
   ls -l  $AB_OUTPUTPACK/$AB_CATEGORY/$(basename $AB_ZIP)

 else
   # Multiple packages (AB_PACKAGES defined)
   for package in $AB_PACKAGES ; do
     if [ -d "$package" ] ; then
       if [ -e "$package/RiscPkg/Control,fff" ] ; then
         section=`grep "Section: " $package/RiscPkg/Control,fff | cut -d ' ' -f 2`
       fi
       if [ -z "$section" ] ; then
         section="$AB_CATEGORY"
       fi
       AB_PZIP=${AB_DIR}/${package}_${AB_PVERSION}${AB_TARGET}-${AB_ROVERSION}.zip
       # Remove an existing ZIP file (otherwise the old contents will be merged with the new one)
       if [ -e $AB_PZIP ] ; then
         rm $AB_PZIP
       fi
       cd $package
       addzip -r $AB_PZIP *
       mkdir -p $AB_OUTPUTPACK/$section
       mv $AB_PZIP $AB_OUTPUTPACK/$section
       ls -l  $AB_OUTPUTPACK/$section/$(basename $AB_PZIP)
       cd ..
     else
       echo "Autobuilder: package directory missing $package"
     fi
   done
 fi

 # Package source if required
 if [ "$AB_COPYSOURCE" == "yes" ] && [ "$AB_DEBUG" != "yes" ] ; then
   echo "Autobuilder: Packaging source"
   ab_package_source
   if [ -z $AB_SRCRDIR ] && [ -d $AB_SRCDIR ] ; then
     AB_SRCZIP=$(echo "$AB_ZIP" | sed s#".zip"#"-src.zip"#)
     if [ -e $AB_SRCZIP ] ; then
       rm $AB_SRCZIP
     fi

     cd $AB_SRCDIR
     $GCCSDK_INSTALL_CROSSBIN/zip -r $AB_SRCZIP * -x "*/CVS/*" -x "*/\.svn/*"
     mv $AB_SRCZIP $AB_OUTPUTPACK/$AB_CATEGORY
     cd $D
   else
     echo "Autobuilder: Warning! Source directory for source package missing '$AB_SRCDIR'"
   fi
 fi
fi

cd $AB_DIR/..
[ "$AB_PACKONLY" == "yes" ] || [ "$AB_NOFETCH" == "yes" ] || [ "$AB_DEBUG" == "yes" ] || rm -rf $AB_DIR

# Note that the following echo is a cookie for 'build' script to acknowledge a successful build.
echo "Autobuilder: Package stage completed"
