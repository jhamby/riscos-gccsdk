#!/bin/bash

if [ "$AB_PACKONLY" != "yes" ] ; then
  echo "Autobuilder: Building package: $AB_PACKAGE"
else
  echo "Autobuilder: Zipping package: $AB_PACKAGE"
fi

set -e

# Reset vars for each package

AB_MANPAGE=
AB_ROVERSION=1
AB_PRECONF=
AB_COMPILEFAIL=no
AB_INSTALL=no
AB_CATEGORY=
AB_ZIPNAME=
AB_README=ReadMe

export TLINK_CX11=

H=$AB_HOME/$AB_PACKAGEDIR


addzip() {
 result=$($GCCSDK_INSTALL_CROSSBIN/zip -, $@ -x "*/CVS/*" -x "*/\.svn/*" 2>&1)
 echo $result
 if echo $result | grep "zip warning" > /dev/null ; then
   exit 1
 fi
}

ab_package() {
  echo "Autobuilder: Not Packaging"
  AB_NOPACKAGE=yes
}

ab_make() {
  eval $AB_MAKE
  return
}


AB_CONFIG=$GCCSDK_INSTALL_ENV/ro-config
export AB_MAKE=$GCCSDK_INSTALL_ENV/ro-make

if [ "$AB_PACKONLY" == "yes" ] ; then

 AB_DIR=.
 D=$AB_DIR/package
 S=$PWD

 if [ -e $AB_HOME/$AB_PACKAGEDIR/preprocess ] ; then
  echo "Autobuilder: Calling preprocess"
  . $AB_HOME/$AB_PACKAGEDIR/preprocess
 fi
 
 echo "Autobuilder: Calling setvars"
 . $AB_HOME/$AB_PACKAGEDIR/setvars

else
 
 # Build directory
 if [ "$AB_NOFETCH" == "yes" ] ; then
   AB_DIR=$AB_TMPDIR
 else
   AB_DIR=$AB_TMPDIR/$AB_PACKAGE
 fi

 D=$AB_DIR/package

 # Remove old dir and create new one
 [ "$AB_DEBUG" == "yes" ] || [ "$AB_NOFETCH" == "yes" ] || rm -rf $AB_DIR
 [ "$AB_NOFETCH" == "yes" ] || mkdir -p $AB_DIR
 cd $AB_DIR

 if [ -e $AB_HOME/$AB_PACKAGEDIR/alias ] ; then
  AB_ZIPNAME=$AB_PACKAGE
  echo "Autobuilder: Calling alias"
  . $AB_HOME/$AB_PACKAGEDIR/alias
 fi

 if [ "$AB_NOFETCH" != "yes" ] ; then
   # Fetch the source
   echo "Autobuilder: Fetching source for $AB_PACKAGE"
   . $AB_HOME/fetch-program
 fi
 
 AB_FULLNAME=$(find -mindepth 1 -maxdepth 1 -type d | grep -v unpack | grep -v package | cut --bytes 3-)

 # Run any preprocess script to unpack it in any special way
 if [ -e $AB_HOME/$AB_PACKAGEDIR/preprocess ] ; then
   cd $AB_FULLNAME
   echo "Autobuilder: Calling preprocess"
   . $AB_HOME/$AB_PACKAGEDIR/preprocess
  
 # Check to see if it's tarred up inside
 elif [ -d "$AB_FULLNAME/upstream" ] ; then
 
   mkdir unpack
   cd unpack
 
   for tarball in $(find ../$AB_FULLNAME/upstream/ | grep gz) ; do
     tar xfz $tarball
   done
 
   cp -a */* ../$AB_FULLNAME
 
   cd ../$AB_FULLNAME
   rm -rf ../unpack
 
   AB_PATCHES=
 
   if [ -d upstream/patches ] ; then
     AB_PATCHES=$(find upstream/patches/ | grep "\.patch$" || true)
   fi
 
   # Apply any Debian/Upstream patches
   for AB_PATCH in $AB_PATCHES ; do
    echo "Autobuilder: Upstream patch: $AB_PATCH"
    patch -p1 -l < "$AB_PATCH" || true
   done
 else
   cd $AB_FULLNAME
 fi

 # FIXME: needed for the TIFF project, is it a more general problem ?
 # Workaround when *.gz file is the contents of the package.orig.tar.gz file.
 ( cd .. && find $AB_FULLNAME -maxdepth 1 -name '*.gz' -exec tar -xzf '{}' \; )

 S=$PWD
 echo "Autobuilder: source directory is $S"
 
 # Get the version number
 AB_PVERSION=$(echo $AB_FULLNAME | sed s/$AB_PACKAGE-//)
 
 # Apply any Debian patches
 if [ -d debian/patches ] ; then
   for AB_PATCH in $(find debian/patches/ -type f || true) ; do
     echo "Autobuilder: Debian patch: $AB_PATCH"
     # Not all patches are at the same level. Do some heuristic (see simple-patchsys.mk).
     AB_PATCH_SUCCESS=""
     for AB_PATCH_LEVEL in 0 1 2 ; do
       if [ -z "$AB_PATCH_SUCCESS" ] ; then
         echo "  ...trying level $AB_PATCH_LEVEL"
         if cat $AB_PATCH | patch -E --dry-run -p$AB_PATCH_LEVEL -l 1> /dev/null 2>&1 ; then
           # Patching at this level seems to work out.  Do it now for real:
           cat $AB_PATCH | patch -E -p$AB_PATCH_LEVEL -l
           AB_PATCH_SUCCESS="yes"
         fi
       fi
     done
     if [ -z "$AB_PATCH_SUCCESS" ] ; then
       echo "  ...FAILED"
     else
       echo "  ...success !"
     fi
   done
 fi  
 
 # Apply any RISC OS patches
 for AB_PATCH in $(find $AB_HOME/$AB_PACKAGEDIR/ | grep "\.p$") ; do
   echo "Autobuilder: RISC OS patch: $AB_PATCH"
   patch -p0 -l < $AB_PATCH || [ "$AB_DEBUG" == "yes" ]
 done
 
 echo "Autobuilder: Calling setvars"
 . $AB_HOME/$AB_PACKAGEDIR/setvars
 
 if [ -z "$AB_INSTALLTARGET" ] ; then
   AB_INSTALLTARGET=install
 fi
 
 export AB_INSTALLTARGET
 export AB_DIR
 
 if [ -e Imakefile ] ; then
   echo "Autobuilder: Calling xmkmf"
   $GCCSDK_INSTALL_ENV/ro-path $GCCSDK_INSTALL_ENV/X11R6/bin/xmkmf -a
 elif [ -e configure ] || [ ! -z "$RO_CPATH" -a -e $RO_CPATH/configure ] ; then
   if [ "$AB_PRECONF" != ":" ] ; then
     echo "Autobuilder: Calling configure command: $AB_PRECONF $AB_CONFIG $AB_CONFLAGS"
   fi
   eval $AB_PRECONF $AB_CONFIG $AB_CONFLAGS
 elif [ -e Makefile ] || [ -e makefile ] ; then
   :
 elif [ "$AB_MAKE" == "$GCCSDK_INSTALL_ENV/ro-make" ] ; then
   echo "Autobuilder: No known build method"
   exit 1
 fi
 
 if [ -e $AB_HOME/$AB_PACKAGEDIR/post-configure ] ; then
   echo "Autobuilder: Calling post-configure"
   . $AB_HOME/$AB_PACKAGEDIR/post-configure
 fi

 S=$PWD
 
 echo "Autobuilder: Running make command: $AB_MAKE"
 
 if ab_make || [ "$AB_COMPILEFAIL" == "yes" ] ; then
   :
 else
   exit 1
 fi
 
 # Need to install in $GCCSDK_INSTALL_ENV ?
 if [ "$AB_INSTALL" == "env" ] || [ "$AB_INSTALL" == "yes" ] ; then
   echo "Autobuilder: Running make install"
   # Append GCCSDK_INSTALL_ENV to PATH so that cp/rm/ln are picked up there.
   if [ "$AB_COMPILEFAIL" != "yes" ] ; then
     PATH=$GCCSDK_INSTALL_ENV:$PATH eval "$AB_MAKE $AB_INSTALLTARGET"
   else
     PATH=$GCCSDK_INSTALL_ENV:$PATH eval "$AB_MAKE $AB_INSTALLTARGET" || true
   fi
 fi

 # Need to package the installed files ?
 if [ "$AB_INSTALL" == "yes" ] ; then
   export AB_OUTPUTLIB
   if [ "$AB_ZIPNAME" != "" ] ; then

     export RO_PKG=$(echo $AB_FULLNAME | sed s#"$AB_PACKAGE"#"$AB_ZIPNAME"#)
     if [ "$RO_PKG" == "$AB_FULLNAME" ] ; then
       export RO_PKG=$AB_ZIPNAME
     fi

     $GCCSDK_INSTALL_ENV/ro-libpack
   else
     RO_PKG=$AB_FULLNAME $GCCSDK_INSTALL_ENV/ro-libpack
   fi
 fi
 

fi # Package only


# Custom package routine ?
rm -rf $D
mkdir -p $D

ab_package

if [ "$AB_NOPACKAGE" == "" ] ; then

 if [ "$AB_CATEGORY" == "" ] ; then
   echo "Autobuilder: No category specified, not packaging"
   exit 1
 fi
 
 echo "Autobuilder: Packaging files"
 if [ "$AB_PACKONLY" == "yes" ] ; then
 
   if [ "$AB_ZIPNAME" != "" ] ; then
     echo "Autobuilder: Packaging as $AB_ZIPNAME"
     AB_ZIP=$AB_ZIPNAME.zip
   else
     AB_ZIP=$AB_PACKAGE.zip
   fi

 else
   if [ "$AB_ZIPNAME" != "" ] ; then
     echo "Autobuilder: Packaging as $AB_ZIPNAME"
     AB_ZIPNAME=$(echo $AB_FULLNAME | sed s#"$AB_PACKAGE"#"$AB_ZIPNAME"#)
 
     AB_ZIP=$AB_DIR/$AB_ZIPNAME-$AB_ROVERSION.zip
   else  
     AB_ZIP=$AB_DIR/$AB_FULLNAME-$AB_ROVERSION.zip
   fi
 fi
 
 cd $D

 # Remove an existing ZIP file (otherwise the old contents will be merged with the new one)
 if [ -e $AB_ZIP ] ; then
   rm $AB_ZIP
 fi
 
 if [ "$AB_MANPAGE" != "" ] ; then
   for AB_PAGE in $AB_MANPAGE ; do
     rman -f HTML $S/$AB_PAGE > $S/$AB_PAGE,faf
     addzip -j $AB_ZIP $S/$AB_PAGE,faf
   done
 fi
 
 if [ -e $H/ReadMe ] ; then
   AB_UNDER=$(echo $AB_PACKAGE | tr [:alnum:] =)
 
   sed "s/PACKAGE/$AB_PACKAGE/; s/XXXXXXX/$AB_UNDER/; s/VERSION/$AB_PVERSION/; s/RELEASE/$AB_ROVERSION/" \
     < $AB_HOME/header \
     > $D/ReadMe
 
   cat $H/ReadMe >> $D/ReadMe
 
  if [ "$AB_README" != "ReadMe" ] ; then
    mv $AB_DIR/ReadMe $AB_README
  else
    :
  fi

 fi

 # FIXME? this will not add files beginning with a dot.  Intended behaviour ?
 addzip -r $AB_ZIP *

 mkdir -p  $AB_OUTPUTPACK/$AB_CATEGORY
 mv $AB_ZIP $AB_OUTPUTPACK/$AB_CATEGORY
fi

cd $AB_DIR/..
[ "$AB_PACKONLY" == "yes" ] || [ "$AB_NOFETCH" == "yes" ] || [ "$AB_DEBUG" == "yes" ] || rm -rf $AB_DIR

# Note that the following echo is a cookie for 'build' script to acknowledge a successful build.
echo "Autobuilder: Package stage completed"
