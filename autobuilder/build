#!/bin/bash

AB_PACKAGES=""
AB_DEBUG=no           # Leave source
AB_PACKONLY=no        # Zip only from current directory
AB_NOFETCH=no         # Using existing source fetched from last time
AB_VERBOSE=no         # Echo output
AB_DEPS=yes           # Build dependencies first

for param in $@ ; do
  case "$param" in
    -d)
      AB_DEBUG=yes
      ;;
    -p)
      AB_PACKONLY=yes
      ;;
    -f)
       AB_NOFETCH=yes
       ;;
    -v)
       AB_VERBOSE=yes
       ;;
    -n)
       AB_DEPS=no
       ;;
    -*)
       echo "Autobuilder: unknown option $param"
       exit 1
       ;;
    *)
       AB_PACKAGES="$AB_PACKAGES $param"
       ;;
  esac
done

export AB_PACKONLY
export AB_DEBUG
export AB_NOFETCH
set -a

# Autobuilder home
pushd `dirname $0` > /dev/null
AB_HOME=`pwd`
popd > /dev/null

AB_OUTPUT=/var/www/info/unix/downloads/

# GCCSDK Scripts
if [ -z "$RO_ENV" ] ; then
  RO_ENV=/home/riscos/env
fi
AB_GCCENV=$RO_ENV
if [ ! -d "$AB_GCCENV" ] ; then
  echo "Autobuilder: directory with porting tools does not exist. \$RO_ENV not defined or /home/riscos/env does not exist."
  exit 1
fi

# GCCSDK Binaries
if [ -z "$RO_BIN" ] ; then
  RO_BIN=/home/riscos/cross/bin
fi
AB_GCCBIN=$RO_BIN
if [ ! -d "$AB_GCCBIN" ] ; then
  echo "Autobuilder: directory with cross compiling tools does not exist. \$RO_BIN not defined or /home/riscos/cross/bin does not exist."
  exit 1
fi

# build location
AB_TMPDIR=$PWD


# Change to autobuilder home
if [ "$AB_PACKONLY" != "yes" ] ; then
 cd $AB_HOME
fi

# If a specific package is named, build that; otherwise everything
if [ "$AB_PACKAGES" == "" ] ; then
  AB_PACKAGES=$(find -type d)
  if [ "$AB_PACKAGES" == "" ] ; then
    echo "Autobuilder: nothing to build ?"
    exit 1
  fi
fi

#rm -f /tmp/ab-success
#rm -f /tmp/ab-failure

if [ "$AB_VERBOSE" == "yes" ] ; then
  AB_STDOUT=/dev/stdout
else
  AB_STDOUT=/dev/null
fi

ab_build() {

  local PACKAGE_NAME=$1
  local IS_DEPENDENCY=$2

  # Because the dependency info only contains the package name, and not the
  # directory, we need to search for the directory containing this package.
  local PACKAGE_DIR=`(cd $AB_HOME ; echo */$PACKAGE_NAME/setvars)`
  if [ ! -e "$AB_HOME/$PACKAGE_DIR" ] ; then
    PACKAGE_DIR=`(cd $AB_HOME ; echo */*/$PACKAGE_NAME/setvars)`
  fi
  PACKAGE_DIR=`dirname $PACKAGE_DIR`

  if [ ! -d $AB_HOME/$PACKAGE_DIR ] ; then

    echo "Autobuilder: No directory found for package \"$PACKAGE_NAME\" - ignoring" 1>&2
    return 0
  fi

  if [ ! -e $AB_HOME/$PACKAGE_DIR/setvars ] ; then

    echo "Autobuilder: No setvars found for package \"$PACKAGE_NAME\" - ignoring" 1>&2
    return 0
  fi

  if [ "$IS_DEPENDENCY" == "1" ] ; then
    if [ -e "$AB_HOME/$PACKAGE_DIR/last-success" ] ; then
      echo "Autobuilder - Dependency $PACKAGE_NAME satisfied"
      return 0
    fi
  fi

  if [ "$AB_DEPS" == "yes" ] ; then

    local DEPENDENCIES
    local DEP

    if [ "`which apt-cache`" != "" ] ; then
      DEPENDENCIES=`apt-cache depends $PACKAGE_NAME | grep Depends: | sed 's/^.*Depends: //'`
    fi

    if [ -e "$AB_HOME/$PACKAGE_DIR/depends" ] ; then
      DEPENDENCIES=`echo $DEPENDENCIES | cat $AB_HOME/$PACKAGE_DIR/depends`
    fi


    for DEP in $DEPENDENCIES ; do
      if ! ab_build $DEP 1 ; then
        return 1
      fi
    done
  fi


  # If we get here then all dependencies for this package should be satisfied.
  AB_PACKAGE=$PACKAGE_NAME
  AB_PACKAGEDIR=$PACKAGE_DIR


  $AB_HOME/build-program 2>&1 | tee /tmp/ab-output >$AB_STDOUT
  #echo  foo  > /tmp/ab-output

  if ! grep "Autobuilder - package completed" < /tmp/ab-output >/dev/null ; then
    echo "Package $AB_PACKAGE: ***Failure***"
    #cat /tmp/ab-output >> /tmp/ab-failure
    mv /tmp/ab-output $AB_HOME/$AB_PACKAGEDIR/last-failure
    return 1
  else
    echo "Package $AB_PACKAGE: Success"
    #cat /tmp/ab-output >> /tmp/ab-success

    if ! grep "Autobuilder - Running make install" > /dev/null < /tmp/ab-output   && \
         grep "Autobuilder: No files specified to package" > /dev/null < /tmp/ab-output ; then
      echo "Warning: not installed, and not packaged"
    fi

    mv /tmp/ab-output $AB_HOME/$AB_PACKAGEDIR/last-success
    rm -f $AB_HOME/$AB_PACKAGEDIR/last-failure
  fi
  echo


  return 0
}

for PACKAGEDIR in $AB_PACKAGES ; do
 PACKAGE=$(echo "$PACKAGEDIR" | sed -e "s#/\$##" -e "s#/#\n#g" | tail -1)

 ab_build $PACKAGE 0

done
