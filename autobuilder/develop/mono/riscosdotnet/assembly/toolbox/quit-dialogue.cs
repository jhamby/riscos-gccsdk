//
// toolbox/quit-dialogue.cs - a binding of the RISC OS API to C#.
//
// Author: Lee Noar (leenoar@sky.com)
//
 
using System;
using System.Runtime.InteropServices;

namespace riscos
{
	public static partial class Toolbox
	{
		/*! \brief Encapsulates a Toolbox Quit Dialogue Box.  */
		public class QuitDialogue : Object
		{
			static class Method
			{
				public const int GetWindowID = 0;
				public const int SetMessage = 1;
				public const int GetMessage = 2;
				public const int SetTitle = 3;
				public const int GetTitle = 4;
			}

			/*! \brief Default Toolbox events that can be generated by the %Toolbox Quit Dialogue object.  */
			public static class EventCode
			{
				public const int AboutToBeShown = 0x82a90;
				public const int QuitQuit = 0x82a91;
				public const int DialogueCompleted = 0x82a92;
				public const int QuitCancel = 0x82a93;
			}

			/*! \brief The event handlers that will be called just before this %QuitDialogue is shown.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, AboutToBeShownEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * QuitDialogueObject.AboutToBeShown += handler_name;
			 * \endcode  */
			public event AboutToBeShownEventHandler AboutToBeShown;

			/*! \brief The signature of a DialogueComplete event handler.  */
			public delegate void DialogueCompleteEventHandler (object sender, ToolboxEventArgs e);

			/*! \brief The event handlers that will be called when this dialogue is hidden.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * QuitDialogueObject.DialogueComplete += handler_name;
			 * \endcode  */
			public event ToolboxEventHandler DialogueComplete;

			/*! \brief The signature of a Quit event handler.  */
			public delegate void QuitEventHandler (object sender, ToolboxEventArgs e);

			/*! \brief The event handlers that will be called when a Quit event is raised.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * QuitDialogueObject.Quit += handler_name;
			 * \endcode  */
			public event ToolboxEventHandler Quit;

			/*! \brief The signature of a Cancel event handler.  */
			public delegate void CancelEventHandler (object sender, ToolboxEventArgs e);

			/*! \brief The event handlers that will be called when a Cancel event is raised.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * QuitDialogueObject.Cancel += handler_name;
			 * \endcode  */
			public event ToolboxEventHandler Cancel;

			/*! \brief Create a %Toolbox Quit Dialogue from the named template in the
			 * Resource file.
			 * \param[in] resName The name of the Quit Dialogue template to use.  */
			public QuitDialogue (string resName) : base (resName)
			{
			}

			/*! \brief Create a %Toolbox Quit Dialogue from the template data given.
			 * \param[in] templateData Pointer to the window template.  */
			public QuitDialogue (IntPtr templateData)
			{
				Create (templateData);
			}

			/*! \brief Create a %Toolbox Quit Dialogue from an object that already exists.
			 * \param [in] objectID The Toolbox ID of the existing object.  */
			public QuitDialogue (uint objectID) : base (objectID)
			{
			}

			/*! \brief Get the ID of the underlying Window object.  */
			public uint WindowID
			{
				get { return MiscOp_GetR0 (0, Method.GetWindowID); }
			}

			/*! \brief Gets or sets the message used in the Quit Dialogue's Window.  */
			public string Message
			{
				set { SetText (0, Method.SetMessage, value); }
				get { return GetText (Method.GetMessage); }
			}

			/*! \brief Gets or sets the text which is to be used in the title bar
			 * of this Quit Dialogue's Window.  */
			public string Title
			{
				set { SetText (0, Method.SetTitle, value); }
				get { return GetText (Method.GetTitle); }
			}

			/*! \brief Check if the given event is relevant to the Quit Dialogue and call the
			 * associated event handlers.  */
			public override void Dispatch (ToolboxEvent ev)
			{
				switch (ev.ToolboxArgs.Header.EventCode)
				{
				case EventCode.AboutToBeShown:
					if (AboutToBeShown != null)
						AboutToBeShown (this, new AboutToBeShownEventArgs (ev.ToolboxArgs.RawEventData));
					break;
				case EventCode.DialogueCompleted:
					if (DialogueComplete != null)
						DialogueComplete (this, ev.ToolboxArgs);
					break;
				case EventCode.QuitQuit:
					if (Quit != null)
						Quit (this, ev.ToolboxArgs);
					break;
				case EventCode.QuitCancel:
					if (Cancel != null)
						Cancel (this, ev.ToolboxArgs);
					break;
				}
			}
		}
	}
}
