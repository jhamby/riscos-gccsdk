//
// toolbox/proginfo-dialogue.cs - a binding of the RISC OS API to C#.
//
// Author: Lee Noar (leenoar@sky.com)
//
 
using System;
using System.Runtime.InteropServices;

namespace riscos
{
	public static partial class Toolbox
	{
		/*! \brief Encapsulates a Toolbox %ProgInfo Dialogue Box.  */
		public class ProgInfoDialogue : Object
		{
			static class Method
			{
				public const int GetWindowID = 0;
				public const int SetVersion = 1;
				public const int GetVersion = 2;
				public const int SetLicenceType = 3;
				public const int GetLicenceType = 4;
				public const int SetTitle = 5;
				public const int GetTitle = 6;
			}

			/*! \brief The possible licence types that the Licence property may be assigned.  */
			public enum LicenceType
			{
				PublicDomain,
				SingleUser,
				SingleMachine,
				Site,
				Network,
				Authority
			}

			/*! \brief Default Toolbox events that can be generated by the %Toolbox %ProgInfo object.  */
			public static class EventCode
			{
				public const int AboutToBeShown = 0x82b40;
				public const int DialogueCompleted = 0x82b41;
			}

			/*! \brief Create a %Toolbox %ProgInfo Dialogue from the named template in the
			 * Resource file.
			 * \param[in] resName The name of the %ProgInfo template to use.  */
			public ProgInfoDialogue (string resName) : base (resName)
			{
			}

			/*! \brief Create a %Toolbox %ProgInfo from the template data given.
			 * \param[in] templateData Pointer to the window template.  */
			public ProgInfoDialogue (IntPtr templateData)
			{
				Create (templateData);
			}

			/*! \brief Create a %Toolbox %ProgInfo from an object that already exists.
			 * \param [in] objectID The Toolbox ID of the existing object.  */
			public ProgInfoDialogue (uint objectID) : base (objectID)
			{
			}

			/*! \brief Get the ID of the underlying Window object.  */
			public uint WindowID
			{
				get { return GetWindowID (); }
			}

			/*! \brief Gets or sets the version string used in the %ProgInfo Dialogue's Window.  */
			public string Version
			{
				set { SetVersion (value); }
				get { return GetVersion (); }
			}

			/*! \brief Gets or sets the text which is to be used in the title bar
			 * of this %ProgInfo dialogue.  */
			public string Title
			{
				set { SetTitle (value); }
				get { return GetTitle (); }
			}

			/*! \brief Gets or sets the licence type used in this %ProgInfo Dialogue's Window.  */
			public LicenceType Licence
			{
				set { SetLicence (value); }
				get { return GetLicence (); }
			}

			/*! \brief Return the ID of the underlying Window object used to implement this
			 * %ProgInfo Dialogue.
			 * \return The ID of the Window Object.
			 * \note The \e WindowID property can be used for the same purpose.  */
			public uint GetWindowID ()
			{
				return MiscOp_GetR0 (0, Method.GetWindowID);
			}

			/*! \brief Set the version string used in the %ProgInfo Dialogue's Window.
			 * \note The \e Version property can be used for the same purpose.  */
			public void SetVersion (string text)
			{
				SetText (0, Method.SetVersion, text);
			}

			/*! \brief Read the version string used in the %ProgInfo Dialogue's Window.
			 * \note The \e Version property can be used for the same purpose.  */
			public string GetVersion ()
			{
				return GetText (Method.GetVersion);
			}

			/*! \brief Set the text string used in the %ProgInfo Dialogue's title bar.
			 * \note The \e Title property can be used for the same purpose.  */
			public void SetTitle (string text)
			{
				SetText (0, Method.SetTitle, text);
			}

			/*! \brief Read the text string used in the %ProgInfo Dialogue's title bar.
			 * \note The \e Title property can be used for the same purpose.  */
			public string GetTitle ()
			{
				return GetText (Method.GetTitle);
			}

			/*! \brief Set the licence type used in the %ProgInfo Dialogue.
			 * \note The \e LicenceType property can be used for the same purpose.  */
			public void SetLicence (LicenceType type)
			{
				MiscOp_SetR3 (0, Method.SetLicenceType, (uint)type);
			}

			/*! \brief Return the licence type used in the %ProgInfo Dialogue.
			 * \note The \e LicenceType property can be used for the same purpose.  */
			public LicenceType GetLicence ()
			{
				return (LicenceType)MiscOp_GetR0 (0, Method.GetLicenceType);
			}

			/*! \brief Raising an event invokes the event handler through a delegate.
			 *
			 * The \b OnAboutToBeShown method also allows derived classes to handle the
			 * event without attaching a delegate. This is the preferred technique for
			 * handling the event in a derived class.
			 * \note  When overriding \b OnAboutToBeShown in a derived class, be sure to
			 * call the base class's \b OnAboutToBeShown method so that registered delegates
			 * receive the event.  */
			protected virtual void OnAboutToBeShown (AboutToBeShownEventArgs e)
			{
				if (AboutToBeShown != null)
					AboutToBeShown (this, e);
			}

			/*! \brief Raising an event invokes the event handler through a delegate.
			 *
			 * The \b OnDialogueCompleted method also allows derived classes to handle the
			 * event without attaching a delegate. This is the preferred technique for
			 * handling the event in a derived class.
			 * \note  When overriding \b OnDialogueCompleted in a derived class, be sure to
			 * call the base class's \b OnDialogueCompleted method so that registered delegates
			 * receive the event.  */
			protected virtual void OnDialogueCompleted (ToolboxEventArgs e)
			{
				if (DialogueCompleted != null)
					DialogueCompleted (this, e);
			}

			/*! \brief Check if the given event is relevant to the %ProgInfo dialogue and call the
			 * associated event handlers.  */
			public override void Dispatch (ToolboxEventArgs e)
			{
				switch (e.Header.EventCode)
				{
				case EventCode.AboutToBeShown:
					OnAboutToBeShown (new AboutToBeShownEventArgs (e.RawEventData));
					break;
				case EventCode.DialogueCompleted:
					OnDialogueCompleted (e);
					break;
				}
			}

			/*! \brief The event handlers that will be called just before this %ProgInfo is shown.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, Object.AboutToBeShownEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * ProgInfoObject.AboutToBeShown += handler_name;
			 * \endcode  */
			public event EventHandler<AboutToBeShownEventArgs> AboutToBeShown;

			/*! \brief The event handlers that will be called when this dialogue is hidden.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * ProgInfoObject.DialogueCompleted += handler_name;
			 * \endcode  */
			public event EventHandler<ToolboxEventArgs> DialogueCompleted;
		}
	}
}
