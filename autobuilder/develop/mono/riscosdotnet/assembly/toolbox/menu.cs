//
// toolbox/menu.cs - a binding of the RISC OS API to C#.
//
// Author: Lee Noar (leenoar@sky.com)
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace riscos
{
	public static partial class Toolbox
	{
		/*! \class MenuEntry
		 * \brief Encapsulates an item in a Menu.
		 *
		 * Stricty speaking, a Menu Entry is not a type of gadget. However, as
		 * a lot of the code is the same, Gadget is used as a base object to
		 * allow code reuse. Where a method does not make sense for a Menu Entry,
		 * it is overridden and will generate an exception if called.<br>
		 * These methods are:<br>
		 * \li Gadget.Type
		 * \li Gadget.BoundingBox
		 * \li Gadget.SetFocus */
		public class MenuEntry : Gadget
		{
			static class Method
			{
				public const int SetTick = 0;
				public const int GetTick = 1;
				public const int SetFade = 2;
				public const int GetFade = 3;
				public const int SetEntryText = 4;
				public const int GetEntryText = 5;
				public const int SetEntrySprite = 6;
				public const int GetEntrySprite = 7;
				public const int SetSubMenuShow = 8;
				public const int GetSubMenuShow = 9;
				public const int SetSubMenuEvent = 10;
				public const int GetSubMenuEvent = 11;
				public const int SetClickShow = 12;
				public const int GetClickShow = 13;
				public const int SetClickEvent = 14;
				public const int GetClickEvent = 15;
				public const int SetEntryHelpMessage = 18;
				public const int GetEntryHelpMessage = 19;
			}

			/*! \class EventCode
			 * \brief Toolbox events that can be generated by entries in a Toolbox Menu object.  */
			public static class EventCode
			{
				public const int SubMenu = 0x828c2;
				public const int Selection = 0x828c3;
			}

			/*! \brief An object that encapsulates the arguments for the event that is raised when 
			 * the user moves the pointer over a submenu arrow.  */
			public class SubMenuEventArgs : ToolboxEventArgs
			{
				/*! \brief Constants defining event specific data offsets after the header.  */
				public static class EventOffset
				{
					public const int SubMenuX = 16;
					public const int SubMenuY = 20;
				}

				/*! \brief The coordinate where the submenu will be shown.  */
				public OS.Coord Position;

				public SubMenuEventArgs (IntPtr unmanagedEventData) : base (unmanagedEventData)
				{
					int x = Marshal.ReadInt32 (RawEventData, EventOffset.SubMenuX);
					int y = Marshal.ReadInt32 (RawEventData, EventOffset.SubMenuY);
					Position = new OS.Coord (x, y);
				}
			}

			public MenuEntry (Menu menu, uint cmpID) : base (menu, cmpID)
			{
			}

			/*! \brief Gets or sets the tick state of this MenuEntry.  */
			public bool Ticked
			{
				get {
					return Object.MiscOp_SetR3GetR0 (0,
									 Method.GetTick,
									 ComponentID) != 0;
				}
				set {
					Object.MiscOp_SetR3R4 (0,
							       Method.SetTick,
							       ComponentID,
							       value ? 1U : 0U);
				}
			}

			/*! \brief Gets or sets the fade state of this MenuEntry.  */
			public override bool Faded
			{
				get {
					return Object.MiscOp_SetR3GetR0 (0,
									 Method.GetFade,
									 ComponentID) != 0;
				}
				set {
					Object.MiscOp_SetR3R4 (0,
							       Method.SetFade,
							       ComponentID,
							       value ? 1U : 0U);
				}
			}

			/*! \brief Gets or sets the text used in this MenuEntry.
			 * \exception ArgumentNullException Thrown if text set to null.
			 * \exception OS.ErrorException Thrown if the entry's text buffer is not large
			 * enough to hold the supplied text.
			 * \exception OS.ErrorException Thrown if the entry is sprite only.  */
			public string Text
			{
				get { return GetText (Method.GetEntryText); }
				set
				{
					if (value == null)
						throw new ArgumentNullException ("value", "Attempt to set Menu Entry text to null");
					SetText (Method.SetEntryText, value);
				}
			}

			/*! \brief Gets or sets the sprite which is to be used in this MenuEntry.
			 * \exception ArgumentNullException Thrown if sprite set to null.
			 * \exception OS.ErrorException Thrown if the entry's sprite name buffer is not large
			 * enough to hold the supplied sprite name.
			 * \exception OS.ErrorException Thrown if the entry is text only.  */
			public string Sprite
			{
				get { return GetText (Method.GetEntrySprite); }
				set
				{
					if (value == null)
						throw new ArgumentNullException ("value", "Attempt to set Menu Entry sprite to null");
					SetText (Method.SetEntrySprite, value);
				}
			}

			/*! \brief Gets or sets the Toolbox object that will be shown when the user
			 * moves the pointer over the submenu arrow.
			 * 
			 * If set to null, then no object will be shown.  */
			public Object SubMenuShow
			{
				get {
					uint show_id = Object.MiscOp_SetR3GetR0 (0,
										 Method.GetSubMenuShow,
										 ComponentID);
					if (show_id == 0)
						return null;

					return Object.LookupOrWrap (show_id);
				}
				set {
					Object.MiscOp_SetR3R4 (0,
							       Method.SetSubMenuShow,
							       ComponentID,
							       (value == null) ? 0 : value.ID);
				}
			}

			/*! \brief Gets or sets the Toolbox event that will be raised when the user
			 * moves the pointer over this entry's submenu arrow.
			 * 
			 * If set to null, then default Toolbox event, Menu_SubMenu will be raised.  */
			public uint SubMenuEvent
			{
				get {
					return Object.MiscOp_SetR3GetR0 (0,
									 Method.GetSubMenuEvent,
									 ComponentID);
				}
				set {
					Object.MiscOp_SetR3R4 (0,
							       Method.SetSubMenuEvent,
							       ComponentID,
							       value);
				}
			}

			/*! \brief Gets or sets the Toolbox object that will be shown when the user
			 * clicks on the MenuEntry.
			 * 
			 * If set to null, then no object will be shown.  */
			public Toolbox.ClickShow ClickShow
			{
				get { return GetClickShow (Method.GetClickShow); }
				set { SetClickShow (Method.SetClickShow, value); }
			}

			/*! \brief Gets or sets the Toolbox event that will be raised when the user
			 * clicks on the MenuEntry.
			 * 
			 * If set to 0, then default Toolbox event Menu_Selection will be raised.  */
			public uint ClickEvent
			{
				get {
					return Object.MiscOp_SetR3GetR0 (0,
									 Method.GetClickEvent,
									 ComponentID);
				}
				set {
					Object.MiscOp_SetR3R4 (0,
							       Method.SetClickEvent,
							       ComponentID,
							       value);
				}
			}

			/*! \brief Gets or set the help message which will be returned when a Help
			 * Request message is received for this MenuEntry.
			 * 
			 * If set to null, the Help Message for this MenuEntry is detached.  */
			public override string HelpMessage
			{
				override get { return GetText (Method.GetEntryHelpMessage); }
				override set { SetText (Method.SetEntryHelpMessage, value); }
			}

			// Methods that have no meaning for a MenuEntry.

			/*! \brief A MenuEntry does not have a gadget type.
			 * \warning An exception will be thrown if accessed via a MenuEntry.
			 * \exception InvalidOperationException Thrown if accessed via a MenuEntry object.  */
			public override uint Type
			{
				override get
				{
					throw new InvalidOperationException ("A Menu Entry does not have a gadget type");
				}
			}

			/*! \brief A MenuEntry does not have a bounding box.
			 * \warning An exception will be thrown if accessed via a MenuEntry.
			 * \exception InvalidOperationException Thrown if accessed via a MenuEntry object.  */
			public override OS.Rect BoundingBox
			{
				override get
				{
					throw new InvalidOperationException ("A Menu Entry does not have a bounding box");
				}
				override set
				{
					throw new InvalidOperationException ("You cannot set the bounding box of a Menu Entry");
				}
			}

			/*! \brief Does not make sense for a Menu Entry.
			 * \warning An exception will be thrown if called on a MenuEntry.
			 * \exception InvalidOperationException Thrown if called on a MenuEntry object.  */
			public override void SetFocus ()
			{
				throw new InvalidOperationException ("You cannot set the input focus to a Menu Entry");
			}

			protected virtual void OnSubMenu (ToolboxEvent e)
			{
				if (SubMenu != null)
					SubMenu (this, new SubMenuEventArgs (e.ToolboxArgs.RawEventData));
			}

			protected virtual void OnSelection (ToolboxEvent e)
			{
				if (Selection != null)
					Selection (this, e.ToolboxArgs);
			}

			public override void Dispatch (ToolboxEvent e)
			{
				uint selection_event_code = ClickEvent;

				if (selection_event_code == 0) {
					selection_event_code = EventCode.Selection;
				}

				uint submenu_event_code = SubMenuEvent;

				if (submenu_event_code == 0) {
					submenu_event_code = EventCode.SubMenu;
				}

				if (e.ToolboxArgs.Header.EventCode == selection_event_code) {
					OnSelection (e);
				}
				else if (e.ToolboxArgs.Header.EventCode == submenu_event_code) {
					OnSubMenu (e);
				}
			}

			/*! \brief The signature of a SubMenu event handler.  */
			public delegate void SubMenuEventHandler (object sender, SubMenuEventArgs e);

			/*! \brief The signature of a Selection event handler.  */
			public delegate void SelectionEventHandler (object sender, ToolboxEventArgs e);

			/*! \brief The event handlers that will be called when the pointer if moved.
			 * over the submenu arrow of the menu entry.
			 * 
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, MenuEntry.SubMenuEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * MenuEntryObject.SubMenu += handler_name;
			 * \endcode  */
			public event SubMenuEventHandler SubMenu;

			/*! \brief The event handlers that will be called when this menu entry is selected.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * MenuEntryObject.Selection += handler_name;
			 * \endcode  */
			public event SelectionEventHandler Selection;
		}

		/*! \class Menu
		 * \brief Encapsulates a Toolbox %Menu object.  */
		public class Menu : Object
		{
			/*! \brief The Toolbox methods associated with the Toolbox %Menu class.  */
			static class Method
			{
				public const int SetHelpMessage = 16;
				public const int GetHelpMessage = 17;
				public const int AddEntry = 20;
				public const int RemoveEntry = 21;
				public const int GetHeight = 22;
				public const int GetWidth = 23;
				public const int SetTitle = 24;
				public const int GetTitle = 25;
			}

			/*! \brief %Flags used in a %Menu Toolbox template.  */
			public static class Flags
			{
				public const int GenerateAboutToBeShown = (1 << 0);
				public const int GenerateHasBeenHidden = (1 << 1);
			}

			public static class TemplateOffset
			{
				public const int Flags = 36;
				public const int Title = 40;
				public const int MaxTitle = 44;
				public const int HelpMessage = 48;
				public const int MaxHelp = 52;
				public const int ShowEvent = 56;
				public const int HideEvent = 60;
				public const int NumEntries = 64;
			}

			/*! \class EventCode
			 * \brief Toolbox events that can be generated by the Toolbox %Menu object.  */
			public static class EventCode
			{
				public const int AboutToBeShown = 0x828c0;
				public const int HasBeenHidden = 0x828c1;
			}

			int AboutToBeShownEventCode = 0;
			int HasBeenHiddenEventCode = 0;

			/*! \brief Create a Toolbox %Menu object from the named resource.
			 * \param [in] resName The name of the template in the resource file.  */
			public Menu (string resName) : base (resName)
			{
				IntPtr template = TemplateLookup (resName);
				RetrieveEventCodes (template);
			}

			/*! \brief Create a Toolbox %Menu from the template data given.
			 * \param[in] templateData Pointer to the menu template.  */
			public Menu (IntPtr templateData)
			{
				Create (templateData);
				RetrieveEventCodes (templateData);
			}

			/*! \brief Create a %Menu from a Toolbox object that already exists.
			 * \param [in] objectID The Toolbox ID of the existing object.  */
			public Menu (uint ObjectID) : base (ObjectID)
			{
				IntPtr template = Toolbox.TemplateLookup (TemplateName);
				RetrieveEventCodes (template);
			}

			/*! \brief Sets or gets the title of the %Menu.
			 * \throw ArgumentNullException Thrown if the Title property is set to null.  */
			public string Title
			{
				set { SetTitle (value); }
				get { return GetTitle (); }
			}

			/*! \brief Sets or gets the help message which will be returned when a Help Message
			 * Request is received.  */
			public string HelpMessage
			{
				set { SetHelpMessage (value); }
				get { return GetHelpMessage (); }
			}

			/*! \brief Gets the height of the work area of the Menu in OS units.  */
			public int Height
			{
				get { return GetHeight (); }
			}

			/*! \brief Gets the width of the work area on the Menu in OS units.  */
			public int Width
			{
				get { return GetWidth (); }
			}

			/*! \brief Set the text string used in the %Menu title bar.
			 * \note If the %Menu is being displayed, the effect is not immediate.
			 * \note The \e Title property can be used for the same purpose.
			 * \throw ArgumentNullException Thrown if the Title property is set to null.  */
			public void SetTitle (string text)
			{
				if (text == null)
					throw new ArgumentNullException ("text", "Attempt to set Menu Title to null");
				SetText (0, Method.SetTitle, text);
			}

			/*! \brief Return the text string used in the title bar of this %Menu.
			 * \note The \e Title property can be used for the same purpose.  */
			public string GetTitle ()
			{
				return GetText (Method.GetTitle);
			}

			/*! \brief Set the text string which will be returned when a Help Request is received.
			 * \note The \e HelpMessage property can be used for the same purpose.  */
			public void SetHelpMessage (string text)
			{
				SetText (0, Method.SetHelpMessage, text);
			}

			/*! \brief Read the text string which will be returned when a Help Request is received.
			 * \note The \e HelpMessage property can be used for the same purpose.  */
			public string GetHelpMessage ()
			{
				return GetText (Method.GetHelpMessage);
			}

			/*! \brief Return the width of the %Menu work area in OS units.
			 * \note The \e Width property can be used for the same purpose.  */
			public int GetWidth ()
			{
				return (int)MiscOp_GetR0 (0, Method.GetWidth);
			}

			/*! \brief Return the height of the %Menu work area in OS units.
			 * \note The \e Height property can be used for the same purpose.  */
			public int GetHeight ()
			{
				return (int)MiscOp_GetR0 (0, Method.GetHeight);
			}

			/*! \todo Method to add a Menu Entry to a menu. Requires
			 * support for creation of objects from template data.  */
			public void AddEntry ()
			{
			}

			/*! \todo Method to remove a Menu Entry from a menu.
			 * Easy to do, but waiting for corresponding AddEntry.  */
			public void RemoveEntry ()
			{
			}

			protected virtual void OnAboutToBeShown (ToolboxEvent e)
			{
				if (AboutToBeShown != null)
					AboutToBeShown (this, new MenuAboutToBeShownEventArgs (e.ToolboxArgs.RawEventData));
			}

			protected virtual void OnHasBeenHidden (ToolboxEvent e)
			{
				if (HasBeenHidden != null)
					HasBeenHidden (this, e.ToolboxArgs);
			}

			public override void Dispatch (ToolboxEvent e)
			{
				if (e.ToolboxArgs.Header.EventCode == AboutToBeShownEventCode)
				{
					OnAboutToBeShown (e);
				}
				else if (e.ToolboxArgs.Header.EventCode == HasBeenHiddenEventCode)
				{
					OnHasBeenHidden (e);
				}
			}

			void RetrieveEventCodes (IntPtr template)
			{
				// The Acorn User Interface Toolbox Manual states that these event codes are
				// -1 in the template if the default events are to be raised, however, it would
				// seem that they are actually 0.
				int flags = Marshal.ReadInt32 (template, TemplateOffset.Flags);
				if ((flags & Flags.GenerateAboutToBeShown) != 0)
				{
					var show_event = Marshal.ReadInt32 (template,
									    TemplateOffset.ShowEvent);
					AboutToBeShownEventCode = (show_event != 0) ?
								   show_event :
								   EventCode.AboutToBeShown;
				}
				if ((flags & Flags.GenerateHasBeenHidden) != 0)
				{
					var hide_event = Marshal.ReadInt32 (template,
									    TemplateOffset.HideEvent);
					HasBeenHiddenEventCode = (hide_event != 0) ?
								  hide_event :
								  EventCode.HasBeenHidden;
				}
			}

			/*! \brief The event handlers that will be called just before this %Menu is shown.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, Object.MenuAboutToBeShownEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * MenuObject.AboutToBeShown += handler_name;
			 * \endcode  */
			public event MenuAboutToBeShownEventHandler AboutToBeShown;

			/*! \brief The event handlers that will be called when this %Menu has been hidden.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, ToolboxEventHandler e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * MenuObject.HasBeenHidden += handler_name;
			 * \endcode  */
			public event ToolboxEventHandler HasBeenHidden;
		}
	}
}
