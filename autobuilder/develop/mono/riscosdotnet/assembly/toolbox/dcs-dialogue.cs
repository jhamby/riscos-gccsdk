//
// toolbox/dcs-dialogue.cs - a binding of the RISC OS API to C#.
//
// Author: Lee Noar (leenoar@sky.com)
//
 
using System;
using System.Runtime.InteropServices;

namespace riscos
{
	public static partial class Toolbox
	{
		/*! \brief Encapsulates a Toolbox DCS (Discard/Cancel/Save) Dialogue Box.  */
		public class DCSDialogue : Object
		{
			static class Method
			{
				public const int GetWindowID = 0;
				public const int SetMessage = 1;
				public const int GetMessage = 2;
				public const int SetTitle = 3;
				public const int GetTitle = 4;
			}

			/*! \brief Default Toolbox events that can be generated by the %Toolbox DCS Dialogue.  */
			public static class EventCode
			{
				public const int AboutToBeShown = 0x82a80;
				public const int Discard = 0x82a81;
				public const int Save = 0x82a82;
				public const int DialogueCompleted = 0x82a83;
				public const int Cancel = 0x82a84;
			}

			/*! \brief Create a Toolbox DCS Dialogue from the named template in the
			 * Resource file.
			 * \param[in] resName The name of the FileInfo template to use.  */
			public DCSDialogue (string resName) : base (resName)
			{
			}

			/*! \brief Create a Toolbox DCS Dialogue from the template data given.
			 * \param[in] templateData Pointer to the window template.  */
			public DCSDialogue (IntPtr templateData)
			{
				Create (templateData);
			}

			/*! \brief Create a Toolbox DCS Dialogue from an object that already exists.
			 * \param [in] objectID The Toolbox ID of the existing object.  */
			public DCSDialogue (uint objectID) : base (objectID)
			{
			}

			/*! \brief Get the ID of the underlying Window object.  */
			public uint WindowID
			{
				get { return GetWindowID(); }
			}

			/*! \brief Gets or sets the message used in the DCS Dialogue's Window.  */
			public string Message
			{
				set { SetMessage (value); }
				get { return GetMessage (); }
			}

			/*! \brief Gets or sets the text which is to be used in the title bar
			 * of this DCS Dialogue.  */
			public string Title
			{
				set { SetTitle (value); }
				get { return GetTitle (); }
			}

			/*! \brief Return the ID of the underlying Window object used to implement this
			 * DCS Dialogue.
			 * \return The ID of the Window Object.
			 * \note The \e WindowID property can be used for the same purpose.  */
			public uint GetWindowID ()
			{
				return MiscOp_GetR0 (0, Method.GetWindowID);
			}

			/*! \brief Set the text string which is used in the title bar of the DCS dialogue.
			 * \note The \e Title property can be used for the same purpose.  */
			public void SetTitle (string title)
			{
				SetText (0, Method.SetTitle, title);
			}

			/*! \brief Return the text string which is used in the title bar of the DCS dialogue.
			 * \note The \e Title property can be used for the same purpose.  */
			public string GetTitle ()
			{
				return GetText (Method.GetTitle);
			}

			/*! \brief Set the text string which is used as the message in the DCS dialogue.
			 * \note The \e Message property can be used for the same purpose.  */
			public void SetMessage (string message)
			{
				SetText (0, Method.SetMessage, message);
			}

			/*! \brief Return the text string which is used as the message in the DCS dialogue.
			 * \note The \e Message property can be used for the same purpose.  */
			public string GetMessage ()
			{
				return GetText (Method.GetMessage);
			}

			/*! \brief Raising an event invokes the event handler through a delegate.
			 *
			 * The \b OnAboutToBeShown method also allows derived classes to handle the
			 * event without attaching a delegate. This is the preferred technique for
			 * handling the event in a derived class.
			 * \note  When overriding \b OnAboutToBeShown in a derived class, be sure to
			 * call the base class's \b OnAboutToBeShown method so that registered delegates
			 * receive the event.  */
			protected virtual void OnAboutToBeShown (AboutToBeShownEventArgs e)
			{
				if (AboutToBeShown != null)
					AboutToBeShown (this, e);
			}

			/*! \brief Raising an event invokes the event handler through a delegate.
			 *
			 * The \b OnDialogueCompleted method also allows derived classes to handle the
			 * event without attaching a delegate. This is the preferred technique for
			 * handling the event in a derived class.
			 * \note  When overriding \b OnDialogueCompleted in a derived class, be sure to
			 * call the base class's \b OnDialogueCompleted method so that registered delegates
			 * receive the event.  */
			protected virtual void OnDialogueCompleted (ToolboxEventArgs e)
			{
				if (DialogueCompleted != null)
					DialogueCompleted (this, e);
			}

			/*! \brief Raising an event invokes the event handler through a delegate.
			 *
			 * The \b OnClickSave method also allows derived classes to handle the
			 * event without attaching a delegate. This is the preferred technique for
			 * handling the event in a derived class.
			 * \note  When overriding \b OnClickSave in a derived class, be sure to
			 * call the base class's \b OnClickSave method so that registered delegates
			 * receive the event.  */
			protected virtual void OnClickSave (ToolboxEventArgs e)
			{
				if (ClickSave != null)
					ClickSave (this, e);
			}

			/*! \brief Raising an event invokes the event handler through a delegate.
			 *
			 * The \b OnClickCancel method also allows derived classes to handle the
			 * event without attaching a delegate. This is the preferred technique for
			 * handling the event in a derived class.
			 * \note  When overriding \b OnClickCancel in a derived class, be sure to
			 * call the base class's \b OnClickCancel method so that registered delegates
			 * receive the event.  */
			protected virtual void OnClickCancel (ToolboxEventArgs e)
			{
				if (ClickCancel != null)
					ClickCancel (this, e);
			}

			/*! \brief Raising an event invokes the event handler through a delegate.
			 *
			 * The \b OnClickDiscard method also allows derived classes to handle the
			 * event without attaching a delegate. This is the preferred technique for
			 * handling the event in a derived class.
			 * \note  When overriding \b OnClickDiscard in a derived class, be sure to
			 * call the base class's \b OnClickDiscard method so that registered delegates
			 * receive the event.  */
			protected virtual void OnClickDiscard (ToolboxEventArgs e)
			{
				if (ClickDiscard != null)
					ClickDiscard (this, e);
			}

			/*! \brief Check if the given event is relevant to the DCS Dialogue and call the
			 * associated event handlers.  */
			public override void Dispatch (ToolboxEventArgs e)
			{
				switch (e.Header.EventCode)
				{
				case EventCode.AboutToBeShown:
					OnAboutToBeShown (new AboutToBeShownEventArgs (e.RawEventData));
					break;
				case EventCode.DialogueCompleted:
					OnDialogueCompleted (e);
					break;
				case EventCode.Save:
					OnClickSave (e);
					break;
				case EventCode.Cancel:
					OnClickCancel (e);
					break;
				case EventCode.Discard:
					OnClickDiscard (e);
					break;
				}
			}

			/*! \brief The event handlers that will be called just before this DCS Dialogue is shown.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, Object.AboutToBeShownEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * DCSDialogueObject.AboutToBeShown += handler_name;
			 * \endcode  */
			public event EventHandler<AboutToBeShownEventArgs> AboutToBeShown;

			/*! \brief The event handlers that will be called when this dialogue is hidden.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, Object.ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * DCSObject.DialogueCompleted += handler_name;
			 * \endcode  */
			public event EventHandler<ToolboxEventArgs> DialogueCompleted;

			/*! \brief The event handlers that will be called when the user clicks on the
			 * \b Discard button.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, Object.ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * DCSObject.ClickDiscard += handler_name;
			 * \endcode  */
			public event EventHandler<ToolboxEventArgs> ClickDiscard;

			/*! \brief The event handlers that will be called when the user clicks on the
			 * \b Save button.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, Object.ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * DCSObject.ClickSave += handler_name;
			 * \endcode  */
			public event EventHandler<ToolboxEventArgs> ClickSave;

			/*! \brief The event handlers that will be called when the user clicks on the
			 * \b Cancel button.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, Object.ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * DCSObject.ClickCancel += handler_name;
			 * \endcode  */
			public event EventHandler<ToolboxEventArgs> ClickCancel;
		}
	}
}

