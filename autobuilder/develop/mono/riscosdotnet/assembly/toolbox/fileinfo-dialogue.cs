//
// toolbox/fileinfo-dialogue.cs - a binding of the RISC OS API to C#.
//
// Author: Lee Noar (leenoar@sky.com)
//
 
using System;
using System.Runtime.InteropServices;

namespace riscos
{
	public static partial class Toolbox
	{
		/*! \brief Encapsulates a Toolbox FileInfo Dialogue Box.  */
		public class FileInfoDialogue : Object
		{
			static class Method
			{
				public const int GetWindowID = 0;
				public const int SetModified = 1;
				public const int GetModified = 2;
				public const int SetFileType = 3;
				public const int GetFileType = 4;
				public const int SetFileName = 5;
				public const int GetFileName = 6;
				public const int SetFileSize = 7;
				public const int GetFileSize = 8;
				public const int SetDate = 9;
				public const int GetDate = 10;
				public const int SetTitle = 11;
				public const int GetTitle = 12;
			}

			/*! \brief Default Toolbox events that can be generated by the %Toolbox FileInfo Dialogue.  */
			public static class EventCode
			{
				public const int AboutToBeShown = 0x82ac0;
				public const int DialogueCompleted = 0x82ac1;
			}

			/*! \brief The event handlers that will be called just before this FileInfo Dialogue is shown.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, AboutToBeShownEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * FileInfoDialogueObject.AboutToBeShown += handler_name;
			 * \endcode  */
			public event AboutToBeShownEventHandler AboutToBeShown;

			/*! \brief The signature of a DialogueComplete event handler.  */
			public delegate void DialogueCompleteEventHandler (object sender, ToolboxEventArgs e);

			/*! \brief The event handlers that will be called when this dialogue is hidden.
			 *
			 * Handlers should have the signature:
			 * \code
			 * void handler_name (object sender, ToolboxEventArgs e);
			 * \endcode
			 * and can be added to the list with:
			 * \code
			 * FileInfoDialogueObject.DialogueComplete += handler_name;
			 * \endcode  */
			public event ToolboxEventHandler DialogueComplete;

			/*! \brief Create a %Toolbox FileInfo Dialogue from the named template in the
			 * Resource file.
			 * \param[in] resName The name of the FileInfo template to use.  */
			public FileInfoDialogue (string resName) : base (resName)
			{
			}

			/*! \brief Create a %Toolbox FileInfo Dialogue from the template data given.
			 * \param[in] templateData Pointer to the window template.  */
			public FileInfoDialogue (IntPtr templateData)
			{
				Create (templateData);
			}

			/*! \brief Create a %Toolbox %FileInfoDialogue from an object that already exists.
			 * \param [in] objectID The Toolbox ID of the existing object.  */
			public FileInfoDialogue (uint objectID) : base (objectID)
			{
			}

			/*! \brief Get the ID of the underlying Window object.  */
			public uint WindowID
			{
				get { return MiscOp_GetR0 (0, Method.GetWindowID); }
			}

			/*! \brief Gets or sets whether the file is to be indicated as modified or not.  */
			public bool Modified
			{
				set { MiscOp_SetR3 (0, Method.SetModified, value ? 1U : 0); }
				get { return MiscOp_GetR0 (0, Method.GetModified) == 0 ? false : true; }
			}

			/*! \brief Gets or sets the file type to be indicated in the dialogue box.  */
			public int FileType
			{
				set { MiscOp_SetR3 (0, Method.SetFileType, (uint)value); }
				get { return (int)MiscOp_GetR0 (0, Method.GetFileType); }
			}

			/*! \brief Gets or sets the filename used in the FileInfo Dialogue box.
			 *
			 * There is a limit of 256 characters on the filename length.  */
			public string FileName
			{
				set { SetText (0, Method.SetFileName, value); }
				get { return GetText (Method.GetFileName); }
			}

			/*! \brief Gets or sets the file size to be indicated in the dialogue box.  */
			public int FileSize
			{
				set { MiscOp_SetR3 (0, Method.SetFileSize, (uint)value); }
				get { return (int)MiscOp_GetR0 (0, Method.GetFileSize); }
			}

			/*! \brief Sets the date string used in the FileInfo dialogue's window or gets
			 * the current UTC time used to set the date string.  */
			public OS.DateTime Date
			{
				set {
					GCHandle pinned_array;
					try {
						// Prevent the GC from moving the memory while we use its address.
						pinned_array = GCHandle.Alloc (value.Utc, GCHandleType.Pinned);
						MiscOp_SetR3 (0, Method.SetDate, pinned_array.AddrOfPinnedObject());
					}
					catch {
						throw;
					}
					finally {
						// The GC can have control of this back now.
						pinned_array.Free ();
					}
				}
				get {
					OS.DateTime date = new OS.DateTime ();
					GCHandle pinned_array;
					try {
						// Prevent the GC from moving the memory while we use its address.
						pinned_array = GCHandle.Alloc (date.Utc, GCHandleType.Pinned);
						MiscOp_SetR3 (0, Method.GetDate, pinned_array.AddrOfPinnedObject());
					}
					catch {
						throw;
					}
					finally {
						// The GC can have control of this back now.
						pinned_array.Free ();
					}

					return date;
				}
			}

			/*! \brief Gets or sets the text which is to be used in the title bar
			 * of this FileInfo Dialogue.  */
			public string Title
			{
				set { SetText (0, Method.SetTitle, value); }
				get { return GetText (Method.GetTitle); }
			}

			/*! \brief Check if the given event is relevant to the FileInfo Dialogue and call the
			 * associated event handlers.  */
			public override void Dispatch (ToolboxEvent ev)
			{
				switch (ev.ToolboxArgs.Header.EventCode)
				{
				case EventCode.AboutToBeShown:
					if (AboutToBeShown != null)
						AboutToBeShown (this, new AboutToBeShownEventArgs (ev.ToolboxArgs.RawEventData));
					break;
				case EventCode.DialogueCompleted:
					if (DialogueComplete != null)
						DialogueComplete (this, ev.ToolboxArgs);
					break;
				}
			}
		}
	}
}
