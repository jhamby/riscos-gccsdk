//
// toolbox/iconbar.cs - a binding of the RISC OS API to C#.
//
// Author: Lee Noar (leenoar@sky.com)
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace riscos
{
	public static partial class Toolbox
	{
		/*! \class Iconbar
		 * \brief Encapsulates a Toolbox %Iconbar object.  */
		public class Iconbar : Object
		{
			static class Method
			{
				public const int GetIconHandle = 0;
				public const int SetMenu = 1;
				public const int GetMenu = 2;
				public const int SetEvent = 3;
				public const int GetEvent = 4;
				public const int SetShow = 5;
				public const int GetShow = 6;
				public const int SetHelpMessage = 7;
				public const int GetHelpMessage = 8;
				public const int SetText = 9;
				public const int GetText = 10;
				public const int SetSprite = 11;
				public const int GetSprite = 12;
			}

			/*! \class EventCode
			 * \brief Default Toolbox events that can be generated by the Toolbox %Iconbar object.  */
			public static class EventCode
			{
				public const int Clicked = 0x82900;
				public const int SelectAboutToBeShown = 0x82901;
				public const int AdjustAboutToBeShown = 0x82902;
			}

			public static class TemplateOffset
			{
				public const int Flags = 36;
				public const int Position = 40;
				public const int Priority = 44;
				public const int SpriteName = 48;
				public const int MaxSpriteName = 52;
				public const int Text = 56;
				public const int MaxTextLen = 60;
				public const int Menu = 64;
				public const int SelectEvent = 68;
				public const int AdjustEvent = 72;
				public const int SelectShow = 76;
				public const int AdjustShow = 80;
				public const int HelpMessage = 84;
				public const int MaxHelp = 88;
			}

			/*! \brief Flags used by a number of Toolbox methods to refer to the mouse buttons.  */
			public enum ButtonFlags
			{
				Select = (1 << 0),
				Adjust = (1 << 1)
			}

			// Track whether the help message has been set to null in the Toolbox.
			// If it has, then attempting to set it again will overwrite address 0.
			private bool null_help_message;

			/*! \brief Create a Toolbox %Iconbar object from the named template in the
			 * Resource file.
			 * \param[in] resName The name of the %Iconbar template to use.  */
			public Iconbar (string resName) : base (resName)
			{
				IntPtr template = TemplateLookup (resName);
				if (template != IntPtr.Zero)
					null_help_message = (Marshal.ReadInt32 (template, 21 * 4) == 0);
				else
					null_help_message = true;
			}

			/*! \brief Create a Toolbox %Iconbar object from the template data given.
			 * \param[in] templateData Pointer to the object template.  */
			public Iconbar (IntPtr templateData)
			{
				Create (templateData);
			}

			/*! \brief Create a Toolbox %Iconbar object from an object that already exists.
			 * \param [in] objectID The Toolbox ID of the existing object.  */
			public Iconbar (uint objectID) : base (objectID)
			{
			}

			/*! \brief Gets the WIMP handle of the icon on the iconbar.  */
			public uint IconHandle
			{
				get { return GetIconHandle (); }
			}

			/*! \brief Specifies the menu which will be displayed when the %Menu button is
			 * pressed over this %Iconbar object.
			 * \note Set to null to detach the current menu.  */
			public Toolbox.Menu Menu
			{
				set { SetMenu (value); }
				get { return GetMenu (); }
			}

			/*! \brief Specifies a Toolbox event to be raised when the user clicks Select
			 * on the %Iconbar icon.
			 * \note Set to 0 to raise the default toolbox event instead.  */
			public uint SelectClickEvent
			{
				set { SetEvent (ButtonFlags.Select, value, 0); }
				get {
					uint select, adjust;
					GetEvent (ButtonFlags.Select, out select, out adjust);
					return select;
				}
			}

			/*! \brief Specifies a Toolbox event to be raised when the user clicks Adjust
			 * on the %Iconbar icon.
			 * \note Set to 0 to raise the default toolbox event instead.  */
			public uint AdjustClickEvent
			{
				set { SetEvent (ButtonFlags.Adjust, 0, value); }
				get {
					uint select, adjust;
					GetEvent (ButtonFlags.Adjust, out select, out adjust);
					return adjust;
				}
			}

			/*! \brief Specifies an object to be shown when the user clicks Select on
			 * on the %Iconbar icon.
			 * \note Set to null to prevent any object from being shown.  */
			public Toolbox.Object SelectClickShow
			{
				set { SetShow (ButtonFlags.Select, value, null); }
				get {
					Toolbox.Object select, adjust;
					GetShow (ButtonFlags.Select, out select, out adjust);
					return select;
				}
			}


			/*! \brief Specifies an object to be shown when the user clicks Adjust on
			 * on the %Iconbar icon.
			 * \note Set to null to prevent any object from being shown.  */
			public Toolbox.Object AdjustClickShow
			{
				set { SetShow (ButtonFlags.Adjust, null, value); }
				get {
					Toolbox.Object select, adjust;
					GetShow (ButtonFlags.Adjust, out select, out adjust);
					return adjust;
				}
			}

			/*! \brief Sets or gets the help message which will be returned when a Help Request message
			 * is received for this %Iconbar object.
			 * \note Set to null to detach the Help Message for this %Iconbar object. Once
			 * set to null, it cannot be re-attached.  */
			public string HelpMessage
			{
				set { SetHelpMessage (value); }
				get { return GetHelpMessage (); }
			}

			/*! \brief Sets or gets the text which is used in a text and sprite %Iconbar object.
			 * \throw ArgumentNullException Thrown if %Iconbar text set to null.
			 * \note An OS.ErrorException is thrown if the text is longer than the maximum size
			 * specified when the %Iconbar icon was created.  */
			public string Text
			{
				set { SetText (value); }
				get { return GetText (); }
			}

			/*! \brief Sets or gets the sprite which is used in the %Iconbar object.
			 * \throw ArgumentNullException Thrown if %Iconbar sprite set to null.  */
			public string Sprite
			{
				set { SetSprite (value); }
				get { return GetSprite (); }
			}

			/*! \brief Returns the handle of the underlying Wimp icon used to implement this
			 * %Iconbar object.
			 * \note The \e IconHandle property can be used for the same purpose.  */
			public uint GetIconHandle ()
			{
				return MiscOp_GetR0 (0, Method.GetIconHandle);
			}

			/*! \brief Set the menu which will be displayed when the %Menu button is pressed over
			 * this %Iconbar object.
			 * \note The \e %Menu property can be used for the same purpose.  */
			public void SetMenu (Toolbox.Menu menu)
			{
				SetMenu (Method.SetMenu, menu);
			}

			/*! \brief Return the menu which will be displayed when the %Menu button is pressed over
			 * this %Iconbar object.
			 * \note The \e %Menu property can be used for the same purpose.  */
			public Toolbox.Menu GetMenu ()
			{
				return GetMenu (Method.GetMenu);
			}

			/*! \brief Specify a toolbox event to be raised when the user clicks Select and/or
			 * Adjust on the %Iconbar icon.
			 * \param [in] flags Bits 0 and 1 indicate which buttons to set events for.
			 * \param [in] selectEventCode The event to be raised if Select is clicked (if bit 0 set
			 * in flags - ButtonFlags.Select).
			 * \param [in] adjustEventCode The event to be raised if Adjust is clicked (if bit 1 set
			 * in flags - ButtonFlags.Adjust).
			 * \note The \e SelectClickEvent and \e AdjustClickEvent properties can be used for
			 * the same purpose.  */
			public void SetEvent (ButtonFlags flags, uint selectEventCode,
								 uint adjustEventCode)
			{
				MiscOp_SetR3R4 ((uint)flags,
						Method.SetEvent,
						selectEventCode,
						adjustEventCode);
			}

			/*! \brief Return the toolbox event to be raised when the user clicks Select and/or
			 * Adjust on the %Iconbar icon.
			 * \param [in] flags Bits 0 and 1 indicate which buttons to return events for.
			 * \param [out] selectEventCode The event to be raised if Select is clicked (if bit 0 set
			 * in flags - ButtonFlags.Select).
			 * \param [out] adjustEventCode The event to be raised if Adjust is clicked (if bit 1 set
			 * in flags - ButtonFlags.Adjust).
			 * \note The \e SelectClickEvent and \e AdjustClickEvent properties can be used for
			 * the same purpose.  */
			public void GetEvent (ButtonFlags flags, out uint selectEventCode,
								 out uint adjustEventCode)
			{
				MiscOp_GetR0R1 ((uint)flags,
						Method.GetEvent,
						out selectEventCode,
						out adjustEventCode);
			}

			/*! \brief Specify a toolbox object to be shown when the user clicks Select and/or
			 * Adjust on the %Iconbar icon.
			 * \param [in] flags Bits 0 and 1 indicate which buttons to set objects for.
			 * \param [in] selectClickShow The object to be shown if Select is clicked (if bit 0 set
			 * in flags - ButtonFlags.Select).
			 * \param [in] adjustClickShow The object to be shown if Adjust is clicked (if bit 1 set
			 * in flags - ButtonFlags.Adjust).
			 * \note Set to null to prevent any object from being shown.
			 * \note The \e SelectClickShow and \e AdjustClickShow properties can be used for
			 * the same purpose.  */
			public void SetShow (ButtonFlags flags, Toolbox.Object selectClickShow,
								Toolbox.Object adjustClickShow)
			{
				MiscOp_SetR3R4 ((uint)flags,
						Method.SetShow,
						(selectClickShow != null) ? selectClickShow.ID : 0,
						(adjustClickShow != null) ? adjustClickShow.ID : 0);
			}

			/*! \brief Return the toolbox object to be shown when the user clicks Select and/or
			 * Adjust on the %Iconbar icon.
			 * \param [in] flags Bits 0 and 1 indicate which buttons to return objects for.
			 * \param [out] selectClickShow The object to be shown if Select is clicked (if bit 0 set
			 * in flags - ButtonFlags.Select).
			 * \param [out] adjustClickShow The object to be shown if Adjust is clicked (if bit 1 set
			 * in flags - ButtonFlags.Adjust).
			 * \note Set to \e null if no object is to be shown.
			 * \note The \e SelectClickShow and \e AdjustClickShow properties can be used for
			 * the same purpose.  */
			public void GetShow (ButtonFlags flags, out Toolbox.Object selectClickShow,
								out Toolbox.Object adjustClickShow)
			{
				uint select_id;
				uint adjust_id;

				MiscOp_GetR0R1 ((uint)flags, Method.GetShow, out select_id, out adjust_id);

				selectClickShow = ((flags & ButtonFlags.Select) != 0 && select_id != 0) ?
							LookupOrWrap (select_id) : null;
				adjustClickShow = ((flags & ButtonFlags.Adjust) != 0 && adjust_id != 0) ?
							LookupOrWrap (adjust_id) : null;
			}

			/*! \brief Set the help message which will be returned when a Help Request
			 * message is received for this %Iconbar object.
			 * \note Set to \e null to detach the Help Message for this %Iconbar object. Once
			 * set to null, it cannot be re-attached.
			 * \note The \e HelpMessage property can be used for the same purpose.  */
			public void SetHelpMessage (string text)
			{
				if (!null_help_message)
					SetText (0, Method.SetHelpMessage, text);
				if (text == null)
					null_help_message = true;
			}

			/*! \brief Read the help message which will be returned when a Help Request
			 * message is received for this %Iconbar object.
			 * \note The \e HelpMessage property can be used for the same purpose.  */
			public string GetHelpMessage ()
			{
				if (null_help_message)
					return null;

				return GetText (Method.GetHelpMessage);
			}

			/*! \brief Set the text to be used in a text&sprite %Iconbar object.
			 * \throw ArgumentNullException Thrown if %Iconbar text set to null.
			 * \note An OS.ErrorException is thrown if the text is longer than the maximum size
			 * specified when the %Iconbar icon was created.
			 * \note The \e Text property can be used for the same purpose.  */
			public void SetText (string text)
			{
				if (text == null)
					throw new ArgumentNullException ("text", "Attempted to set Iconbar text to null");
				SetText (0, Method.SetText, text);
			}

			/*! \brief Return the text used in a text&sprite %Iconbar object.
			 * \note The \e Text property can be used for the same purpose.  */
			public string GetText ()
			{
				return GetText (Method.GetText);
			}

			/*! \brief Set the sprite that is to be used in the %Iconbar object.
			 * \throw ArgumentNullException Thrown if %Iconbar sprite name set to null.
			 * \note The \e Sprite property can be used for the same purpose.  */
			public void SetSprite (string name)
			{
				if (name == null)
					throw new ArgumentNullException ("name", "Attempted to set Iconbar sprite to null");
				SetText (0, Method.SetSprite, name);
			}

			/*! \brief Return the name of the sprite used for the %Iconbar object.
			 * \note The \e Sprite property can be used for the same purpose.  */
			public string GetSprite ()
			{
				return GetText (Method.GetSprite);
			}

			protected virtual void OnClick (ToolboxEvent e)
			{
				if (Click != null)
					Click (this, new ClickEventArgs (e.ToolboxArgs.RawEventData));
			}

			protected virtual void OnSelectClickAboutToBeShown (ToolboxEvent e)
			{
				if (SelectClickAboutToBeShown != null)
					SelectClickAboutToBeShown (this,
								   new AboutToBeShownEventArgs (e.ToolboxArgs.RawEventData));
			}

			protected virtual void OnAdjustClickAboutToBeShown (ToolboxEvent e)
			{
				if (AdjustClickAboutToBeShown != null)
					AdjustClickAboutToBeShown (this,
								   new AboutToBeShownEventArgs (e.ToolboxArgs.RawEventData));
			}

			protected virtual void OnSelectClick (ToolboxEvent e)
			{
				if (SelectClick != null)
					SelectClick (this, e.ToolboxArgs);
			}

			protected virtual void OnAdjustClick (ToolboxEvent e)
			{
				if (AdjustClick != null)
					AdjustClick (this, e.ToolboxArgs);
			}

			/*! \brief Check if the given event is relevant to the %Iconbar object and call the
			 * associated event handlers.  */
			public override void Dispatch (ToolboxEvent e)
			{
				if (e.ToolboxArgs.Header.EventCode == SelectClickEvent)
					OnSelectClick (e);
				else if (e.ToolboxArgs.Header.EventCode == AdjustClickEvent)
					OnAdjustClick (e);
				else
				{
					switch (e.ToolboxArgs.Header.EventCode)
					{
					case EventCode.Clicked:
						OnClick (e);
						break;
					case EventCode.SelectAboutToBeShown:
						OnSelectClickAboutToBeShown (e);
						break;
					case EventCode.AdjustAboutToBeShown:
						OnAdjustClickAboutToBeShown (e);
						break;
					}
				}
			}

			new public delegate void AboutToBeShownEventHandler (object sender, AboutToBeShownEventArgs e);
			public delegate void ClickEventHandler (object sender, ClickEventArgs e);

			/*! \brief The event handlers that will be called just before the Select clicked object
			 * is shown.  */
			public event AboutToBeShownEventHandler SelectClickAboutToBeShown;

			/*! \brief The event handlers that will be called just before the Adjust clicked object
			 * is shown.  */
			public event AboutToBeShownEventHandler AdjustClickAboutToBeShown;

			/*! \brief The event handlers that will be called when Select is clicked on the %Iconbar
			 * icon.
			 * 
			 * The SelectClickEvent property must be set in order for this event to be raised.  */
			public event ToolboxEventHandler SelectClick;

			/*! \brief The event handlers that will be called when Adjust is clicked on the %Iconbar
			 * icon.
			 * 
			 * The AdjustClickEvent property must be set in order for this event to be raised.  */
			public event ToolboxEventHandler AdjustClick;

			/*! \brief The event handlers that will be called when any button is clicked on the %Iconbar
			 * icon.
			 * 
			 * This is the handler for the default event which is raised when the SelectClickEvent and
			 * AdjustClickEvent properties are not set.  */
			public event ClickEventHandler Click;

			/*! \class AboutToBeShownEventArgs
			 * \brief An object that encapsulates the arguments for an AboutTobeShown event.  */
			new public class AboutToBeShownEventArgs : ToolboxEventArgs
			{
				public static class EventOffset
				{
					public const int ObjectID = 16;
				}

				public Toolbox.Object Object;

				public AboutToBeShownEventArgs (IntPtr unmanagedEventData) : base (unmanagedEventData)
				{
					int ObjectID = Marshal.ReadInt32 (RawEventData, EventOffset.ObjectID);
					Object = LookupOrWrap ((uint)ObjectID);
				}
			}

			/*! \class ClickEventArgs
			 * \brief An object that encapsulates the arguments for the default Toolbox event
			 * which is raised when the %Iconbar icon is clicked.  */
			public class ClickEventArgs : ToolboxEventArgs
			{
				/*! \brief \e true if the %Iconbar icon was clicked with Select.  */
				public bool SelectClicked;
				/*! \brief \e true if the %Iconbar icon was clicked with Adjust.  */ 
				public bool AdjustClicked;

				/*! \brief Create the arguments for the event from the raw event data.  */
				public ClickEventArgs (IntPtr unmanagedEventData) : base (unmanagedEventData)
				{
					int flags = Marshal.ReadInt32 (RawEventData, Toolbox.EventHeaderOffset.Flags);

					SelectClicked = (flags & 4) != 0;
					AdjustClicked = (flags & 1) != 0;
				}
			}
		}
	}
}
