//
// toolbox/iconbar.cs - a binding of the RISC OS API to C#.
//
// Author: Lee Noar (leenoar@sky.com)
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace riscos
{
	public static partial class Toolbox
	{
		/*! \class Iconbar
		 * \brief Encapsulates a Toolbox iconbar object.  */
		public class Iconbar : Object
		{
			static class Method
			{
				public const int GetIconHandle = 0;
				public const int SetMenu = 1;
				public const int GetMenu = 2;
				public const int SetEvent = 3;
				public const int GetEvent = 4;
				public const int SetShow = 5;
				public const int GetShow = 6;
				public const int SetHelpMessage = 7;
				public const int GetHelpMessage = 8;
				public const int SetText = 9;
				public const int GetText = 10;
				public const int SetSprite = 11;
				public const int GetSprite = 12;
			}

			/*! \class EventCode
			 * \brief Default Toolbox events that can be generated by the Toolbox Iconbar object.  */
			public static class EventCode
			{
				public const int Clicked = 0x82900;
				public const int SelectAboutToBeShown = 0x82901;
				public const int AdjustAboutToBeShown = 0x82902;
			}

			public static class TemplateOffset
			{
				public const int Flags = 36;
				public const int Position = 40;
				public const int Priority = 44;
				public const int SpriteName = 48;
				public const int MaxSpriteName = 52;
				public const int Text = 56;
				public const int MaxTextLen = 60;
				public const int Menu = 64;
				public const int SelectEvent = 68;
				public const int AdjustEvent = 72;
				public const int SelectShow = 76;
				public const int AdjustShow = 80;
				public const int HelpMessage = 84;
				public const int MaxHelp = 88;
			}

			/*! \class AboutToBeShownEventArgs
			 * \brief An object that encapsulates the arguments for an AboutTobeShown event.  */
			new public class AboutToBeShownEventArgs : ToolboxEventArgs
			{
				public static class EventOffset
				{
					public const int ObjectID = 16;
				}

				public Toolbox.Object Object;

				public AboutToBeShownEventArgs (IntPtr unmanagedEventData) : base (unmanagedEventData)
				{
					int ObjectID = Marshal.ReadInt32 (RawEventData, EventOffset.ObjectID);
					Object = LookupOrWrap ((uint)ObjectID);
				}
			}

			/*! \class ClickedEventArgs
			 * \brief An object that encapsulates the arguments for the default Toolbox event
			 * which is raised when the Iconbar icon is clicked.  */
			public class ClickedEventArgs : ToolboxEventArgs
			{
				/*! \brief \e true if the Iconbar icon was clicked with Select.  */
				public bool SelectClicked;
				/*! \brief \e true if the Iconbar icon was clicked with Adjust.  */ 
				public bool AdjustClicked;

				/*! \brief Create the arguments for the event from the raw event data.  */
				public ClickedEventArgs (IntPtr unmanagedEventData) : base (unmanagedEventData)
				{
					int flags = Marshal.ReadInt32 (RawEventData, Toolbox.EventHeaderOffset.Flags);

					SelectClicked = (flags & 4) != 0;
					AdjustClicked = (flags & 1) != 0;
				}
			}

			new public delegate void AboutToBeShownEventHandler (object sender, AboutToBeShownEventArgs e);
			public delegate void ClickedEventHandler (object sender, ClickedEventArgs e);

			/*! \brief The event handlers that will be called just before the Select clicked object
			 * is shown.  */
			public event AboutToBeShownEventHandler SelectAboutToBeShown;

			/*! \brief The event handlers that will be called just before the Adjust clicked object
			 * is shown.  */
			public event AboutToBeShownEventHandler AdjustAboutToBeShown;

			/*! \brief The event handlers that will be called when Select is clicked on the Iconbar
			 * icon.
			 * 
			 * The SelectEvent property must be set in order for this event to be raised.  */
			public event ToolboxEventHandler SelectClicked;

			/*! \brief The event handlers that will be called when Adjust is clicked on the Iconbar
			 * icon.
			 * 
			 * The AdjustEvent property must be set in order for this event to be raised.  */
			public event ToolboxEventHandler AdjustClicked;

			/*! \brief The event handlers that will be called when any button is clicked on the Iconbar
			 * icon.
			 * 
			 * This is the handler for the default event which is raised when the SelectEvent and
			 * AdjustEvent properties are not set.  */
			public event ClickedEventHandler Clicked;

			// Track whether the help message has been set to null in the Toolbox.
			// If it has, then attempting to set it again will overwrite address 0.
			private bool null_help_message;

			public Iconbar (string resName) : base (resName)
			{
				IntPtr template = TemplateLookup (resName);
				if (template != IntPtr.Zero)
					null_help_message = (Marshal.ReadInt32 (template, 21 * 4) == 0);
				else
					null_help_message = true;
			}

			/*! \brief The WIMP handle of the icon on the iconbar.  */
			public uint IconHandle
			{
				get { return MiscOp_GetR0 (0, Method.GetIconHandle); }
			}

			/*! \brief Specifies the menu which will be displayed when the Menu button is
			 * pressed over this Iconbar object.
			 * \note Set to null to detach the current menu.  */
			public Toolbox.Menu Menu
			{
				set { SetMenu (Method.SetMenu, value); }
				get { return GetMenu (Method.GetMenu); }
			}

			/*! \brief Specifies a Toolbox event to be raised when the user clicks Select
			 * on the Iconbar icon.
			 * \note Set to 0 to raise the default toolbox event instead.  */
			public uint SelectEvent
			{
				set { SetSelect (Method.SetEvent, value); }
				get { return GetSelect (Method.GetEvent); }
			}

			/*! \brief Specifies a Toolbox event to be raised when the user clicks Adjust
			 * on the Iconbar icon.
			 * \note Set to 0 to raise the default toolbox event instead.  */
			public uint AdjustEvent
			{
				set { SetAdjust (Method.SetEvent, value); }
				get { return GetAdjust (Method.GetEvent); }
			}

			/*! \brief Specifies an object to be shown when the user clicks Select on
			 * on the Iconbar icon.
			 * \note Set to null to prevent any object from being shown.  */
			public Toolbox.Object SelectShow
			{
				set { SetSelect (Method.SetShow, (value == null) ? 0 : value.ID); }
				get
				{
					uint select_show = GetSelect (Method.GetShow);
					Toolbox.Object tb_obj;
					if (ToolboxTask.AllObjects.TryGetValue (select_show, out tb_obj))
						return tb_obj;
					return null;
				}
			}


			/*! \brief Specifies an object to be shown when the user clicks Adjust on
			 * on the Iconbar icon.
			 * \note Set to null to prevent any object from being shown.  */
			public Toolbox.Object AdjustShow
			{
				set { SetAdjust (Method.SetShow, (value == null) ? 0 : value.ID); }
				get
				{
					uint adjust_show = GetAdjust (Method.GetShow);
					Toolbox.Object tb_obj;
					if (ToolboxTask.AllObjects.TryGetValue (adjust_show, out tb_obj))
						return tb_obj;
					return null;
				}
			}

			/*! \brief The help message which will be returned when a Help Request message
			 * is received for this Iconbar object.
			 * \note Set to null to detach the Help Message for this Iconbar object. Once
			 * set to null, it cannot be re-attached.  */
			public string HelpMessage
			{
				set
				{
					if (!null_help_message)
						SetText (0, Method.SetHelpMessage, value);
					if (value == null)
						null_help_message = true;
				}
				get
				{
					if (null_help_message)
						return null;

					return GetText (Method.GetHelpMessage);
				}
			}

			/*! \brief The text which is used in a text and sprite Iconbar object.
			 * \exception ArgumentNullException Thrown if Iconbar text set to null.
			 * \note An OS exception is thrown if the text is longer than the maximum size
			 * specified when the Iconbar icon was created.<br>
			 * A null value is ignored.  */
			public string Text
			{
				set
				{
					if (value == null)
						throw new ArgumentNullException ("value", "Attempted to set Iconbar text to null");
					SetText (0, Method.SetText, value);
				}
				get { return GetText (Method.GetText); }
			}

			/*! \brief The sprite which is used in the Iconbar object.
			 * \exception ArgumentNullException Thrown if Iconbar sprite set to null.  */
			public string Sprite
			{
				set
				{
					if (value == null)
						throw new ArgumentNullException ("value", "Attempted to set Iconbar sprite to null");
				}
				get { return GetText (Method.GetSprite); }
			}

			private void SetSelect (int method, uint select)
			{
				MiscOp_SetR3R4 (0x1, method, select, 0);
			}

			private void SetAdjust (int method, uint adjust)
			{
				MiscOp_SetR3R4 (0x2, method, 0, adjust);
			}

			private uint GetSelect (int method)
			{
				uint select, adjust;

				MiscOp_GetR0R1 (0x1, method, out select, out adjust);

				return select;
			}

			private uint GetAdjust (int method)
			{
				uint select, adjust;

				MiscOp_GetR0R1 (0x2, method, out select, out adjust);

				return adjust;
			}

			public override void Dispatch (ToolboxEvent ev)
			{
				if (ev.ToolboxArgs.Header.EventCode == SelectEvent && SelectClicked != null)
					SelectClicked (this, ev.ToolboxArgs);
				else if (ev.ToolboxArgs.Header.EventCode == AdjustEvent)
					AdjustClicked (this, ev.ToolboxArgs);
				else
				{
					switch (ev.ToolboxArgs.Header.EventCode)
					{
					case EventCode.Clicked:
						if (Clicked != null)
							Clicked (this, new ClickedEventArgs (ev.ToolboxArgs.RawEventData));
						break;
					case EventCode.SelectAboutToBeShown:
						if (SelectAboutToBeShown != null)
							SelectAboutToBeShown (this,
									      new AboutToBeShownEventArgs (ev.ToolboxArgs.RawEventData));
						break;
					case EventCode.AdjustAboutToBeShown:
						if (AdjustAboutToBeShown != null)
							AdjustAboutToBeShown (this,
									      new AboutToBeShownEventArgs (ev.ToolboxArgs.RawEventData));
						break;
					}
				}
			}
		}
	}
}
