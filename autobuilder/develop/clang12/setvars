# Build Clang cross-compiler for armv7a-unknown-riscos-gnueabihf.

AB_CATEGORY="Development"

LLVM_VERSION=12.0.1

AB_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang-12.0.1.src.tar.xz
AB_MAKE=
AB_PRECONF=":"
AB_CONFIG=

# Create symlinks from arm-riscos-gnueabihf to armv7a-unknown-riscos-gnueabihf.
ln -sfT "$GCCSDK_INSTALL_ENV/arm-riscos-gnueabihf" "$GCCSDK_INSTALL_ENV/armv7a-unknown-riscos-gnueabihf"
ln -sfT "$GCCSDK_INSTALL_ENV/lib/gcc/arm-riscos-gnueabihf" "$GCCSDK_INSTALL_ENV/lib/gcc/armv7a-unknown-riscos-gnueabihf"
ln -sfT "$GCCSDK_INSTALL_ENV/arm-riscos-gnueabihf/include/c++/10.3.0/arm-riscos-gnueabihf" \
	"$GCCSDK_INSTALL_ENV/armv7a-unknown-riscos-gnueabihf/include/c++/10.3.0/armv7a-unknown-riscos-gnueabihf"

# Create symlinks to our new RISC OS toolchain files.
ln -sfT $H/lib.Driver.ToolChains.RISCOS.cpp $S/lib/Driver/ToolChains/RISCOS.cpp
ln -sfT $H/lib.Driver.ToolChains.RISCOS.h $S/lib/Driver/ToolChains/RISCOS.h

# Use the CMake we've built.
PATH=$GCCSDK_INSTALL_ENV/bin:$PATH

mkdir -p native-build

pushd . >/dev/null
cd native-build

# Build Release cross-compiler for ARMv7-A using installed LLVM.

# WARNING: the -DLLVM_EXTERNAL_LIT setting is required in order to
# run the unit tests, because LLVM doesn't have an option to install
# "llvm-lit", which is required for LLVM and Clang unit tests,
# so we have to give cmake the path inside the LLVM build directory
# in order to run the Clang unit tests when built separately.
#
# In order for "llvm12/llvm-12.0.1.src/native-build/bin/llvm-lit" to
# exist, you must have built llvm12 with the "-d" option to "build"
# so that it doesn't delete the llvm12 directory after completion.
# Otherwise, we can't add the option to run the unit tests.

LLVM_SRC_DIR="$S/../../llvm12/llvm-$LLVM_VERSION.src"
LLVM_BUILD_DIR="$LLVM_SRC_DIR/native-build"

if [ -e $LLVM_SRC_DIR ]; then
	CLANG_TEST_OPTIONS="-DLLVM_EXTERNAL_LIT=$LLVM_BUILD_DIR/bin/llvm-lit -DCLANG_INCLUDE_TESTS=ON"
else
	CLANG_TEST_OPTIONS=
fi

cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$GCCSDK_INSTALL_ENV" -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_CROSSCOMPILING=ON -DLLVM_TARGETS_TO_BUILD=ARM $CLANG_TEST_OPTIONS ..

cmake --build .

# run unit tests, if built, and ignore any failures.
cmake --build . --target check-all || true

cmake --build . --target install

popd >/dev/null

# Native compiler commented out: it won't work until we add std::wstring to libstdc++.

#mkdir -p riscos-build riscos-env

#pushd . >/dev/null
#cd riscos-build

#cmake -DCMAKE_INSTALL_PREFIX="$PWD/../riscos-env" -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_C_COMPILER="$GCCSDK_INSTALL_ENV/arm-riscos-gnueabihf-gcc" -DCMAKE_CXX_COMPILER="$GCCSDK_INSTALL_ENV/arm-riscos-gnueabihf-g++" -DLLVM_TARGETS_TO_BUILD=ARM ..

#cmake --build .
#cmake --build . --target install

#popd >/dev/null

ab_make () {
  :
}

# LLVM shared lib package commented out until we can build a native Clang.
#ab_package() {
#  ab_create_app LLVM Apps/Development
#
#  ab_create_sharedlib_skeleton libLLVM
#  ab_add_sharedlib $S/riscos-env/lib libLLVM-12.0.1.so
#
#  AB_COMPONENTS=""
#  $AB_HOME/add-riscpkg -package "libLLVM" -name LibLLVM \
#	-section Library -depends SharedLibs
#}
