#
#
# Template for setvars file for autobuilder package
#
# The file can set a number of variables, all of which have defaults
# to perform various actions during the build.  Copy this file to
# a new package directory and delete uneeded parts.


# Where to fetch the souces ?
#  1. Either via CVS:
#AB_CVS_ROOT=
#AB_CVS_MODULE=
#AB_CVS_TAGORBRANCH=
#     Note: consider defining "AB_ZIPNAME=xxx-cvs-$(date +%Y%m%d)" as well.
#
#  2. Either via SVN:
#AB_SVN=
#     Note: consider defining "AB_ZIPNAME=xxx-svn-$(date +%Y%m%d)" as well.
#
#  3. Either via an URL:
#AB_URL=
#
#  4. Either somewhere on a filing system:
#AB_NOREMOTE=yes
#     Note: consider defining "AB_ZIPNAME=xxx-local-$(date +%Y%m%d)" as well.
#
#  And when non of the above is defined, we'll fetch it via apt-get (if
#  available), or via ftp from one of the Debian FTP servers.

# List of man page files, to be processed by rman to make an HTML helpfile
# The produced HTML files will automatically be added to the package.
#AB_MANPAGE=

# RISC OS Version of the package
#AB_ROVERSION=1

# Command in front of invocation of RISC OS GNU configure wrapper.  If you do
# not want this to be called, you could set this var to ":"
#AB_PRECONF=

# Flags to pass to configure in addition to those added by the configure
# wrapper.
#AB_CONFLAGS=

# Continue on, even if the program or library fails to fully compile
# (e.g. example/test apps)
#AB_COMPILEFAIL=no

# Run "make install" (in fact: make $AB_INSTALLTARGET) after build
#AB_INSTALL=no
#   Do not run "ro-make $AB_INSTALLTARGET"
#AB_INSTALL=env
#   Only run "ro-make $AB_INSTALLTARGET" placing results in
#   $GCCSDK_INSTALL_ENV
#AB_INSTALL=yes
#   Run "ro-make $AB_INSTALLTARGET" placing results in $GCCSDK_INSTALL_ENV
#   and do a 2nd "ro-make $AB_INSTALLTARGET" packaging results in a zip/tgz
#   file.

# Use this target as make target to install after build
#AB_INSTALLTARGET=install

# RISC OS configuration script
#AB_CONFIG=$GCCSDK_INSTALL_ENV/ro-config

# Directory where 'configure' should be looked for (when the build
# is 'configure' based)
#RO_CPATH=.

# RISC OS make wrapper.  This can be set to just "make" if setting the
# path causes problems - e.g., the native compiler is required too
#AB_MAKE=$GCCSDK_INSTALL_ENV/ro-make

# Zip name; alternate name for package to be zipped as.  No extension is
# needed. Useful if tools from a library, etc.
#AB_ZIPNAME=

# Name ReadMe should be zipped as.  For example, !Program/!Help,fff
# Don't forget to escape '!' in bash.
#AB_README=ReadMe,fff

# Copy sources into library packages or produce a source zip
# file for other packages "yes" or "no"
# If left blank it will copy the sources if the file COPYING exists
# for libraries, other packages will do nothing unless it is set to
# "yes".
#AB_COPYSOURCE=

# Command to clean the distribution before packaging up the source
# If left blank it defaults to "$AB_MAKE distclean"
#AB_DISTCLEAN=

# List of documents to copy into the library. Files that do not
# exist are ignored
#AB_INSTALLDOCS="README ChangeLog FAQ AUTHORS CHANGES COPYING LICENSE"

# Short description of the library package. Placed into the file
# abshortdesc. If blank it is read from the debian control file.
#AB_SHORTDESC=


# Make function
#
# Define this if you want special actions for make
#
# ab_make () {
#   :
# }

# Package function
#
# You will need to define this to do your packaging.  Its job
# is simply to copy files from the source directory ($S) or package
# script directory ($H) to the destination directory ($D)
#
# ab_package () {
#   :
# }

# Source package function
#
# If AB_COPYSOURCE=yes this function will be called to package
# the source. The default version does uses AB_DISTCLEAN and
# then zips up the result.
# Override it if this is not sufficient for a package
#
# ab_package_source() {
#   (see build-program script for default)
# )

# Create webinfo function
#
# This function is used to create a record in the webinfo directory
# of the packages destination with a description and other details
# about the built package. It is only called if packageing has been
# successful. These details can then be used to create web pages.
#
# The default version checks for the file abwebinfo in the package
# directory and then runs the script build-webinfo which will
# combine the Description from the provided abwebinfo with the
# other fields required, which are calculated from the zip file
# name and other data from the build process.
#
# ab_webinfo() {
#  if [ -e $H/abwebinfo ] ; then
#    . $AB_HOME/build-webinfo
#  fi
# }


# Finally, as this file is executed as a bash script, you can place other
# commands in here.  These will be executed after unpack of the source
# and application of any patches, but before any configuration or build.

