AB_CVS_ROOT=:pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot
# See <URL:http://developer.mozilla.org/en/docs/CVS_Tags> for CVS branch/tag info.
AB_CVS_TAGORBRANCH=MOZILLA_1_8_0_BRANCH
AB_CVS_MODULE=mozilla/client.mk
AB_ZIPNAME=firefox-1.5-$(date +%Y%m%d)

AB_CATEGORY=browser

# 'Official' build:
export MOZILLA_OFFICIAL=1
export BUILD_OFFICIAL=1

# Disable any Autobuilder configure/make.  We drive it all ourselves.
AB_PRECONF=:
AB_MAKE=

ab_make () {
  # Download source:
  $GCCSDK_INSTALL_ENV/ro-make -f client.mk checkout MOZ_CO_PROJECT=browser

  # Patch downloaded source:
  mozilla_patch

  # Run autoconf (because configure.in got changed).  Note that you can *not* use
  # autoconf 2.5x, see Mozilla Build FAQ.
  autoconf
  ( cd nsprpub ; autoconf )

  # Massage our configure scripts and run them:
  $GCCSDK_INSTALL_ENV/ro-config --ro-recurse

  # Start the offical build procedure:
  #We can't call the offical build target because that will rerun configure without all
  #all clever hacks & tricks in $GCCSDK_INSTALL_ENV/ro-config.
  #$GCCSDK_INSTALL_ENV/ro-make -f client.mk build
  $GCCSDK_INSTALL_ENV/ro-make 
}

mozilla_patch () {
  # Apply patches:
  for AB_PATCH in $(find $AB_HOME/$AB_PACKAGEDIR -wholename '*.patch' ) ; do
    echo "Applying RISC OS patch: $AB_PATCH"
    patch -p0 -l < $AB_PATCH || [ "$AB_DEBUG" == "yes" ]
  done

  cp $H/mozconfig $S/.mozconfig

  cp $H/riscos.mk $S/security/coreconf/

  cp $H/xptcstubs_arm_riscos.cpp $S/xpcom/reflect/xptcall/src/md/unix/xptcstubs_arm_riscos.cpp
}

ab_package () {
  cp -pr $H/\!Firefox $D
  for f in \
      firefox-bin,ff8 bloaturls.txt browserconfig.properties dependentlibs.list \
      LICENSE README.txt updater.ini chrome components defaults extensions \
      greprefs plugins res searchplugins \
    ; do
    cp -prL $S/dist/bin/$f $D/!Firefox
  done  
}
