# The build system for libssl doesn't use the autotools, so building both
# a shared version and a static version isn't straight forward. The INSTALL
# file has a note at the bottom about how to support multiple builds. The
# idea is to create a build directory, symlink the source tree into it
# and then build from there. That's what I've done here for static-build
# and shared-build.
# Set Options AB_ROARCH and AB_PKGTESTS (aof building capability unknown)

AB_URL=http://deb.debian.org/debian/pool/main/o/openssl/openssl_1.1.1g.orig.tar.gz

# v4 for Strongarm and later
# choose (arm) architecture  [ v3 | v4 | v6zk ]
AB_ROARCHV=v6zk
AB_ROVERSION=$AB_ROARCHV"-1"
AB_RISCOS_CONF_STATIC="perl Configure --prefix="$GCCSDK_INSTALL_ENV" riscos-arm"$AB_ROARCHV"-static"
AB_RISCOS_CONF_SHARED="perl Configure --prefix="$GCCSDK_INSTALL_ENV" riscos-arm"$AB_ROARCHV"-shared"
#
# Do we want the shared executable testsuite packaged? [ no | yes ]
AB_PKGTESTS=no 
# To package test suite, in 15-riscos.conf "tests" is removed from (shared section) disable => []
# But we may be able to switch the option here for a while with the old Configure option "no-tests"
  if [ "$AB_PKGTESTS" == "no" ] ; then
     AB_RISCOS_CONF_SHARED+=" no-tests"
  fi
echo $AB_RISCOS_CONF_SHARED

AB_ELFBUILD=yes
AB_INSTALL=no

ln -s ssl/ssl.pod doc/ssl.pod
ln -s crypto/crypto.pod doc/crypto.pod
ln -s apps/openssl.pod doc/openssl.pod

AB_CONFIG='make depend'
export RO_SHAREDLIBS=yes
export OPENSSL_SOURCE=$S
   cp $H/15-riscos.conf $S/Configurations
#
# Create directory for static build.
#
  mkdir -p static-build
  cd static-build
  echo $PWD
  (cd $OPENSSL_SOURCE; find . -type f -o -type l) | while read F; do
   if [[ $F != *-build* ]]; then
    mkdir -p `dirname $F`
    ln -s $OPENSSL_SOURCE/$F $F
    echo $F '->' $OPENSSL_SOURCE/$F
   fi
  done

cd $S

#
# Create directory for shared build if required.
#
  if [ "$RO_SHAREDLIBS" == "yes" ] ; then
   mkdir -p shared-build
   cd shared-build
   echo $PWD
   (cd $OPENSSL_SOURCE; find . -type f -o -type l) | while read F; do
    if [[ $F != *-build* ]]; then
      mkdir -p `dirname $F`
      ln -s $OPENSSL_SOURCE/$F $F
      echo $F '->' $OPENSSL_SOURCE/$F
    fi
  done

  cd $S
  fi

ab_make() {

  cd static-build
  if [ "$AB_ELFBUILD" == "yes" ] ; then

# Configuration now done in '15-riscos.conf' except for --prefix and --api

  $AB_RISCOS_CONF_STATIC
  else
    perl Configure --prefix=$GCCSDK_INSTALL_ENV riscos-aof-arm
  fi

  $AB_MAKE -j1
  echo AB_MAKE finished static-build
# the building of man pages and html pages is included with make install (all)
# make install_sw install_ssldirs
  make install
  cd $S

  # The static build has installed all the headers and static libraries,
  # all we have to do here is copy the shared libraries into $GCCSDK_INSTALL_ENV
 
  if [ "$RO_SHAREDLIBS" == "yes" ] ; then
    cd shared-build

  $AB_RISCOS_CONF_SHARED  
  $AB_MAKE -j1
  echo AB_MAKE finished shared-build 

    cp -f libcrypto.so.1.1 $GCCSDK_INSTALL_ENV/lib
    ln -sfT libcrypto.so.1.1 $GCCSDK_INSTALL_ENV/lib/libcrypto.so
    cp -f libssl.so.1.1 $GCCSDK_INSTALL_ENV/lib
    ln -sfT libssl.so.1.1 $GCCSDK_INSTALL_ENV/lib/libssl.so

  # libapps.a and libtestutil.a are wrongly built with -fPIC
   rm apps/app_rand.o apps/apps.o apps/bf_prefix.o apps/opt.o apps/s_cb.o apps/s_socket.o

  if [ "$AB_PKGTESTS" == "yes" ] ; then

   rm test/testutil/*.o test/*.o
  fi

  export LIB_CPPFLAGS="-DL_ENDIAN -D_REENTRANT" && $GCCSDK_INSTALL_ENV/ro-make -e
 
        cd $S
    
  # We have only built build-directory Makefiles but packager expects to
  # find one in the top directory $S for the clean targets.
  ln -s $S/static-build/Makefile $S/Makefile

  fi

  # As installation is not using standard ro-libpack, simulate it here so
  # that Jenkins has something to work with
  pushd . > /dev/null

  cd $GCCSDK_INSTALL_ENV
  RO_PKG=${AB_PACKAGE}_${AB_PVERSION}${AB_TARGET}-${AB_ROVERSION}
  files="include/openssl/* lib/libssl* lib/libcrypto*"
  files="$files lib/pkgconfig/libssl.pc lib/pkgconfig/libcrypto.pc lib/pkgconfig/openssl.pc"
  tar cfvz $AB_OUTPUTLIB/$RO_PKG.tgz $files

  popd > /dev/null
}

add_headers()
{
  local src_header_dir
  local dst_header_dir

  src_header_dir=$1
  dst_header_dir=$2

  HERE=`pwd`
  cd $src_header_dir

  mkdir -p $dst_header_dir/h
  for f in *
  do
    if [ -d "$f" ] ; then
      add_headers $src_header_dir/$f $dst_header_dir/$f
    else
      filename=$(basename "$f")
      extension="${filename##*.}"
      filename="${filename%.*}"
      cp -v -T $f $dst_header_dir/h/$filename
    fi
  done

  cd $HERE
}

ab_package() {
  ab_create_command_app LibSSL Apps/Library libssl-dev

  add_headers $GCCSDK_INSTALL_ENV/include/openssl $A
  cp $S/static-build/*.a $A

  ab_add_commands $S/static-build/apps/openssl$AB_EXEEXT
  # copy the shared executable (keeps e1f type)
  cp $S/shared-build/apps/openssl$AB_EXEEXT $A/openssl-pic$AB_EXEEXT

  if [ "$AB_PKGTESTS" == "yes" ] ; then
   mkdir $A/test-pic
   cd $S/shared-build/test
  # We dont want unrelated tests
   rm build*$AB_EXEEXT *_internal_*$AB_EXEEXT gosttest*$AB_EXEEXT
   cp *$AB_EXEEXT *pem danetest.in ssl_test_ctx_test.conf $A/test-pic
   cp -r recipes d2i-tests certs ct $A/test-pic
  cd $HERE 
   cp $S/apps/server.pem $A/test-pic
   cp $H/run-all-tests $A/test-pic/run-all-tests,feb
  fi

  
  $AB_HOME/add-riscpkg -unixlib -name LibSSL-Dev -copyrightfile LICENSE

  if [ "$RO_SHAREDLIBS" == "yes" ] ; then
    ab_create_sharedlib_skeleton libssl

    AB_COMPONENTS=""

    ab_add_sharedlib $S/shared-build libcrypto.so
    ab_add_sharedlib $S/shared-build libssl.so

    $AB_HOME/add-riscpkg -package libssl -name LibSSL \
	-depends SharedLibs -copyrightfile LICENSE  
  fi
}

