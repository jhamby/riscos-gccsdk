This is a RISC OS port of the base libraries of Qt5.

Installation
------------
Due to the number and size of shared libraries used by Qt5, anything based
on it, will only run on a 32 bit OS (eg, RISC OS 5).

Library dependencies:

libz
libpng12
icu (libicui18n, libicuuc, libicudata)
libfontconfig
libfreetype
libexpat
libssl

Font dependencies (supplied with Qt):

ttf-vera
ttf-dejavu

These are supplied in a form that can be dragged over !UnixFont to install
them. Loading speeds may be improved by issuing the command fc-cache at
the command line (!UnixFC must also have been seen by the filer).
Note, fc-cache appears to be quite slow on a RaspberryPi so be patient.


Usage notes
-----------
Use Select drag with shift held down to resize windows.


Porting notes
-------------
The QChar class consists of a single short int, meaning that sizeof(QChar)
is expected to be 2. This is important when QChar is used in an array;
obviously, this is common when dealing with strings.
In RISC OS QChar is padded to 4 bytes (ie, sizeof (QChar) == 4). To fix
this we use the packed attribute to force the compiler to remove the
padding, but this creates a new problem in the form of a compile time error:

error: cannot bind packed field '((QChar*)this)->QChar::ucs' to 'short unsigned int&'

because the class contains at least one member function that returns a
reference to the enclosed short int:

inline ushort &unicode() { return ucs; }

where ucs is the short int data member.
The solution is to change this to:

inline ushort &unicode() { ushort *ptr = &ucs; return *ptr; }



The main RISC OS specific code is located at src/plugins/platforms/riscos
as a plugin loaded by dlopen (in line with the other platforms).

32bit sprites are used as window backing stores and Qt paints directly
into them. These are then rendered in the WIMP redraw loop of the window
using either osspriteop_put_sprite_user_coords when rendering to a
32bit mode or xosspriteop_put_sprite_scaled when translation is required
to a mode of a different depth.

SSL support depends on the OpenSSL include headers being seen by the
configure tests (specifically, it looks for openssl/opensslv.h).
libssl1.0.0 is listed as a dependency for Qt5Base, so these tests
should always succeed.
At runtime the SSL libraries are loaded via dlopen so they should only
be loaded when actually needed.


Additional RISC OS specfic interfaces
-------------------------------------
class QDynamicArea;

This is a class that provides memory allocation from a dynamic area. Its
main use is for allocating large amounts of memory or when a specific
memory alignment is required.
The libqriscos plugin backend uses this to allocate memory for the
window backing store sprites.
To use it, you must tell the compiler where to find the QtCore header
files if it doesn't already know:

-I$GCCSDK_INSTALL_ENV/QtCore

and then include the header in your source file:

#include <QDynamicArea>

A dynamic area can them be create and used like so:

{
  QDynamicArea *da;
  da = new QDynamicArea("My dynamic area", // Name of DA (max 31 characters)
			50 * 1024 * 1024,  // Maximum size of DA
			4 * 1024);	   // Initial size of DA (min. 4KB)
  da->create();				   // Actually create the DA
  void *ptr;
  ptr = da->alloc(0x1000);		   // Allocate 0x1000 bytes
  
  // Do something with ptr.

  da->free(ptr, 0x1000);		   // Free block
}

It's possible to free only part of a block as long as what you
free is wholly contained within an allocated block.
This is useful in some packages that required a page aligned
block of memory. They do this by allocating twice as much as
they need, identifying the position of the page aligned block
they need and then freeing the surplus at each end.

Known problems/ToDo
-------------------
* On IGEPv5 platforms the red and blue colour components are
switched (need to make the red/blue switching code configurable?).
* The text caret isn't always visible.


Examples known not to work correctly:
widgets/animation/stickman - doesn't respond to key presses
widgets/widgets/tooltips - tooltips don't show


Lee Noar
<leenoar@sky.com>
