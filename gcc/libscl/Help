!Clib - The Shared C Library Header Files
=========================================

This directory contains the necessary header files and object file to
enable programs to use the SharedCLibrary module.

This library is Copyright (c) 1997-2005 Nick Burrett
                Copyright (c) 2005-2006 UnixLib Developers

!Clib is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


Files
-----

All header files are accessible through the path C: or Clib:

All programs must additionally link with the Acorn Object Format (AOF)
file C:o.stubs (or clib:o.stubs).


Installation
------------

Copy the directory !Clib somewhere on your hard disc. Double-clicking on it
will setup the necessary paths, ready for use.

With a slight modification, this library can be used with Easy C and Acorn C.
To do this, you need to obtain the stdarg.h and varargs.h header files
appropriate to your compiler and copy them into !clib.h.stdarg and
!clib.h.varargs. You must also copy the definition of va_list and put it
towards the start of !clib.h.stdio, renaming va_list to __va_list.


Using the SharedCLibrary library
--------------------------------

For general use, all that is needed is an extra command line option to GCC:
  -mlibscl

GCC however contains its own copy of this library and UnixLib, so this
application is not required.

The following commands will compile the file c.hellow:
  *gcc -c hellow.c -O2 -mlibscl
  *gcc -o hellow hellow.o -mlibscl


Filename translation for the Shared C Library
---------------------------------------------
             
The Shared C Library does not benefit from UnixLib's filename translation
code by default.  However, defining the symbol __RISCOSIFY before you include
stdio.h will cause remove(), rename(), fopen() and freopen() to use the UnixLib
filename translation code on the filenames supplied as arguments to those
functions.

See the GCC and UnixLib documentation for instructions on how to use the
filename translation code, especially the fancy options.

The origial version of this using the old 'uname' funtions was done by
Reuben Thomas, and updated by Peter Naulls to use the modern 'riscosify'
code in UnixLib.


Known problems with the filename translation code
-------------------------------------------------

If you use command-line redirection of stdin and stdout, the filenames used
for redirection are not translated. If this is important, use UnixLib.
