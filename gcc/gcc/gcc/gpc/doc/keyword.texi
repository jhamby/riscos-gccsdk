@c Generated automatically from gpc.gperf
@c DO NOT CHANGE THIS FILE MANUALLY!

@table @asis
@item absolute (BP, BD, GPC) (@pxref{absolute})
@cindex absolute
overloaded variable declaration
@item abstract (OP, GPC) (@pxref{abstract})
@cindex abstract
abstract object type declaration (not yet implemented)
@item all (GPC) (@pxref{all})
@cindex all
@samp{export} (@pxref{export}) extension (@samp{export foo = all})
@item and (any) (@pxref{and})
@cindex and
Boolean or bitwise @samp{and} operator or part of the @samp{and then} (@pxref{and then}) operator
@item and_then (EP, OP, GPC) (@pxref{and_then})
@cindex and_then
short-circuit Boolean @samp{and} (@pxref{and}) operator
@item array (any) (@pxref{array})
@cindex array
array type declaration
@item asm (BP, BD, GPC) (@pxref{asm})
@cindex asm
GNU style inline assembler code
@item asmname (GPC) (@pxref{asmname})
@cindex asmname
linker name of routines and variables
@item attribute (GPC) (@pxref{attribute})
@cindex attribute
attributes of routines and variables
@item begin (any) (@pxref{begin})
@cindex begin
begin of a code block, part of a @samp{to begin do} (@pxref{to begin do}) module constructor
@item bindable (EP, OP, GPC) (@pxref{bindable})
@cindex bindable
external binding of files
@item case (any) (@pxref{case})
@cindex case
multi-branch conditional statement or variant record type
@item class (OP, BD, GPC) (@pxref{class})
@cindex class
OOE/Delphi style object classes (not yet implemented)
@item const (any) (@pxref{const})
@cindex const
constant declaration or constant parameter declaration
@item constructor (OP, BP, BD, GPC) (@pxref{constructor})
@cindex constructor
object constructor
@item destructor (OP, BP, BD, GPC) (@pxref{destructor})
@cindex destructor
object destructor
@item div (any) (@pxref{div})
@cindex div
integer or real division operator
@item do (any) (@pxref{do})
@cindex do
part of a @samp{while} (@pxref{while}) or @samp{for} (@pxref{for}) loop, a @samp{with} (@pxref{with}) statement, or a @samp{to begin do} (@pxref{to begin do}) or @samp{to end do} (@pxref{to end do}) module constructor or destructor
@item downto (any) (@pxref{downto})
@cindex downto
part of a @samp{for} (@pxref{for}) loop when counting downwards
@item else (any) (@pxref{else})
@cindex else
alternative part of an @samp{if} (@pxref{if}) statement, default case label or part of the @samp{or else} (@pxref{or else}) operator
@item end (any) (@pxref{end})
@cindex end
end of a code block, end of a @samp{case} (@pxref{case}) statement, end of a record or object declaration, part of a @samp{to end do} (@pxref{to end do}) module destructor
@item export (EP, OP, BP, BD, GPC) (@pxref{export})
@cindex export
module interface export
@item exports (BP, BD, GPC) (@pxref{exports})
@cindex exports
library export (not yet implemented)
@item external (EP, OP, UCSD, BP, BD, GPC) (@pxref{external})
@cindex external
declaration of external objects
@item file (any) (@pxref{file})
@cindex file
non-text file type declaration
@item for (any) (@pxref{for})
@cindex for
loop statement where the number of loops is known in advance
@item forward (UCSD, BP, BD, GPC) (@pxref{forward})
@cindex forward
declaration of a routine whose definition follows below
@item function (any) (@pxref{function})
@cindex function
function declaration
@item goto (any) (@pxref{goto})
@cindex goto
statement to jump to a @samp{label} (@pxref{label})
@item if (any) (@pxref{if})
@cindex if
conditional statement
@item import (EP, OP, GPC) (@pxref{import})
@cindex import
module interface import
@item implementation (EP, OP, UCSD, BP, BD, GPC) (@pxref{implementation})
@cindex implementation
module or unit implementation part
@item in (any) (@pxref{in})
@cindex in
set membership test or part of a @samp{for} (@pxref{for}) loop when iterating through sets
@item inherited (OP, BP, BD, GPC) (@pxref{inherited})
@cindex inherited
reference to methods of ancestor object types
@item inline (GPC) (@pxref{inline})
@cindex inline
declaration of inline routines
@item interface (EP, OP, UCSD, BP, BD, GPC) (@pxref{interface})
@cindex interface
module or unit interface part
@item interrupt (BP, BD) (@pxref{interrupt})
@cindex interrupt
interrupt handler declaration (not yet implemented)
@item is (OP, BD, GPC) (@pxref{is})
@cindex is
object type membership test (not yet implemented)
@item label (any) (@pxref{label})
@cindex label
label declaration for a @samp{goto} (@pxref{goto}) statement
@item library (BP, BD, GPC) (@pxref{library})
@cindex library
library declaration (not yet implemented)
@item mod (any) (@pxref{mod})
@cindex mod
integer remainder operator
@item module (EP, OP, GPC) (@pxref{module})
@cindex module
EP style or PXSC style (only partially implemented) modules
@item nil (any) (@pxref{nil})
@cindex nil
reserved value for unassigned pointers
@item not (any) (@pxref{not})
@cindex not
Boolean or bitwise @samp{not} operator
@item object (BP, BD, GPC) (@pxref{object})
@cindex object
BP style object declaration
@item of (any) (@pxref{of})
@cindex of
part of an array, set or typed file type declaration, a @samp{case} (@pxref{case}) statement, a variant record type or a @samp{type of} (@pxref{type of}) type inquiry
@item only (EP, OP, GPC) (@pxref{only})
@cindex only
import specification
@item operator (PXSC, GPC) (@pxref{operator})
@cindex operator
operator declaration
@item or (any) (@pxref{or})
@cindex or
Boolean or bitwise @samp{or} operator or part of the @samp{or else} (@pxref{or else}) operator
@item or_else (EP, OP, GPC) (@pxref{or_else})
@cindex or_else
short-circuit Boolean @samp{or} (@pxref{or}) operator
@item otherwise (EP, OP, GPC) (@pxref{otherwise})
@cindex otherwise
default case label
@item packed (any) (@pxref{packed})
@cindex packed
declaration of packed record or array types, also packed ordinal subranges
@item pow (EP, OP, GPC) (@pxref{pow})
@cindex pow
exponentiation operator with integer exponent
@item private (BP, BD, GPC) (@pxref{private})
@cindex private
private object fields
@item procedure (any) (@pxref{procedure})
@cindex procedure
procedure declaration
@item program (any) (@pxref{program})
@cindex program
start of a Pascal program
@item property (OP, BD, GPC) (@pxref{property})
@cindex property
variable properties (not yet implemented)
@item protected (EP, OP, BD, GPC) (@pxref{protected})
@cindex protected
read-only formal parameters and protected object fields
@item public (BP, BD, GPC) (@pxref{public})
@cindex public
public object fields
@item published (BP, BD, GPC) (@pxref{published})
@cindex published
published object fields
@item qualified (EP, OP, GPC) (@pxref{qualified})
@cindex qualified
import specification
@item record (any) (@pxref{record})
@cindex record
structured type declaration
@item repeat (any) (@pxref{repeat})
@cindex repeat
loop statement
@item resident (BP, BD) (@pxref{resident})
@cindex resident
library export specification (not yet implemented)
@item restricted (EP, OP, GPC) (@pxref{restricted})
@cindex restricted
type specification
@item segment (UCSD) (@pxref{segment})
@cindex segment
segment specification (not yet implemented)
@item set (any) (@pxref{set})
@cindex set
set type declaration
@item shl (BP, BD, GPC) (@pxref{shl})
@cindex shl
bitwise left shift operator
@item shr (BP, BD, GPC) (@pxref{shr})
@cindex shr
bitwise right shift operator
@item static (GPC) (@pxref{static})
@cindex static
static variable declaration
@item then (any) (@pxref{then})
@cindex then
part of an @samp{if} (@pxref{if}) statement or part of the @samp{and then} (@pxref{and then}) operator
@item to (any) (@pxref{to})
@cindex to
part of a @samp{for} (@pxref{for}) loop when counting upwards or a @samp{to begin do} (@pxref{to begin do}) or @samp{to end do} (@pxref{to end do}) module constructor or destructor
@item type (any) (@pxref{type})
@cindex type
type declaration or part of a @samp{type of} (@pxref{type of}) type inquiry
@item unit (UCSD, BP, BD, GPC) (@pxref{unit})
@cindex unit
UCSD and BP style unit declaration
@item until (any) (@pxref{until})
@cindex until
end of a @samp{repeat} (@pxref{repeat}) statement
@item uses (UCSD, BP, BD, GPC) (@pxref{uses})
@cindex uses
unit import
@item value (EP, OP, GPC) (@pxref{value})
@cindex value
variable initializer
@item var (any) (@pxref{var})
@cindex var
variable declaration or reference parameter declaration
@item view (OP, GPC) (@pxref{view})
@cindex view
object class view (not yet implemented)
@item virtual (OP, BP, BD, GPC) (@pxref{virtual})
@cindex virtual
virtual object method declaration
@item volatile (GPC) (@pxref{volatile})
@cindex volatile
volatile variable declaration
@item while (any) (@pxref{while})
@cindex while
loop statement
@item with (any) (@pxref{with})
@cindex with
automatic record or object field access
@item xor (BP, BD, GPC) (@pxref{xor})
@cindex xor
Boolean or bitwise @samp{exclusive or} operator
@end table
