--- /home/nick/riscos/masters/gcc-3.4/gcc/function.c	2004-06-18 15:55:43.119768752 +0100
+++ function.c	2004-06-18 16:59:55.613100744 +0100
@@ -5716,6 +5716,11 @@ uninitialized_vars_warning (tree block)
 	  && regno_uninitialized (REGNO (DECL_RTL (decl))))
 	warning ("%J'%D' might be used uninitialized in this function",
 		 decl, decl);
+
+#ifndef TARGET_RISCOSAOF
+      /* NAB++ Disable this warning because it gives splurious messages when
+         compiling C++ applications due to our use of setjmp/longjmp
+         exception handling.  */
       if (extra_warnings
 	  && TREE_CODE (decl) == VAR_DECL
 	  && DECL_RTL_SET_P (decl)
@@ -5723,6 +5728,7 @@ uninitialized_vars_warning (tree block)
 	  && regno_clobbered_at_setjmp (REGNO (DECL_RTL (decl))))
 	warning ("%Jvariable '%D' might be clobbered by `longjmp' or `vfork'",
 		 decl, decl);
+#endif
     }
   for (sub = BLOCK_SUBBLOCKS (block); sub; sub = TREE_CHAIN (sub))
     uninitialized_vars_warning (sub);
@@ -5734,6 +5740,8 @@ uninitialized_vars_warning (tree block)
 void
 setjmp_args_warning (void)
 {
+  /* NAB++ Similarily here.  */
+#ifndef TARGET_RISCOSAOF
   tree decl;
   for (decl = DECL_ARGUMENTS (current_function_decl);
        decl; decl = TREE_CHAIN (decl))
@@ -5742,6 +5750,7 @@ setjmp_args_warning (void)
 	&& regno_clobbered_at_setjmp (REGNO (DECL_RTL (decl))))
       warning ("%Jargument '%D' might be clobbered by `longjmp' or `vfork'",
 	       decl, decl);
+#endif
 }
 
 /* If this function call setjmp, put all vars into the stack
