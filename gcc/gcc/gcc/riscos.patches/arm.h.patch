--- /home/nick/riscos/masters/gcc-3.4/gcc/config/arm/arm.h	2004-03-09 02:59:54.000000000 +0000
+++ config/arm/arm.h	2004-06-18 15:11:02.168335320 +0100
@@ -1100,13 +1100,17 @@ extern const char * structure_size_strin
 #define ARM_HARD_FRAME_POINTER_REGNUM	11
 #define THUMB_HARD_FRAME_POINTER_REGNUM	 7
 
+#ifdef TARGET_RISCOSAOF
+#define FP_REGNUM			ARM_HARD_FRAME_POINTER_REGNUM
+#undef HARD_FRAME_POINTER_REGNUM
+#else
+#define FP_REGNUM	                HARD_FRAME_POINTER_REGNUM
+
 #define HARD_FRAME_POINTER_REGNUM		\
   (TARGET_ARM					\
    ? ARM_HARD_FRAME_POINTER_REGNUM		\
    : THUMB_HARD_FRAME_POINTER_REGNUM)
-
-#define FP_REGNUM	                HARD_FRAME_POINTER_REGNUM
-
+#endif
 /* Register to use for pushing function arguments.  */
 #define STACK_POINTER_REGNUM	SP_REGNUM
 
@@ -1124,10 +1128,18 @@ extern const char * structure_size_strin
   (((REGNUM) >= FIRST_IWMMXT_GR_REGNUM) && ((REGNUM) <= LAST_IWMMXT_GR_REGNUM))
 
 /* Base register for access to local variables of the function.  */
+#ifdef TARGET_RISCOSAOF
+#define FRAME_POINTER_REGNUM	9
+#else
 #define FRAME_POINTER_REGNUM	25
+#endif
 
 /* Base register for access to arguments of the function.  */
+#ifdef TARGET_RISCOSAOF
+#define ARG_POINTER_REGNUM	ARM_HARD_FRAME_POINTER_REGNUM
+#else
 #define ARG_POINTER_REGNUM	26
+#endif
 
 #define FIRST_CIRRUS_FP_REGNUM	27
 #define LAST_CIRRUS_FP_REGNUM	42
@@ -1145,9 +1157,14 @@ extern const char * structure_size_strin
    If we have to have a frame pointer we might as well make use of it.
    APCS says that the frame pointer does not need to be pushed in leaf
    functions, or simple tail call functions.  */
+#ifdef TARGET_RISCOSAOF
+#undef FRAME_POINTER_REQUIRED
+#define FRAME_POINTER_REQUIRED 0
+#else
 #define FRAME_POINTER_REQUIRED					\
   (current_function_has_nonlocal_label				\
    || (TARGET_ARM && TARGET_APCS_FRAME && ! leaf_function_p ()))
+#endif
 
 /* Return number of consecutive hard regs needed starting at reg REGNO
    to hold something of mode MODE.
@@ -1159,8 +1176,8 @@ extern const char * structure_size_strin
 #define HARD_REGNO_NREGS(REGNO, MODE)  	\
   ((TARGET_ARM 				\
     && REGNO >= FIRST_ARM_FP_REGNUM	\
-    && REGNO != FRAME_POINTER_REGNUM	\
-    && REGNO != ARG_POINTER_REGNUM)	\
+    && (! TARGET_APCS_STACK && REGNO != FRAME_POINTER_REGNUM)	\
+    && (! TARGET_APCS_STACK && REGNO != ARG_POINTER_REGNUM))	\
    ? 1 : ARM_NUM_REGS (MODE))
 
 /* Return true if REGNO is suitable for holding a quantity of type MODE.  */
@@ -1554,13 +1571,21 @@ enum reg_class
    is at the high-address end of the local variables;
    that is, each additional local variable allocated
    goes at a more negative offset in the frame.  */
+#ifdef TARGET_RISCOSAOF
+#undef FRAME_GROWS_DOWNWARD
+#else
 #define FRAME_GROWS_DOWNWARD 1
+#endif
 
 /* Offset within stack frame to start allocating local variables at.
    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the
    first local allocated.  Otherwise, it is the offset to the BEGINNING
    of the first local allocated.  */
+#ifdef TARGET_RISCOSAOF
+#define STARTING_FRAME_OFFSET   (current_function_outgoing_args_size)
+#else
 #define STARTING_FRAME_OFFSET  0
+#endif
 
 /* If we generate an insn to push BYTES bytes,
    this says how many the stack pointer really advances by.  */
@@ -1685,6 +1710,12 @@ typedef struct machine_function GTY(())
   /* Records if sibcalls are blocked because an argument
      register is needed to preserve stack alignment.  */
   int sibcall_blocked;
+  /* NAB++ */
+  /* Non-zero if this is a leaf function.  */
+  int leaf;
+  /* Non-zero if this function calls __builtin_apply.  */
+  int apply_args;
+  /* NAB-- */
 }
 machine_function;
 
@@ -1882,6 +1913,11 @@ typedef struct
    pointer.  Note we have to use {ARM|THUMB}_HARD_FRAME_POINTER_REGNUM
    because the definition of HARD_FRAME_POINTER_REGNUM is not a constant.  */
 
+#ifdef TARGET_RISCOSAOF
+#define ELIMINABLE_REGS                                         \
+{{ ARG_POINTER_REGNUM,        STACK_POINTER_REGNUM            },\
+ { FRAME_POINTER_REGNUM,      STACK_POINTER_REGNUM            }}
+#else
 #define ELIMINABLE_REGS						\
 {{ ARG_POINTER_REGNUM,        STACK_POINTER_REGNUM            },\
  { ARG_POINTER_REGNUM,        FRAME_POINTER_REGNUM            },\
@@ -1890,21 +1926,11 @@ typedef struct
  { FRAME_POINTER_REGNUM,      STACK_POINTER_REGNUM            },\
  { FRAME_POINTER_REGNUM,      ARM_HARD_FRAME_POINTER_REGNUM   },\
  { FRAME_POINTER_REGNUM,      THUMB_HARD_FRAME_POINTER_REGNUM }}
+#endif
 
 /* Given FROM and TO register numbers, say whether this elimination is
-   allowed.  Frame pointer elimination is automatically handled.
-
-   All eliminations are permissible.  Note that ARG_POINTER_REGNUM and
-   HARD_FRAME_POINTER_REGNUM are in fact the same thing.  If we need a frame
-   pointer, we must eliminate FRAME_POINTER_REGNUM into
-   HARD_FRAME_POINTER_REGNUM and not into STACK_POINTER_REGNUM or
-   ARG_POINTER_REGNUM.  */
-#define CAN_ELIMINATE(FROM, TO)						\
-  (((TO) == FRAME_POINTER_REGNUM && (FROM) == ARG_POINTER_REGNUM) ? 0 :	\
-   ((TO) == STACK_POINTER_REGNUM && frame_pointer_needed) ? 0 :		\
-   ((TO) == ARM_HARD_FRAME_POINTER_REGNUM && TARGET_THUMB) ? 0 :	\
-   ((TO) == THUMB_HARD_FRAME_POINTER_REGNUM && TARGET_ARM) ? 0 :	\
-   1)
+   allowed.  Frame pointer elimination is automatically handled.  */
+#define CAN_ELIMINATE(FROM, TO)	arm_can_eliminate ((FROM), (TO))
 
 #define THUMB_REG_PUSHED_P(reg)					\
   (regs_ever_live [reg]						\
@@ -2064,8 +2090,8 @@ typedef struct
 /*   On the ARM, don't allow the pc to be used.  */
 #define ARM_REGNO_OK_FOR_BASE_P(REGNO)			\
   (TEST_REGNO (REGNO, <, PC_REGNUM)			\
-   || TEST_REGNO (REGNO, ==, FRAME_POINTER_REGNUM)	\
-   || TEST_REGNO (REGNO, ==, ARG_POINTER_REGNUM))
+   || (! TARGET_APCS_STACK && TEST_REGNO (REGNO, ==, FRAME_POINTER_REGNUM)) \
+   || (! TARGET_APCS_STACK && TEST_REGNO (REGNO, ==, ARG_POINTER_REGNUM)))
 
 #define THUMB_REGNO_MODE_OK_FOR_BASE_P(REGNO, MODE)		\
   (TEST_REGNO (REGNO, <=, LAST_LO_REGNUM)			\
@@ -2168,8 +2194,8 @@ typedef struct
 #define ARM_REG_OK_FOR_BASE_P(X)		\
   (REGNO (X) <= LAST_ARM_REGNUM			\
    || REGNO (X) >= FIRST_PSEUDO_REGISTER	\
-   || REGNO (X) == FRAME_POINTER_REGNUM		\
-   || REGNO (X) == ARG_POINTER_REGNUM)
+   || (! TARGET_APCS_STACK && REGNO (X) == FRAME_POINTER_REGNUM) \
+   || (! TARGET_APCS_STACK && REGNO (X) == ARG_POINTER_REGNUM))
 
 #define THUMB_REG_MODE_OK_FOR_BASE_P(X, MODE)	\
   (REGNO (X) <= LAST_LO_REGNUM			\
@@ -2635,6 +2661,17 @@ extern int making_const_table;
 	asm_fprintf (STREAM, "%r", 					\
 		     REGNO (XEXP (XEXP (X, 1), 1)));			\
     }									\
+  else if (GET_CODE (X) == SYMBOL_REF && TARGET_APCS_STACK)		\
+    {									\
+      /* Convert setjmp and longjmp to alternative names for		\
+         extra processing.  */						\
+      if (strcmp (XSTR (X, 0), "setjmp") == 0)				\
+        assemble_name (STREAM, "___arm_alloca_setjmp");			\
+      else if (strcmp (XSTR (X, 0), "longjmp") == 0)			\
+        assemble_name (STREAM, "___arm_alloca_longjmp");		\
+      else								\
+        assemble_name (STREAM, XSTR (X, 0));				\
+    }									\
   else output_addr_const (STREAM, X);					\
 }
 
