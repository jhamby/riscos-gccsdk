; Generated by gcc egcs-2.90.01 970821 (gcc2-970802 experimental) for ARM/RISC OS
__a1	RN	0
__a2	RN	1
__a3	RN	2
__a4	RN	3
__v1	RN	4
__v2	RN	5
__v3	RN	6
__v4	RN	7
__v5	RN	8
__v6	RN	9
__sl	RN	10
__fp	RN	11
__ip	RN	12
__sp	RN	13
__lr	RN	14
__pc	RN	15
__f0	FN	0
__f1	FN	1
__f2	FN	2
__f3	FN	3
__f4	FN	4
__f5	FN	5
__f6	FN	6
__f7	FN	7
	AREA |C$$code1|, CODE, READONLY
; GNU C version egcs-2.90.01 970821 (gcc2-970802 experimental) (arm-riscos) compiled by CC.
; options passed:  -O2
; options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
; -fexpensive-optimizations -fthread-jumps -fstrength-reduce -fpeephole
; -fforce-mem -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
; -freg-struct-return -frerun-cse-after-loop -fschedule-insns
; -fschedule-insns2 -fexceptions -fsjlj-exceptions -fcommon -fverbose-asm
; -fgnu-linker -fregmove -falias-check -fargument-alias -mapcs -mapcs-frame
; -mpoke-function-name -mapcs-stack-check

|gcc2_compiled.|
	IMPORT	|__gccmain|
	ALIGN
|LC..0|
	DCB &54, &41, &4b, &28
	DCB &25, &64, &2c, &25
	DCB &64, &2c, &25, &64
	DCB &29, &20, &3d, &20
	DCB &25, &64, &0a, &00
	ALIGN
|LC..1|
	DCB &54, &69, &6d, &65
	DCB &20, &3d, &20, &25
	DCB &64, &0a, &00
	ALIGN
	EXPORT	|main|
|main|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __v3, __v4, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	mov	__v1, __a1
	mov	__v4, __a2
	bl	|__gccmain|
	sub	__v1, __v1, #1
	cmp	__v1, #2
	bls	|L..2|
	ldr	__a1, [__v4, #4]
	mov	__a3, #10
	mov	__a2, #0
	bl	|strtol|
	mov	__v3, __a1
	ldr	__a1, [__v4, #8]
	mov	__a3, #10
	mov	__a2, #0
	bl	|strtol|
	mov	__v2, __a1
	ldr	__a1, [__v4, #12]
	mov	__a3, #10
	mov	__a2, #0
	bl	|strtol|
	fltd	__f1, __v2
	mov	__v1, __a1
	fltd	__f0, __v1
	stfd	__f1, [__sp, #-8]!
	ldmfd	__sp!, {__a3, __a4}
	stfd	__f0, [__sp, #-8]!
	fltd	__f1, __v3
	stfd	__f1, [__sp, #-8]!
	ldmfd	__sp!, {__a1, __a2}
	bl	|tak|
	fixz	__a4, __f0
	str	__a4, [__sp, #-4]!
	ldr	__a1, |L..4|
	mov	__a3, __v2
	mov	__a2, __v3
	mov	__a4, __v1
	bl	|printf|
	bl	|clock|
	mov	__a2, __a1
	ldr	__a1, |L..4|+4
	bl	|printf|
	mov	__a1, #0
	ldmea	__fp, {__v1, __v2, __v3, __v4, __fp, __sp, __pc}^
|L..2|
	mov	__a1, #0
	ldmea	__fp, {__v1, __v2, __v3, __v4, __fp, __sp, __pc}^
|L..5|
	ALIGN
|L..4|
	DCD	|LC..0|
	DCD	|LC..1|
	ALIGN
	EXPORT	|tak|
|tak|
	; args = 8, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __v3, __v4, __fp, __ip, __lr, __pc}
	stfe	__f6, [__sp, #-12]!
	stfe	__f5, [__sp, #-12]!
	stfe	__f4, [__sp, #-12]!
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	ldfd	__f5, [__fp, #4]
	stmfd	__sp!, {__a1, __a2}
	ldfd	__f6, [__sp], #8
	stmfd	__sp!, {__a3, __a4}
	ldfd	__f4, [__sp], #8
|L..9|
	cmfe	__f4, __f6
	bge	|L..7|
	stfd	__f5, [__sp, #-8]!
	stfd	__f4, [__sp, #-8]!
	ldmfd	__sp!, {__a3, __a4}
	sufd	__f1, __f6, #1
	stfd	__f1, [__sp, #-8]!
	ldmfd	__sp!, {__a1, __a2}
	bl	|tak|
	stfd	__f6, [__sp, #-8]!
	stfd	__f0, [__sp, #-8]!
	ldmfd	__sp!, {__v3, __v4}
	stfd	__f5, [__sp, #-8]!
	ldmfd	__sp!, {__a3, __a4}
	sufd	__f1, __f4, #1
	stfd	__f1, [__sp, #-8]!
	ldmfd	__sp!, {__a1, __a2}
	bl	|tak|
	stfd	__f4, [__sp, #-8]!
	stfd	__f0, [__sp, #-8]!
	ldmfd	__sp!, {__v1, __v2}
	stfd	__f6, [__sp, #-8]!
	ldmfd	__sp!, {__a3, __a4}
	sufd	__f5, __f5, #1
	stfd	__f5, [__sp, #-8]!
	ldmfd	__sp!, {__a1, __a2}
	bl	|tak|
	stmfd	__sp!, {__v3, __v4}
	ldfd	__f6, [__sp], #8
	stmfd	__sp!, {__v1, __v2}
	ldfd	__f4, [__sp], #8
	mvfd	__f5, __f0
	add	__sp, __sp, #24
	b	|L..9|
|L..7|
	mvfd	__f0, __f5
	ldfe	__f6, [__fp, #-40]
	ldfe	__f5, [__fp, #-52]
	ldfe	__f4, [__fp, #-64]
	ldmea	__fp, {__v1, __v2, __v3, __v4, __fp, __sp, __pc}^
	IMPORT __main
	DCD __main
	IMPORT	|clock|
	IMPORT	|printf|
	IMPORT	|strtol|
	END
