; Generated by gcc egcs-2.90.01 970821 (gcc2-970802 experimental) for ARM/RISC OS
__a1	RN	0
__a2	RN	1
__a3	RN	2
__a4	RN	3
__v1	RN	4
__v2	RN	5
__v3	RN	6
__v4	RN	7
__v5	RN	8
__v6	RN	9
__sl	RN	10
__fp	RN	11
__ip	RN	12
__sp	RN	13
__lr	RN	14
__pc	RN	15
__f0	FN	0
__f1	FN	1
__f2	FN	2
__f3	FN	3
__f4	FN	4
__f5	FN	5
__f6	FN	6
__f7	FN	7
	AREA |C$$code1|, CODE, READONLY
; GNU C++ version egcs-2.90.01 970821 (gcc2-970802 experimental) (arm-riscos) compiled by CC.
; options passed:  -O2
; options enabled:  -fdefer-pop -fomit-frame-pointer -fcse-follow-jumps
; -fcse-skip-blocks -fexpensive-optimizations -fthread-jumps
; -fstrength-reduce -fpeephole -fforce-mem -ffunction-cse -finline
; -fkeep-static-consts -fcaller-saves -freg-struct-return
; -frerun-cse-after-loop -fschedule-insns -fschedule-insns2 -fexceptions
; -fsjlj-exceptions -fcommon -fverbose-asm -fgnu-linker -fregmove
; -falias-check -fargument-alias -mapcs -mapcs-frame -mpoke-function-name
; -mapcs-stack-check

|gcc2_compiled.|
	EXPORT	|ip|
	AREA |C$$data1|, DATA
	ALIGN
|ip|
	%	12
	AREA |C$$code2|, CODE, READONLY
	ALIGN
	EXPORT	|f__FRt5stack1Zi|
	DCB &66, &5f, &5f, &46
	DCB &52, &74, &35, &73
	DCB &74, &61, &63, &6b
	DCB &31, &5a, &69, &00
	ALIGN
	DCD	-16777200
|f__FRt5stack1Zi|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __v3, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	mov	__v1, __a1
	mov	__a2, #10
	bl	|push__t5stack1Zii|
	mov	__a1, __v1
	bl	|pop__t5stack1Zi|
	mov	__a1, #12
	bl	|__builtin_new|
	mov	__a2, #800
	bl	|__t5stack1Zci|
	mov	__v1, #0
	mov	__v3, #396
	add	__v3, __v3, #3
	mov	__v2, __a1
|L..5|
	mov	__a1, __v2
	and	__a2, __v1, #255
	bl	|push__t5stack1Zcc|
	add	__v1, __v1, #1
	cmp	__v1, __v3
	ble	|L..5|
	ldmea	__fp, {__v1, __v2, __v3, __fp, __sp, __pc}^
	IMPORT	|__gccmain|
	ALIGN
|LC..0|
	DCB &49, &74, &20, &77
	DCB &6f, &72, &6b, &65
	DCB &64, &0a, &00
	ALIGN
	EXPORT	|main|
	DCB &6d, &61, &69, &6e
	DCB &00
	ALIGN
	DCD	-16777208
|main|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	bl	|__gccmain|
	ldr	__a1, |L..9|
	bl	|f__FRt5stack1Zi|
	ldr	__a1, |L..9|+4
	bl	|printf|
	mov	__a1, #0
	ldmea	__fp, {__fp, __sp, __pc}^
|L..10|
	ALIGN
|L..9|
	DCD	|ip|
	DCD	|LC..0|
	ALIGN
	DCB &70, &75, &73, &68
	DCB &5f, &5f, &74, &35
	DCB &73, &74, &61, &63
	DCB &6b, &31, &5a, &69
	DCB &69, &00
	ALIGN
	DCD	-16777196
|push__t5stack1Zii|
	KEEP |push__t5stack1Zii|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	ldr	__a4, [__a1, #4]
	str	__a2, [__a4], #4
	str	__a4, [__a1, #4]
	movs	__pc, __lr
	ALIGN
	DCB &70, &6f, &70, &5f
	DCB &5f, &74, &35, &73
	DCB &74, &61, &63, &6b
	DCB &31, &5a, &69, &00
	ALIGN
	DCD	-16777200
|pop__t5stack1Zi|
	KEEP |pop__t5stack1Zi|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	ldr	__a3, [__a1, #4]
	sub	__a4, __a3, #4
	str	__a4, [__a1, #4]
	ldr	__a1, [__a3, #-4]
	movs	__pc, __lr
	ALIGN
	DCB &5f, &5f, &74, &35
	DCB &73, &74, &61, &63
	DCB &6b, &31, &5a, &63
	DCB &69, &00
	ALIGN
	DCD	-16777200
|__t5stack1Zci|
	KEEP |__t5stack1Zci|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	mov	__v1, __a1
	str	__a2, [__v1, #8]
	mov	__a1, __a2
	bl	|__builtin_vec_new|
	str	__a1, [__v1, #4]
	str	__a1, [__v1, #0]
	mov	__a1, __v1
	ldmea	__fp, {__v1, __fp, __sp, __pc}^
	ALIGN
	DCB &70, &75, &73, &68
	DCB &5f, &5f, &74, &35
	DCB &73, &74, &61, &63
	DCB &6b, &31, &5a, &63
	DCB &63, &00
	ALIGN
	DCD	-16777196
|push__t5stack1Zcc|
	KEEP |push__t5stack1Zcc|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	ldr	__a4, [__a1, #4]
	strb	__a2, [__a4], #1
	str	__a4, [__a1, #4]
	movs	__pc, __lr
	ALIGN
	DCB &5f, &24, &5f, &74
	DCB &35, &73, &74, &61
	DCB &63, &6b, &31, &5a
	DCB &69, &00
	ALIGN
	DCD	-16777200
|_$_t5stack1Zi|
	KEEP |_$_t5stack1Zi|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	mov	__v1, __a1
	ldr	__a1, [__v1, #0]
	mov	__v2, __a2
	cmp	__a1, #0
	blne	|__builtin_vec_delete|
|L..22|
	tst	__v2, #1
	movne	__a1, __v1
	ldmeqea	__fp, {__v1, __v2, __fp, __sp, __pc}^
	ldmea	__fp, {__v1, __v2, __fp, __sp, __lr}
	b	|__builtin_delete|
	ALIGN
	EXPORT	|_GLOBAL_$D$ip|
	DCB &5f, &47, &4c, &4f
	DCB &42, &41, &4c, &5f
	DCB &24, &44, &24, &69
	DCB &70, &00
	ALIGN
	DCD	-16777200
|_GLOBAL_$D$ip|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	; I don't think this function clobbers lr
	ldr	__a1, |L..25|
	mov	__a2, #2
	b	|_$_t5stack1Zi|
|L..26|
	ALIGN
|L..25|
	DCD	|ip|
	AREA	|C$$gnu_dtorsvec|, DATA, READONLY
	DCD	|_GLOBAL_$D$ip|
	AREA |C$$code3|, CODE, READONLY
	ALIGN
	DCB &5f, &5f, &74, &35
	DCB &73, &74, &61, &63
	DCB &6b, &31, &5a, &69
	DCB &69, &00
	ALIGN
	DCD	-16777200
|__t5stack1Zii|
	KEEP |__t5stack1Zii|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	mov	__v1, __a1
	str	__a2, [__v1, #8]
	mov	__a1, __a2, asl #2
	bl	|__builtin_vec_new|
	str	__a1, [__v1, #4]
	str	__a1, [__v1, #0]
	mov	__a1, __v1
	ldmea	__fp, {__v1, __fp, __sp, __pc}^
	ALIGN
	EXPORT	|_GLOBAL_$I$ip|
	DCB &5f, &47, &4c, &4f
	DCB &42, &41, &4c, &5f
	DCB &24, &49, &24, &69
	DCB &70, &00
	ALIGN
	DCD	-16777200
|_GLOBAL_$I$ip|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	; I don't think this function clobbers lr
	ldr	__a1, |L..30|
	mov	__a2, #200
	b	|__t5stack1Zii|
|L..31|
	ALIGN
|L..30|
	DCD	|ip|
	AREA	|C$$gnu_ctorsvec|, DATA, READONLY
	DCD	|_GLOBAL_$I$ip|
	AREA |__eh_pc|, DATA, COMMON
	% 4	; size=4
	AREA |__eh_type|, DATA, COMMON
	% 4	; size=4
	AREA |__eh_value|, DATA, COMMON
	% 4	; size=4
	AREA |__eh_cleanup|, DATA, COMMON
	% 4	; size=4
	AREA |__eh_in_catch|, DATA, COMMON
	% 4	; size=1
	AREA |C$$code4|, CODE, READONLY
	IMPORT	|__main|
	DCD	|__main|
	IMPORT	|__builtin_delete|
	IMPORT	|__builtin_vec_delete|
	IMPORT	|__builtin_vec_new|
	IMPORT	|printf|
	IMPORT	|__builtin_new|
	END
