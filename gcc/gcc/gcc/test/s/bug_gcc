; Generated by gcc egcs-2.90.01 970821 (gcc2-970802 experimental) for ARM/RISC OS
a1	RN	0
a2	RN	1
a3	RN	2
a4	RN	3
v1	RN	4
v2	RN	5
v3	RN	6
v4	RN	7
v5	RN	8
v6	RN	9
sl	RN	10
fp	RN	11
ip	RN	12
sp	RN	13
lr	RN	14
pc	RN	15
f0	FN	0
f1	FN	1
f2	FN	2
f3	FN	3
f4	FN	4
f5	FN	5
f6	FN	6
f7	FN	7
	AREA |C$$code1|, CODE, READONLY
; GNU C version egcs-2.90.01 970821 (gcc2-970802 experimental) (arm-acorn-riscos) compiled by CC.
; options passed:  -mstubs -O2
; options enabled:  -fdefer-pop -fomit-frame-pointer -fcse-follow-jumps
; -fcse-skip-blocks -fexpensive-optimizations -fthread-jumps
; -fstrength-reduce -fpeephole -fforce-mem -ffunction-cse -finline
; -fkeep-static-consts -fcaller-saves -freg-struct-return
; -frerun-cse-after-loop -fschedule-insns -fschedule-insns2 -fexceptions
; -fsjlj-exceptions -fcommon -fverbose-asm -fgnu-linker -fregmove
; -falias-check -fargument-alias -mapcs -mapcs-frame -mpoke-function-name
; -mapcs-stack-check

|gcc2_compiled.|
	ALIGN
|LC..0|
	DCB &6c, &65, &6e, &20
	DCB &3d, &20, &25, &64
	DCB &2c, &20, &65, &78
	DCB &70, &6f, &6e, &20
	DCB &3d, &20, &25, &64
	DCB &2c, &20, &6c, &67
	DCB &20, &3d, &20, &25
	DCB &2e, &31, &30, &66
	DCB &2c, &20, &6c, &70
	DCB &20, &3d, &20, &25
	DCB &2e, &31, &30, &66
	DCB &0a, &00
	ALIGN
	EXPORT	|foo|
	DCB &66, &6f, &6f, &00
	ALIGN
	DCD	-16777212
|foo|
	; args = 0, pretend = 0, frame = 12
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {v1, v2, v3, fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	sub	sp, sp, #12
	ldr	a4, |L..2|
	ldmia	a4, {v2-v3}	; double
	mov	a4, v3
	str	a4, [sp, #0]
	ldr	a4, |L..2|+4
	ldmia	a4, {a4-v1}	; double
	stmib	sp, {a4-v1}
	ldr	a1, |L..2|+8
	ldr	a3, |L..2|+12
	ldr	a4, |L..2|+16
	ldr	a3, [a3, #0]
	ldr	a2, [a4, #0]
	mov	a4, v2
	ldmea	fp, {v1, v2, v3, fp, sp, lr}
	b	|printf|
|L..3|
	ALIGN
|L..2|
	DCD	|lg|
	DCD	|lp|
	DCD	|LC..0|
	DCD	|expon|
	DCD	|len|
	ALIGN
|LC..1|
	DCB &61, &20, &3d, &20
	DCB &25, &64, &2c, &20
	DCB &62, &20, &3d, &20
	DCB &25, &64, &2c, &20
	DCB &63, &20, &3d, &20
	DCB &25, &64, &2c, &20
	DCB &64, &20, &3d, &20
	DCB &25, &64, &2c, &20
	DCB &65, &20, &3d, &20
	DCB &25, &64, &2c, &20
	DCB &66, &20, &3d, &20
	DCB &25, &64, &2c, &20
	DCB &67, &20, &3d, &20
	DCB &25, &64, &0a, &00
	ALIGN
	EXPORT	|bar|
	DCB &62, &61, &72, &00
	ALIGN
	DCD	-16777212
|bar|
	; args = 0, pretend = 0, frame = 16
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	sub	sp, sp, #16
	ldr	a4, |L..5|
	ldr	a4, [a4, #0]
	str	a4, [sp, #0]
	ldr	a4, |L..5|+4
	ldr	a4, [a4, #0]
	str	a4, [sp, #4]
	ldr	a4, |L..5|+8
	ldr	a4, [a4, #0]
	str	a4, [sp, #8]
	ldr	a4, |L..5|+12
	ldr	a4, [a4, #0]
	str	a4, [sp, #12]
	ldr	a1, |L..5|+16
	ldr	ip, |L..5|+20
	ldr	a4, |L..5|+24
	ldr	a2, [a4, #0]
	ldr	a4, |L..5|+28
	ldr	a3, [a4, #0]
	ldr	a4, [ip, #0]
	bl	|printf|
	ldmea	fp, {fp, sp, pc}^
|L..6|
	ALIGN
|L..5|
	DCD	|d|
	DCD	|e|
	DCD	|f|
	DCD	|g|
	DCD	|LC..1|
	DCD	|c|
	DCD	|a|
	DCD	|b|
	IMPORT	|gccmain|
	ALIGN
	EXPORT	|main|
	DCB &6d, &61, &69, &6e
	DCB &00
	ALIGN
	DCD	-16777208
|main|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	bl	|gccmain|
	ldr	a4, |L..8|
	mov	a2, #2
	str	a2, [a4, #0]
	ldr	a3, |L..8|+4
	mov	a4, #10
	str	a4, [a3, #0]
	ldr	a3, |L..8|+8
	mov	a4, #1
	str	a4, [a3, #0]
	ldr	a4, |L..8|+12
	str	a2, [a4, #0]
	ldr	a3, |L..8|+16
	mov	a4, #3
	str	a4, [a3, #0]
	ldr	a3, |L..8|+20
	mov	a4, #4
	str	a4, [a3, #0]
	ldr	a3, |L..8|+24
	mov	a4, #5
	str	a4, [a3, #0]
	ldr	a3, |L..8|+28
	mov	a4, #6
	str	a4, [a3, #0]
	ldr	a3, |L..8|+32
	mov	a4, #7
	str	a4, [a3, #0]
	adr	a1, |L..8|+36
	ldmia	a1, {a1-a2}	; double
	bl	|log10|
	ldfd	f2, |L..8|+44
	adfd	f2, f0, f2
	mufd	f1, f2, #10
	fixz	a4, f1
	ldr	a3, |L..8|+52
	add	a4, a4, #1
	str	a4, [a3, #0]
	ldr	a4, |L..8|+56
	stfd	f0, [a4, #0]
	ldr	a4, |L..8|+60
	stfd	f2, [a4, #0]
	bl	|foo|
	bl	|bar|
	mov	a1, #0
	ldmea	fp, {fp, sp, pc}^
|L..9|
	ALIGN
|L..8|
	DCD	|numb|
	DCD	|expon|
	DCD	|a|
	DCD	|b|
	DCD	|c|
	DCD	|d|
	DCD	|e|
	DCD	|f|
	DCD	|g|
	DCD &40000000, &0	; double 2.00000000000000000000e0
	DCD &3e212e0b, &e826d695	; double 2.00000000000000012456e-9
	DCD	|len|
	DCD	|lg|
	DCD	|lp|
	AREA |numb|, DATA, COMMON
	% 4	; size=4
	AREA |expon|, DATA, COMMON
	% 4	; size=4
	AREA |len|, DATA, COMMON
	% 4	; size=4
	AREA |lg|, DATA, COMMON
	% 8	; size=8
	AREA |lp|, DATA, COMMON
	% 8	; size=8
	AREA |a|, DATA, COMMON
	% 4	; size=4
	AREA |b|, DATA, COMMON
	% 4	; size=4
	AREA |c|, DATA, COMMON
	% 4	; size=4
	AREA |d|, DATA, COMMON
	% 4	; size=4
	AREA |e|, DATA, COMMON
	% 4	; size=4
	AREA |f|, DATA, COMMON
	% 4	; size=4
	AREA |g|, DATA, COMMON
	% 4	; size=4
	AREA |C$$code2|, CODE, READONLY
	IMPORT	|main|
	DCD	|main|
	IMPORT	|log10|
	IMPORT	|printf|
	END
