; Generated by gcc 2.7.2 snapshot 970522 for ARM/RISC OS
__a1	RN	0
__a2	RN	1
__a3	RN	2
__a4	RN	3
__v1	RN	4
__v2	RN	5
__v3	RN	6
__v4	RN	7
__v5	RN	8
__v6	RN	9
__sl	RN	10
__fp	RN	11
__ip	RN	12
__sp	RN	13
__lr	RN	14
__pc	RN	15
__f0	FN	0
__f1	FN	1
__f2	FN	2
__f3	FN	3
__f4	FN	4
__f5	FN	5
__f6	FN	6
__f7	FN	7
	AREA |C$$code1|, CODE, READONLY
; GNU C version 2.7.2 snapshot 970522 (arm-riscos) compiled by CC.
; options passed:  -O2
; options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
; -fexpensive-optimizations -fthread-jumps -fstrength-reduce -fpeephole
; -fforce-mem -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
; -freg-struct-return -frerun-cse-after-loop -fschedule-insns
; -fschedule-insns2 -fexceptions -fsjlj-exceptions -fcommon -fverbose-asm
; -fgnu-linker -mapcs -mapcs-frame -mpoke-function-name -mapcs-stack-check

|gcc2_compiled.|
	cmp	__sp, __sl
	bllt	|x$stack_overflow|
	ALIGN
	EXPORT	|stupid_life_analysis|
|stupid_life_analysis|
	; args = 0, pretend = 0, frame = 8
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __v3, __v4, __v5, __fp, __ip, __lr, __pc}
	sub	__sp, __sp, #8
	str	__a1, [__v6, #12]
	str	__a3, [__v6, #8]
	ldr	__a1, |L..65|
	sub	__fp, __ip, #4
	mov	__v3, __a2
	mov	__a2, #25
	bl	|bzero|
	add	__a1, __v3, #3
	bic	__a1, __a1, #3
	bl	|___arm_alloca_alloc|
	ldr	__a4, |L..65|+4
	str	__a1, [__a4, #0]
	ldr	__v2, [__v6, #12]
	mov	__v1, #0
	cmp	__v2, #0
	beq	|L..3|
|L..5|
	ldr	__a4, [__v2, #4]
	ldr	__v2, [__v2, #12]
	cmp	__a4, __v1
	movge	__v1, __a4
	cmp	__v2, #0
	bne	|L..5|
|L..3|
	add	__a1, __v1, #1
	mov	__a1, __a1, asl #2
	bl	|___arm_alloca_alloc|
	ldr	__a4, |L..65|+8
	str	__a1, [__a4, #0]
	ldr	__v2, [__v6, #12]
	mov	__v5, #0
	mov	__v1, __v5
	cmp	__v2, #0
	beq	|L..9|
	ldr	__a2, |L..65|+12
|L..11|
	ldr	__a4, [__v2, #2]	; load-rotate
	ldrb	__a3, [__a2, __a4, lsr #16]	; zero_extendqisi2
	ldr	__a4, [__v2, #4]
	add	__v1, __v1, #1
	str	__v1, [__a1, __a4, asl #2]
	cmp	__a3, #105
	moveq	__v5, __v2
	ldr	__v2, [__v2, #12]
	cmp	__v2, #0
	bne	|L..11|
|L..9|
	ldr	__a4, |L..65|+16
	add	__a3, __v1, #1
	str	__a3, [__a4, #0]
	ldr	__a4, |L..65|+20
	str	__a3, [__a4, #0]
	ldr	__a4, |L..65|+24
	str	__v3, [__a4, #0]
	mov	__v1, __v3, asl #2
	mov	__a1, __v1
	mov	__v2, __a3
	bl	|___arm_alloca_alloc|
	ldr	__a4, |L..65|+28
	str	__a1, [__a4, #0]
	mov	__a2, __v1
	bl	|bzero|
	mov	__a1, __v1
	bl	|___arm_alloca_alloc|
	ldr	__a4, |L..65|+32
	str	__a1, [__a4, #0]
	mov	__a2, __v1
	bl	|bzero|
	mov	__a1, __v1
	bl	|___arm_alloca_alloc|
	ldr	__a4, |L..65|+36
	str	__a1, [__a4, #0]
	mov	__a2, __v1
	bl	|bzero|
	add	__v1, __v3, #3
	bic	__v1, __v1, #3
	mov	__a1, __v1
	bl	|___arm_alloca_alloc|
	ldr	__a4, |L..65|+40
	str	__a1, [__a4, #0]
	mov	__a2, __v3
	bl	|bzero|
	mov	__a1, __v1
	bl	|___arm_alloca_alloc|
	ldr	__a4, |L..65|+44
	str	__a1, [__a4, #0]
	mov	__a2, __v3
	bl	|bzero|
	mov	__a1, __v3, asl #1
	bl	|oballoc|
	ldr	__a4, |L..65|+48
	str	__a1, [__a4, #0]
	mov	__v1, #0
	mov	__a2, __a4
|L..17|
	ldr	__a3, [__a2, #0]
	strb	__v1, [__a3, __v1, asl #1]
	mov	__a4, __v1, asr #8
	add	__a3, __a3, __v1, asl #1
	strb	__a4, [__a3, #1]
	add	__v1, __v1, #1
	cmp	__v1, #24
	ble	|L..17|
	ldr	__a2, |L..65|+24
	ldr	__a4, [__a2, #0]
	mov	__v1, #25
	cmp	__v1, __a4
	bge	|L..20|
	ldr	__a1, |L..65|+48
	mov	__a3, #255
|L..22|
	ldr	__a4, [__a1, #0]
	strb	__a3, [__a4, __v1, asl #1]!
	strb	__a3, [__a4, #1]
	ldr	__a4, [__a2, #0]
	add	__v1, __v1, #1
	cmp	__v1, __a4
	blt	|L..22|
|L..20|
	mov	__v1, __v2, asl #2
	mov	__a1, __v1
	bl	|___arm_alloca_alloc|
	ldr	__a4, |L..65|+52
	str	__a1, [__a4, #0]
	mov	__a2, __v1
	bl	|bzero|
	bl	|allocate_for_life_analysis|
	ldr	__a3, |L..65|+24
	ldr	__a4, [__a3, #0]
	mov	__v1, #0
	cmp	__v1, __a4
	bge	|L..25|
	ldr	__ip, |L..65|+56
	mov	__a1, #1
	mov	__a2, __v1
|L..27|
	ldr	__a4, [__ip, #0]
	strb	__a1, [__a4, __v1, asl #1]!
	strb	__a2, [__a4, #1]
	ldr	__a4, [__a3, #0]
	add	__v1, __v1, #1
	cmp	__v1, __a4
	blt	|L..27|
|L..25|
	ldr	__v1, |L..65|+4
	ldr	__a1, [__v1, #0]
	mov	__a2, __v3
	bl	|bzero|
	subs	__v2, __v5, #0
	beq	|L..30|
	ldr	__v5, |L..65|+52
	mov	__v3, __v1
|L..32|
	ldr	__v4, |L..65|+8
	ldr	__a3, [__v2, #4]
	ldr	__a4, [__v4, #0]
	ldr	__a3, [__a4, __a3, asl #2]
	ldr	__a4, [__v5, #0]
	mov	__v1, #0
	mov	__a2, #1
	add	__a3, __a4, __a3, asl #2
|L..36|
	ldr	__a4, [__v3, #0]
	ldrb	__a4, [__a4, __v1]	; zero_extendqisi2
	cmp	__a4, #0
	ldrne	__a4, [__a3, #0]
	orrne	__a4, __a4, __a2, asl __v1
	strne	__a4, [__a3, #0]
|L..35|
	add	__v1, __v1, #1
	cmp	__v1, #24
	ble	|L..36|
	ldr	__a4, [__v2, #2]	; load-rotate
	ldr	__a3, |L..65|+12
	ldrb	__a4, [__a3, __a4, lsr #16]	; zero_extendqisi2
	cmp	__a4, #105
	ldreq	__a1, [__v2, #16]
	moveq	__a2, __v2
	bleq	|stupid_mark_refs|
|L..39|
	ldr	__a4, [__v2, #2]	; load-rotate
	mov	__a4, __a4, lsr #16
	cmp	__a4, #32
	bne	|L..40|
	ldr	__a4, [__v2, #20]
	cmn	__a4, #7
	bne	|L..40|
	ldr	__a2, [__v2, #4]
	ldr	__v4, |L..65|+8
	ldr	__a3, |L..65|+20
	ldr	__a4, [__v4, #0]
	ldr	__a4, [__a4, __a2, asl #2]
	str	__a4, [__a3, #0]
|L..40|
	ldr	__a4, [__v2, #2]	; load-rotate
	mov	__a4, __a4, lsr #16
	cmp	__a4, #29
	bne	|L..31|
	ldr	__a2, [__v2, #4]
	ldr	__v4, |L..65|+8
	ldr	__a3, |L..65|+16
	ldr	__a4, [__v4, #0]
	ldr	__a2, [__a4, __a2, asl #2]
	str	__a2, [__a3, #0]
	ldr	__ip, |L..65|+60
	ldr	__a1, [__v5, #0]
	ldr	__a3, |L..65|+64
	ldr	__a4, [__a1, __a2, asl #2]
	ldr	__a3, [__a3, #0]
	mov	__v1, #0
	mov	__lr, __v1
	orr	__a4, __a4, __a3
	str	__a4, [__a1, __a2, asl #2]
|L..45|
	ldrb	__a4, [__ip], #1
	cmp	__a4, #0
	ldrne	__a4, [__v3, #0]
	strneb	__lr, [__a4, __v1]
|L..44|
	add	__v1, __v1, #1
	cmp	__v1, #24
	ble	|L..45|
	ldr	__a1, [__v2, #32]
	mov	__a2, __v2
	bl	|stupid_mark_refs|
|L..31|
	ldr	__v2, [__v2, #8]
	cmp	__v2, #0
	bne	|L..32|
|L..30|
	ldr	__a2, |L..65|+24
	ldr	__a4, [__a2, #0]
	mov	__v1, #29
	cmp	__v1, __a4
	bge	|L..50|
	ldr	__a4, |L..65|+36
	ldr	__a4, [__a4, #0]
	add	__a3, __a4, #116
|L..52|
	str	__v1, [__a3], #4
	ldr	__a4, [__a2, #0]
	add	__v1, __v1, #1
	cmp	__v1, __a4
	blt	|L..52|
|L..50|
	ldr	__a4, |L..65|+68
	ldr	__a3, |L..65|+36
	ldr	__v1, |L..65|+24
	ldr	__a1, [__a3, #0]
	ldr	__a2, [__v1, #0]
	mov	__a3, #4
	add	__a1, __a1, #116
	sub	__a2, __a2, #29
	bl	|qsort|
	ldr	__a4, [__v1, #0]
	mov	__v1, #29
	cmp	__v1, __a4
	bge	|L..55|
	ldr	__v5, |L..65|+40
	ldr	__v3, |L..65|+48
|L..57|
	ldr	__a4, |L..65|+36
	ldr	__v4, |L..65|+72
	ldr	__a4, [__a4, #0]
	ldr	__v2, [__a4, __v1, asl #2]
	ldr	__a4, [__v4, #0]
	ldr	__a4, [__a4, __v2, asl #2]
	cmp	__a4, #0
	b	|L..64|
|L..66|
	ALIGN
|L..65|
	DCD	|regs_ever_live|
	DCD	|regs_live|
	DCD	|uid_suid|
	DCD	|rtx_class|
	DCD	|last_call_suid|
	DCD	|last_setjmp_suid|
	DCD	|max_regno|
	DCD	|reg_where_dead|
	DCD	|reg_where_born|
	DCD	|reg_order|
	DCD	|regs_change_size|
	DCD	|regs_crosses_setjmp|
	DCD	|reg_renumber|
	DCD	|after_insn_hard_regs|
	DCD	|reg_n_deaths|
	DCD	|call_used_regs|
	DCD	|call_used_reg_set|
	DCD	|stupid_reg_compare|
	DCD	|regno_reg_rtx|
|L..64|
	beq	|L..56|
	ldr	__a4, |L..67|
	ldr	__a4, [__a4, #0]
	ldrb	__a4, [__a4, __v2]	; zero_extendqisi2
	cmp	__a4, #0
	bne	|L..56|
	mov	__a1, __v2
	bl	|reg_preferred_class|
	ldr	__a4, [__v4, #0]
	ldr	__v4, |L..67|+4
	ldr	__a4, [__a4, __v2, asl #2]
	ldr	__a3, [__v4, #0]
	ldr	__lr, [__a3, __v2, asl #2]
	ldr	__v4, |L..67|+8
	ldrb	__a3, [__a4, #2]	; zero_extendqisi2
	ldr	__a4, [__v4, #0]
	ldr	__v4, |L..67|+12
	ldr	__ip, [__a4, __v2, asl #2]
	ldr	__a2, [__v4, #0]
	ldr	__a4, [__a2, __v2, asl #2]
	str	__ip, [__sp, #0]
	ldr	__a2, [__v5, #0]
	ldrb	__a2, [__a2, __v2]	; zero_extendqisi2
	str	__a2, [__sp, #4]
	mov	__a2, __a1
	mov	__a1, __lr
	bl	|stupid_find_reg|
	ldr	__a4, [__v3, #0]
	strb	__a1, [__a4, __v2, asl #1]!
	mov	__a1, __a1, asr #8
	strb	__a1, [__a4, #1]
	ldr	__a4, [__v3, #0]
	ldr	__a4, [__a4, __v2, asl #1]	; movhi
	mov	__a4, __a4, asl #16
	mov	__a4, __a4, asr #16
	cmn	__a4, #1
	bne	|L..56|
	mov	__a1, __v2
	bl	|reg_alternate_class|
	cmp	__a1, #0
	beq	|L..56|
	mov	__a1, __v2
	bl	|reg_alternate_class|
	ldr	__v4, |L..67|+16
	ldr	__a4, [__v4, #0]
	ldr	__v4, |L..67|+4
	ldr	__a4, [__a4, __v2, asl #2]
	ldr	__a3, [__v4, #0]
	ldr	__lr, [__a3, __v2, asl #2]
	ldr	__v4, |L..67|+8
	ldrb	__a3, [__a4, #2]	; zero_extendqisi2
	ldr	__a4, [__v4, #0]
	ldr	__v4, |L..67|+12
	ldr	__ip, [__a4, __v2, asl #2]
	ldr	__a2, [__v4, #0]
	ldr	__a4, [__a2, __v2, asl #2]
	str	__ip, [__sp, #0]
	ldr	__a2, [__v5, #0]
	ldrb	__a2, [__a2, __v2]	; zero_extendqisi2
	str	__a2, [__sp, #4]
	mov	__a2, __a1
	mov	__a1, __lr
	bl	|stupid_find_reg|
	ldr	__a4, [__v3, #0]
	strb	__a1, [__a4, __v2, asl #1]!
	mov	__a1, __a1, asr #8
	strb	__a1, [__a4, #1]
|L..56|
	ldr	__a4, |L..67|+20
	ldr	__a4, [__a4, #0]
	add	__v1, __v1, #1
	cmp	__v1, __a4
	blt	|L..57|
|L..55|
	ldr	__v4, [__v6, #8]
	cmp	__v4, #0
	movne	__a1, __v4
	blne	|dump_flow_info|
	ldmea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
|L..68|
	ALIGN
|L..67|
	DCD	|regs_crosses_setjmp|
	DCD	|reg_n_calls_crossed|
	DCD	|reg_where_dead|
	DCD	|reg_where_born|
	DCD	|regno_reg_rtx|
	DCD	|max_regno|
	ALIGN
|stupid_reg_compare|
	KEEP |stupid_reg_compare|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__fp, __ip, __lr, __pc}
	ldr	__a4, |L..73|
	ldr	__a3, |L..73|+4
	ldr	__lr, [__a1, #0]
	sub	__fp, __ip, #4
	ldr	__ip, [__a2, #0]
	ldr	__a4, [__a4, #0]
	ldr	__a2, [__a3, #0]
	ldr	__a3, [__a4, __lr, asl #2]
	ldr	__a1, [__a2, __lr, asl #2]
	ldr	__a4, [__a4, __ip, asl #2]
	ldr	__a2, [__a2, __ip, asl #2]
	rsb	__a3, __a1, __a3
	rsb	__a4, __a2, __a4
	subs	__a1, __a4, __a3
	ldmneea	__fp, {__fp, __sp, __pc}^
	ldr	__a4, |L..73|+8
	ldr	__a4, [__a4, #0]
	ldr	__a3, [__a4, __lr, asl #2]
	ldr	__a4, [__a4, __ip, asl #2]
	subs	__a1, __a3, __a4
	rsbeq	__a1, __ip, __lr
	ldmea	__fp, {__fp, __sp, __pc}^
|L..74|
	ALIGN
|L..73|
	DCD	|reg_where_dead|
	DCD	|reg_where_born|
	DCD	|reg_n_refs|
	AREA |C$$data1|, DATA
	ALIGN
|eliminables.6|
	KEEP |eliminables.6|
	DCD	11
	DCD	13
	DCD	11
	DCD	9
	cmp	__sp, __sl
	bllt	|x$stack_overflow|
	AREA |C$$code2|, CODE, READONLY
	ALIGN
|stupid_find_reg|
	KEEP |stupid_find_reg|
	; args = 8, pretend = 0, frame = 4
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __v3, __v4, __v5, __fp, __ip, __lr, __pc}
	sub	__sp, __sp, #4
	str	__a4, [__v6, #0]
	sub	__fp, __ip, #4
	ldr	__v5, [__fp, #4]
	add	__a4, __a4, #4992
	add	__a4, __a4, #8
	cmp	__v5, __a4
	mvngt	__a1, #0
	ldmgtea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
|L..76|
	cmp	__a1, #0
	ldr	__a4, |L..117|
	ldrne	__a4, |L..117|+4
|L..77|
	ldr	__v1, [__a4, #0]
	ldr	__ip, |L..117|+8
	mov	__lr, #0
	mov	__a1, #1
|L..82|
	ldr	__a4, [__ip, __lr, asl #3]
	orr	__v1, __v1, __a1, asl __a4
	add	__lr, __lr, #1
	cmp	__lr, #1
	bls	|L..82|
	ldr	__ip, [__v6, #0]
	cmp	__ip, __v5
	bge	|L..85|
	ldr	__a4, |L..117|+12
	ldr	__a4, [__a4, #0]
	add	__a1, __a4, __ip, asl #2
|L..87|
	ldr	__a4, [__a1], #4
	add	__ip, __ip, #1
	cmp	__ip, __v5
	orr	__v1, __v1, __a4
	blt	|L..87|
|L..85|
	ldr	__a4, |L..117|+16
	ldr	__a4, [__a4, __a2, asl #2]
	mov	__lr, #0
	mov	__v3, #1
	mov	__v4, __a3, asl #2
	mvn	__a4, __a4
	orr	__v1, __v1, __a4
|L..92|
	ldr	__a4, |L..117|+20
	ldr	__a1, [__a4, __lr, asl #2]
	ands	__a4, __v1, __v3, asl __a1
	bne	|L..91|
	ldr	__a4, |L..117|+24
	ldr	__a4, [__v4, __a4]
	cmp	__a4, #4
	bne	|L..94|
	cmp	__a1, #24
	beq	|L..95|
	b	|L..91|
|L..94|
	cmp	__a1, #15
	ble	|L..95|
	cmp	__a4, #2
	bne	|L..91|
|L..95|
	cmp	__a1, #15
	bgt	|L..96|
	ldr	__a4, |L..117|+28
	ldr	__a4, [__v4, __a4]
	add	__a4, __a4, #3
	cmp	__a4, #0
	addlt	__a4, __a4, #3
	mov	__ip, __a4, asr #2
	b	|L..97|
|L..96|
	mov	__ip, #1
|L..97|
	mov	__a2, #1
	cmp	__a2, __ip
	bge	|L..99|
	add	__a4, __a1, __a2
	ands	__a3, __v1, __a2, asl __a4
	bne	|L..99|
	add	__a2, __a2, #1
	cmp	__a2, __ip
	bge	|L..99|
	add	__a4, __a1, __a2
	ands	__a3, __v1, __v3, asl __a4
	bne	|L..99|
|L..100|
	add	__a2, __a2, #1
	cmp	__a2, __ip
	bge	|L..99|
	add	__a4, __a1, __a2
	mov	__v2, #1
	ands	__a3, __v1, __v2, asl __a4
	beq	|L..100|
|L..99|
	cmp	__a2, __ip
	bne	|L..91|
	mov	__lr, #0
	subs	__a2, __a2, #1
	bmi	|L..106|
|L..107|
	add	__a4, __a1, __a2
	orr	__lr, __lr, __v3, asl __a4
	subs	__a2, __a2, #1
	bpl	|L..107|
|L..106|
	ldr	__ip, [__v6, #0]
	cmp	__ip, __v5
	ldmgeea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
	ldr	__v2, |L..117|+12
	ldr	__a4, [__v2, #0]
	add	__a3, __a4, __ip, asl #2
|L..112|
	ldr	__a4, [__a3, #0]
	orr	__a4, __a4, __lr
	str	__a4, [__a3], #4
	add	__ip, __ip, #1
	cmp	__ip, __v5
	blt	|L..112|
	ldmea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
|L..91|
	add	__lr, __lr, #1
	cmp	__lr, #24
	ble	|L..92|
	mvn	__a1, #0
	ldmea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
|L..118|
	ALIGN
|L..117|
	DCD	|fixed_reg_set|
	DCD	|call_used_reg_set|
	DCD	|eliminables.6|
	DCD	|after_insn_hard_regs|
	DCD	|reg_class_contents|
	DCD	|reg_alloc_order|
	DCD	|mode_class|
	DCD	|mode_size|
	cmp	__sp, __sl
	bllt	|x$stack_overflow|
	ALIGN
|stupid_mark_refs|
	KEEP |stupid_mark_refs|
	; args = 0, pretend = 0, frame = 16
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __v3, __v4, __v5, __fp, __ip, __lr, __pc}
	sub	__sp, __sp, #16
	str	__a2, [__v6, #0]
	sub	__fp, __ip, #4
	subs	__v2, __a1, #0
	ldmeqea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
	ldr	__a4, [__v2, #2]	; load-rotate
	mov	__a4, __a4, lsr #16
	str	__a4, [__v6, #8]
	cmp	__a4, #43
	cmpne	__a4, #41
	bne	|L..121|
	ldr	__a2, [__v2, #4]
	cmp	__a2, #0
	beq	|L..122|
	ldr	__a4, [__a2, #0]	; movhi
	mov	__a4, __a4, asl #16
	mov	__a1, __a4, lsr #16
	cmp	__a1, #52
	beq	|L..123|
	cmp	__a1, #54
	bne	|L..122|
	ldr	__a3, [__a2, #4]
	ldr	__a4, [__a3, #2]	; load-rotate
	mov	__a4, __a4, lsr #16
	cmp	__a4, #52
	bne	|L..122|
	ldr	__a4, [__a3, #4]
	cmp	__a4, #24
	ble	|L..122|
|L..123|
	cmp	__a1, #54
	ldreq	__a4, [__a2, #4]
	ldreq	__v1, [__a4, #4]
|L..124|
	ldrne	__v1, [__a2, #4]
|L..125|
	cmp	__v1, #24
	bgt	|L..126|
	cmp	__v1, #15
	bgt	|L..127|
	ldr	__a4, [__v2, #4]
	ldrb	__a3, [__a4, #2]	; zero_extendqisi2
	ldr	__a4, |L..166|
	ldr	__a4, [__a4, __a3, asl #2]
	add	__a4, __a4, #3
	cmp	__a4, #0
	addlt	__a4, __a4, #3
	mov	__ip, __a4, asr #2
	b	|L..128|
|L..127|
	mov	__ip, #1
|L..128|
	subs	__ip, __ip, #1
	bmi	|L..122|
	mvn	__v4, #3
|L..131|
	ldr	__v3, |L..166|+4
	add	__a2, __v1, __ip
	mov	__v5, #1
	strb	__v5, [__a2, __v3]
	ldr	__v3, |L..166|+8
	ldr	__a4, [__v3, #0]
	mov	__v5, #0
	strb	__v5, [__a4, __a2]
	ldr	__v3, [__v6, #0]
	ldr	__a4, |L..166|+12
	ldr	__a3, [__v3, #4]
	ldr	__lr, [__a4, #0]
	ldr	__a4, |L..166|+16
	ldr	__a3, [__lr, __a3, asl #2]
	ldr	__a1, [__a4, #0]
	ldr	__a4, [__a1, __a3, asl #2]
	mov	__v5, #1
	mov	__a2, __v5, asl __a2
	orr	__a4, __a4, __a2
	str	__a4, [__a1, __a3, asl #2]
	ldr	__v3, [__v6, #8]
	cmp	__v3, #43
	bne	|L..129|
	ldr	__v5, [__v6, #0]
	ldr	__a4, [__v5, #4]
	ldr	__a4, [__lr, __a4, asl #2]
	cmp	__a4, #0
	addgt	__a3, __a1, __a4, asl #2
	ldrgt	__a4, [__a3, __v4]
	orrgt	__a4, __a4, __a2
	strgt	__a4, [__a3, __v4]
|L..129|
	subs	__ip, __ip, #1
	bpl	|L..131|
	b	|L..122|
|L..126|
	ldr	__a4, |L..166|+12
	ldr	__v3, [__v6, #0]
	ldr	__a3, |L..166|+20
	ldr	__v5, [__v6, #8]
	ldr	__a2, [__v3, #4]
	ldr	__a4, [__a4, #0]
	ldr	__a3, [__a3, #0]
	ldr	__a4, [__a4, __a2, asl #2]
	cmp	__v5, #43
	subeq	__a4, __a4, #1
	str	__a4, [__a3, __v1, asl #2]
	ldr	__a1, |L..166|+24
	ldr	__a2, [__a1, #0]
	ldr	__a3, [__a2, __v1, asl #2]
	add	__a4, __a4, #2
	cmp	__a3, __a4
	bge	|L..135|
	str	__a4, [__a2, __v1, asl #2]
	ldr	__a4, |L..166|+8
	ldr	__a3, [__a4, #0]
	mov	__a4, #1
	strb	__a4, [__a3, __v1]
|L..135|
	ldr	__a4, |L..166|+28
	ldr	__a3, [__a4, #0]
	ldr	__a4, [__a3, __v1, asl #2]
	add	__a4, __a4, #1
	str	__a4, [__a3, __v1, asl #2]
	ldr	__a4, |L..166|+32
	ldr	__a3, [__a1, #0]
	ldr	__a2, [__a4, #0]
	ldr	__a4, [__a3, __v1, asl #2]
	cmp	__a2, __a4
	bge	|L..136|
	ldr	__a4, |L..166|+36
	ldr	__a3, [__a4, #0]
	ldr	__a4, [__a3, __v1, asl #2]
	add	__a4, __a4, #1
	str	__a4, [__a3, __v1, asl #2]
|L..136|
	ldr	__a4, |L..166|+40
	ldr	__a3, [__a1, #0]
	ldr	__a2, [__a4, #0]
	ldr	__a4, [__a3, __v1, asl #2]
	cmp	__a2, __a4
	ldrlt	__a4, |L..166|+44
	ldrlt	__a3, [__a4, #0]
	movlt	__a4, #1
	strltb	__a4, [__a3, __v1]
|L..122|
	ldr	__v3, [__v6, #8]
	cmp	__v3, #41
	ldmneea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
	ldr	__a1, [__v2, #8]
	ldr	__a2, [__v6, #0]
	bl	|stupid_mark_refs|
	ldr	__a1, [__v2, #4]
	ldr	__a4, [__a1, #2]	; load-rotate
	mov	__a4, __a4, lsr #16
	cmp	__a4, #52
	ldrne	__a2, [__v6, #0]
	blne	|stupid_mark_refs|
	ldmea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
|L..121|
	ldr	__v5, [__v6, #8]
	cmp	__v5, #54
	bne	|L..141|
	ldr	__a3, [__v2, #4]
	ldr	__a4, [__a3, #2]	; load-rotate
	mov	__a4, __a4, lsr #16
	cmp	__a4, #52
	bne	|L..141|
	ldr	__a4, [__a3, #4]
	cmp	__a4, #24
	ble	|L..141|
	ldrb	__a4, [__v2, #2]	; zero_extendqisi2
	ldr	__a1, |L..166|
	ldrb	__a3, [__a3, #2]	; zero_extendqisi2
	mov	__ip, __a4, asl #2
	ldr	__a2, [__ip, __a1]
	mov	__a3, __a3, asl #2
	ldr	__a4, [__a3, __a1]
	cmp	__a2, __a4
	beq	|L..141|
	ldr	__a2, |L..166|+48
	ldr	__a4, [__ip, __a2]
	cmp	__a4, #3
	cmpne	__a4, #1
	beq	|L..142|
	cmp	__a4, #5
	beq	|L..142|
	ldr	__a3, [__a3, __a2]
	cmp	__a3, #3
	cmpne	__a3, #1
	beq	|L..142|
	cmp	__a3, #5
	bne	|L..141|
|L..142|
	ldr	__a4, |L..166|+52
	ldr	__a3, [__v2, #4]
	ldr	__a2, [__a4, #0]
	ldr	__a3, [__a3, #4]
	mov	__a4, #1
	strb	__a4, [__a2, __a3]
	b	|L..140|
|L..141|
	ldr	__v3, [__v6, #8]
	cmp	__v3, #52
	bne	|L..140|
	ldr	__v1, [__v2, #4]
	cmp	__v1, #24
	bgt	|L..145|
	cmp	__v1, #15
	bgt	|L..146|
	ldrb	__a3, [__v2, #2]	; zero_extendqisi2
	ldr	__a4, |L..166|
	ldr	__a4, [__a4, __a3, asl #2]
	add	__a4, __a4, #3
	cmp	__a4, #0
	addlt	__a4, __a4, #3
	mov	__a2, __a4, asr #2
	b	|L..147|
|L..146|
	mov	__a2, #1
|L..147|
	subs	__a2, __a2, #1
	ldmmiea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
	ldr	__lr, |L..166|+4
	mov	__a1, #1
	ldr	__ip, |L..166|+8
|L..150|
	add	__a3, __v1, __a2
	strb	__a1, [__a3, __lr]
	ldr	__a4, [__ip, #0]
	strb	__a1, [__a4, __a3]
	subs	__a2, __a2, #1
	bpl	|L..150|
	ldmea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
|L..145|
	ldr	__a3, |L..166|+20
	ldr	__v5, [__v6, #0]
	ldr	__a1, |L..166|+12
	ldr	__a2, [__v5, #4]
	ldr	__a4, [__a1, #0]
	ldr	__a3, [__a3, #0]
	ldr	__a4, [__a4, __a2, asl #2]
	str	__a4, [__a3, __v1, asl #2]
	ldr	__a4, |L..166|+28
	ldr	__a3, [__a4, #0]
	ldr	__a4, [__a3, __v1, asl #2]
	add	__a4, __a4, #1
	str	__a4, [__a3, __v1, asl #2]
	ldr	__a4, |L..166|+8
	ldr	__a3, [__a4, #0]
	ldrb	__a4, [__a3, __v1]	; zero_extendqisi2
	cmp	__a4, #0
	ldmneea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
	mov	__a4, #1
	strb	__a4, [__a3, __v1]
	ldr	__a3, |L..166|+24
	ldr	__a2, [__v5, #4]
	ldr	__a4, [__a1, #0]
	ldr	__a3, [__a3, #0]
	ldr	__a4, [__a4, __a2, asl #2]
	str	__a4, [__a3, __v1, asl #2]
	ldmea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
|L..140|
	ldr	__a2, |L..166|+56
	ldr	__v3, [__v6, #8]
	ldr	__a3, |L..166|+60
	mov	__a4, __v3, asl #2
	ldr	__a3, [__a4, __a3]
	ldr	__a4, [__a4, __a2]
	str	__a4, [__v6, #4]
	subs	__a3, __a3, #1
	ldmmiea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
	add	__v4, __v2, __a3, asl #2
	add	__v2, __a3, __a4
|L..157|
	ldrb	__a4, [__v2, #0]	; zero_extendqisi2
	cmp	__a4, #101
	ldreq	__a1, [__v4, #4]
	ldreq	__a2, [__v6, #0]
	bleq	|stupid_mark_refs|
|L..158|
	ldrb	__a4, [__v2, #0]	; zero_extendqisi2
	cmp	__a4, #69
	bne	|L..156|
	ldr	__a4, [__v4, #4]
	ldr	__a4, [__a4, #0]
	subs	__v1, __a4, #1
	bmi	|L..156|
	mov	__a3, __v4
|L..163|
	str	__a3, [__v6, #12]
	ldr	__a4, [__a3, #4]
	ldr	__a2, [__v6, #0]
	add	__a4, __a4, __v1, asl #2
	ldr	__a1, [__a4, #4]
	bl	|stupid_mark_refs|
	ldr	__a3, [__v6, #12]
	subs	__v1, __v1, #1
	bpl	|L..163|
|L..156|
	ldr	__v5, [__v6, #4]
	sub	__v4, __v4, #4
	sub	__v2, __v2, #1
	cmp	__v2, __v5
	bge	|L..157|
	ldmea	__fp, {__v1, __v2, __v3, __v4, __v5, __fp, __sp, __pc}^
|L..167|
	ALIGN
|L..166|
	DCD	|mode_size|
	DCD	|regs_ever_live|
	DCD	|regs_live|
	DCD	|uid_suid|
	DCD	|after_insn_hard_regs|
	DCD	|reg_where_born|
	DCD	|reg_where_dead|
	DCD	|reg_n_refs|
	DCD	|last_call_suid|
	DCD	|reg_n_calls_crossed|
	DCD	|last_setjmp_suid|
	DCD	|regs_crosses_setjmp|
	DCD	|mode_class|
	DCD	|regs_change_size|
	DCD	|rtx_format|
	DCD	|rtx_length|
	AREA |C$$zidata1|,NOINIT
|uid_suid|
	% 4	; size=4
|last_call_suid|
	% 4	; size=4
|last_setjmp_suid|
	% 4	; size=4
|reg_where_dead|
	% 4	; size=4
|reg_where_born|
	% 4	; size=4
|reg_order|
	% 4	; size=4
|regs_live|
	% 4	; size=4
|regs_change_size|
	% 4	; size=4
|regs_crosses_setjmp|
	% 4	; size=4
|after_insn_hard_regs|
	% 4	; size=4
	IMPORT	|rtx_length|
	IMPORT	|rtx_format|
	IMPORT	|mode_size|
	IMPORT	|mode_class|
	IMPORT	|reg_alloc_order|
	IMPORT	|reg_class_contents|
	IMPORT	|fixed_reg_set|
	IMPORT	|reg_n_refs|
	IMPORT	|dump_flow_info|
	IMPORT	|reg_alternate_class|
	IMPORT	|reg_preferred_class|
	IMPORT	|reg_n_calls_crossed|
	IMPORT	|regno_reg_rtx|
	IMPORT	|qsort|
	IMPORT	|call_used_regs|
	IMPORT	|call_used_reg_set|
	IMPORT	|reg_n_deaths|
	IMPORT	|allocate_for_life_analysis|
	IMPORT	|oballoc|
	IMPORT	|reg_renumber|
	IMPORT	|max_regno|
	IMPORT	|rtx_class|
	IMPORT	|alloca|
	IMPORT	|regs_ever_live|
	IMPORT	|bzero|
	END
