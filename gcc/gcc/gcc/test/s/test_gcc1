; Generated by gcc 2.7.2 snapshot 970522 for ARM/RISC OS
__a1	RN	0
__a2	RN	1
__a3	RN	2
__a4	RN	3
__v1	RN	4
__v2	RN	5
__v3	RN	6
__v4	RN	7
__v5	RN	8
__v6	RN	9
__sl	RN	10
__fp	RN	11
__ip	RN	12
__sp	RN	13
__lr	RN	14
__pc	RN	15
__f0	FN	0
__f1	FN	1
__f2	FN	2
__f3	FN	3
__f4	FN	4
__f5	FN	5
__f6	FN	6
__f7	FN	7
	AREA |C$$code1|, CODE, READONLY
; GNU C version 2.7.2 snapshot 970522 (arm-riscos) compiled by CC.
; options passed:  -O2
; options enabled:  -fdefer-pop -fomit-frame-pointer -fcse-follow-jumps
; -fcse-skip-blocks -fexpensive-optimizations -fthread-jumps
; -fstrength-reduce -fpeephole -fforce-mem -ffunction-cse -finline
; -fkeep-static-consts -fcaller-saves -freg-struct-return
; -frerun-cse-after-loop -fschedule-insns -fschedule-insns2 -fexceptions
; -fsjlj-exceptions -fcommon -fverbose-asm -fgnu-linker -mapcs -mapcs-frame
; -mpoke-function-name -mapcs-stack-check

|gcc2_compiled.|
	IMPORT	|__gccmain|
	ALIGN
|LC..0|
	DCB &57, &65, &20, &72
	DCB &65, &61, &63, &68
	DCB &65, &64, &20, &68
	DCB &65, &72, &65, &2e
	DCB &0a, &00
	ALIGN
	EXPORT	|main|
	DCB &6d, &61, &69, &6e
	DCB &00
	ALIGN
	DCD	-16777208
|main|
	; args = 0, pretend = 0, frame = 432
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	sub	__ip, __sp, #432
	cmp	__ip, __sl
	bllt	|x$stack_overflow_1|
	sub	__sp, __sp, #432
	bl	|__gccmain|
	ldr	__a1, |L..4|
	bl	|setjmp|
	cmp	__a1, #0
	ldrne	__a1, |L..4|+4
	blne	|printf|
	blne	|__print_chunk_lists|
|L..2|
	moveq	__a1, __sp
	bleq	|foo|
|L..3|
	mov	__a1, #0
	ldmea	__fp, {__fp, __sp, __pc}^
|L..5|
	ALIGN
|L..4|
	DCD	|jmp|
	DCD	|LC..0|
	ALIGN
|LC..1|
	DCB &53, &6d, &61, &72
	DCB &74, &20, &76, &61
	DCB &6c, &75, &65, &73
	DCB &3a, &0a, &7a, &7a
	DCB &7a, &20, &3d, &20
	DCB &25, &64, &0a, &61
	DCB &31, &20, &3d, &20
	DCB &25, &64, &0a, &61
	DCB &32, &20, &3d, &20
	DCB &25, &64, &0a, &00
	ALIGN
|LC..2|
	DCB &61, &33, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &61, &34, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &61, &35, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &61, &36, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &00
	ALIGN
|LC..3|
	DCB &69, &20, &3d, &20
	DCB &25, &64, &0a, &72
	DCB &20, &3d, &20, &25
	DCB &64, &0a, &76, &20
	DCB &3d, &20, &25, &64
	DCB &0a, &73, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &74, &20, &3d, &20
	DCB &25, &64, &0a, &00
	ALIGN
|LC..4|
	DCB &78, &20, &3d, &20
	DCB &25, &64, &0a, &7a
	DCB &20, &3d, &20, &25
	DCB &64, &0a, &00
	ALIGN
	DCB &73, &6d, &61, &72
	DCB &74, &2e, &37, &00
	ALIGN
	DCD	-16777208
|smart.7|
	KEEP |smart.7|
	; args = 0, pretend = 0, frame = 12
	; frame_needed = 1, current_function_anonymous_args = 0
	stmfd	__sp!, {__sp, __lr, __pc}
	stmfd	__sp!, {__v1, __v5, __fp}
	add	__fp, __sp, #20
	mov	__v5, __ip
	cmp	__sp, __sl
	bllt	|x$stack_overflow|
	sub	__sp, __sp, #12
	str	__v5, [__sp, #8]
	mov	__a2, __a1
	ldr	__a1, |L..9|
	ldmib	__v5, {__a3, __a4}	; phole ldm
	ldr	__v1, [__v5, #0]
	bl	|printf|
	add	__a2, __v5, #12
	ldmia	__a2, {__a2, __a3, __a4}	; phole ldm
	ldr	__a1, [__a4, #4]
	ldr	__a4, [__a4, #0]
	str	__a1, [__sp, #0]
	ldr	__a1, |L..9|+4
	bl	|printf|
	ldr	__a2, [__v1, #8]
	ldr	__a3, [__v1, #0]
	ldr	__a1, [__v1, #4]
	ldr	__a4, [__v1, #12]
	str	__a1, [__sp, #0]
	ldr	__a1, [__v1, #16]
	str	__a1, [__sp, #4]
	ldr	__a1, |L..9|+8
	bl	|printf|
	ldr	__a1, |L..9|+12
	add	__a2, __v5, #24
	ldmia	__a2, {__a2, __a3}	; phole ldm
	bl	|printf|
	ldr	__a1, |L..9|+16
	mov	__a2, #1
	bl	|longjmp|
|L..10|
	ALIGN
|L..9|
	DCD	|LC..1|
	DCD	|LC..2|
	DCD	|LC..3|
	DCD	|LC..4|
	DCD	|jmp|
	ldmea	__fp, {__v1, __v5, __fp, __sp, __pc}^
	IMPORT	|__divsi3|
	ALIGN
|LC..5|
	DCB &42, &61, &72, &20
	DCB &56, &61, &6c, &75
	DCB &65, &73, &3a, &0a
	DCB &61, &20, &3d, &20
	DCB &25, &64, &0a, &69
	DCB &20, &3d, &20, &25
	DCB &64, &0a, &00
	ALIGN
|LC..6|
	DCB &72, &20, &3d, &20
	DCB &25, &64, &0a, &76
	DCB &20, &3d, &20, &25
	DCB &64, &0a, &73, &20
	DCB &3d, &20, &25, &64
	DCB &0a, &74, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &00
	ALIGN
|LC..7|
	DCB &61, &31, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &61, &32, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &61, &33, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &00
	ALIGN
|LC..8|
	DCB &61, &34, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &61, &35, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &61, &36, &20, &3d
	DCB &20, &25, &64, &0a
	DCB &00
	ALIGN
	DCB &62, &61, &72, &2e
	DCB &34, &00
	ALIGN
	DCD	-16777208
|bar.4|
	KEEP |bar.4|
	; args = 8, pretend = 0, frame = 36
	; frame_needed = 1, current_function_anonymous_args = 0
	stmfd	__sp!, {__sp, __lr, __pc}
	stmfd	__sp!, {__v5, __fp}
	add	__fp, __sp, #16
	mov	__v5, __ip
	cmp	__sp, __sl
	bllt	|x$stack_overflow|
	sub	__sp, __sp, #36
	str	__a4, [__sp, #20]
	str	__v5, [__sp, #4]
	str	__a1, [__sp, #8]
	str	__a2, [__sp, #12]
	str	__a3, [__sp, #16]
	add	__a4, __fp, #4
	str	__a4, [__sp, #24]
	ldr	__a1, [__v5, #0]
	mov	__a1, __a1, asl #5
	mov	__a1, __a1, lsr #3
	bl	|___arm_alloca_alloc|
	ldr	__a1, [__v5, #4]
	mov	__a1, __a1, asl #5
	mov	__a1, __a1, lsr #3
	bl	|___arm_alloca_alloc|
	mov	__a3, #56
	str	__a3, [__sp, #28]
	ldr	__a4, [__v5, #8]
	add	__a4, __a4, __a3
	str	__a4, [__sp, #32]
	mov	__a1, #55
	add	__ip, __sp, #4
	bl	|smart.7|
	ldr	__a1, |L..11|
	ldr	__a2, [__v5, #20]
	ldr	__a3, [__v5, #8]
	bl	|printf|
	ldr	__a2, [__v5, #0]
	ldr	__a3, [__v5, #12]
	ldr	__a1, [__v5, #16]
	ldr	__a4, [__v5, #4]
	str	__a1, [__sp, #0]
	ldr	__a1, |L..11|+4
	bl	|printf|
	ldr	__a1, |L..11|+8
	add	__a2, __sp, #28
	ldmia	__a2, {__a2, __a3}	; phole ldm
	bl	|printf|
	ldr	__a1, |L..11|+12
	add	__a2, __sp, #8
	ldmia	__a2, {__a2, __a3, __a4}	; phole ldm
	bl	|printf|
	ldr	__a1, |L..11|+16
	ldr	__a2, [__sp, #20]
	ldmib	__fp, {__a3, __a4}	; phole ldm
	bl	|printf|
	ldmea	__fp, {__v5, __fp, __sp, __pc}^
|L..12|
	ALIGN
|L..11|
	DCD	|LC..5|
	DCD	|LC..6|
	DCD	|LC..4|
	DCD	|LC..7|
	DCD	|LC..8|
	ALIGN
	EXPORT	|foo|
	DCB &66, &6f, &6f, &00
	ALIGN
	DCD	-16777212
|foo|
	; args = 0, pretend = 0, frame = 32
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	bllt	|x$stack_overflow|
	sub	__sp, __sp, #32
	str	__a1, [__sp, #28]
	mov	__a2, #2992
	add	__a2, __a2, #8
	str	__a2, [__sp, #8]
	mov	__a3, #4
	str	__a3, [__sp, #20]
	mov	__a4, #4992
	add	__a4, __a4, #8
	str	__a4, [__sp, #12]
	mov	__ip, #6
	str	__ip, [__sp, #24]
	mov	__a1, #2
	str	__a1, [__sp, #16]
	str	__ip, [__sp, #0]
	mov	__ip, #7
	str	__ip, [__sp, #4]
	add	__ip, __sp, #8
	bl	|bar.4|
	ldmea	__fp, {__fp, __sp, __pc}^
	ALIGN
	EXPORT	|ohyeah|
	DCB &6f, &68, &79, &65
	DCB &61, &68, &00
	ALIGN
	DCD	-16777208
|ohyeah|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	cmp	__sp, __a1
	movls	__a1, #1
	movs	__pc, __lr
	AREA |jmp|, DATA, COMMON
	% 96	; size=96
	;AREA |C$$code2|, CODE, READONLY
	IMPORT __main
	DCD __main
	IMPORT	|longjmp|
	IMPORT	|__print_chunk_lists|
	IMPORT	|printf|
	IMPORT	|setjmp|
	END
