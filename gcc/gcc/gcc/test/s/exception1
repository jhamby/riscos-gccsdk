; Generated by gcc egcs-2.90.01 970821 (gcc2-970802 experimental) for ARM/RISC OS
__a1	RN	0
__a2	RN	1
__a3	RN	2
__a4	RN	3
__v1	RN	4
__v2	RN	5
__v3	RN	6
__v4	RN	7
__v5	RN	8
__v6	RN	9
__sl	RN	10
__fp	RN	11
__ip	RN	12
__sp	RN	13
__lr	RN	14
__pc	RN	15
__f0	FN	0
__f1	FN	1
__f2	FN	2
__f3	FN	3
__f4	FN	4
__f5	FN	5
__f6	FN	6
__f7	FN	7
	AREA |C$$code1|, CODE, READONLY
; GNU C++ version egcs-2.90.01 970821 (gcc2-970802 experimental) (arm-riscos) compiled by CC.
; options passed:  -O2
; options enabled:  -fdefer-pop -fomit-frame-pointer -fcse-follow-jumps
; -fcse-skip-blocks -fexpensive-optimizations -fthread-jumps
; -fstrength-reduce -fpeephole -fforce-mem -ffunction-cse -finline
; -fkeep-static-consts -fcaller-saves -freg-struct-return
; -frerun-cse-after-loop -fschedule-insns -fschedule-insns2 -fexceptions
; -fsjlj-exceptions -fcommon -fverbose-asm -fgnu-linker -fregmove
; -falias-check -fargument-alias -mapcs -mapcs-frame -mpoke-function-name
; -mapcs-stack-check

|gcc2_compiled.|
	ALIGN
|LC..0|
	DCB &46, &6f, &6f, &3a
	DCB &3a, &46, &6f, &6f
	DCB &28, &29, &0a, &00
	ALIGN
|LC..1|
	DCB &46, &6f, &6f, &3a
	DCB &3a, &7e, &46, &6f
	DCB &6f, &28, &29, &0a
	DCB &00
	IMPORT	|__get_dynamic_handler_chain|
	ALIGN
|LC..2|
	DCB &41, &62, &6f, &75
	DCB &74, &20, &74, &6f
	DCB &20, &74, &68, &72
	DCB &6f, &77, &0a, &00
	IMPORT	|__sjthrow|
	ALIGN
|LC..3|
	DCB &77, &6f, &62, &62
	DCB &6c, &79, &00
	ALIGN
|LC..4|
	DCB &53, &68, &6f, &75
	DCB &6c, &64, &6e, &27
	DCB &74, &20, &67, &65
	DCB &74, &20, &68, &65
	DCB &72, &65, &0a, &00
	ALIGN
	EXPORT	|throwfn__Fv|
	DCB &74, &68, &72, &6f
	DCB &77, &66, &6e, &5f
	DCB &5f, &46, &76, &00
	ALIGN
	DCD	-16777204
|throwfn__Fv|
	; args = 0, pretend = 0, frame = 16
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	sub	__sp, __sp, #16
	ldr	__v1, |L..14|
	ldr	__a2, |L..14|+4
	ldr	__a1, [__v1, #0]
	bl	|fprintf|
	bl	|__get_dynamic_handler_chain|
	ldr	__a3, [__a1, #0]
	ldr	__a4, [__a3, #4]
	str	__a4, [__sp, #4]
	ldr	__a4, |L..14|+8
	str	__a4, [__sp, #8]
	str	__sp, [__sp, #12]
	add	__a4, __sp, #4
	str	__a4, [__a3, #4]
	ldr	__a2, |L..14|+12
	ldr	__a1, [__v1, #0]
	bl	|fprintf|
	bl	|__tfi|
	ldr	__a4, |L..14|+16
	str	__a1, [__a4, #0]
	mov	__a1, #4
	bl	|__builtin_new|
	mov	__a4, #5
	str	__a4, [__a1, #0]
	ldr	__a4, |L..14|+20
	str	__a1, [__a4, #0]
	ldr	__a3, |L..14|+24
	ldr	__a4, |L..14|+28
	str	__a4, [__a3, #0]
	bl	|__sjthrow|
|L..15|
	ALIGN
|L..14|
	DCD	|__stderr|
	DCD	|LC..0|
	DCD	|_$_3Foo|
	DCD	|LC..2|
	DCD	|__eh_type|
	DCD	|__eh_value|
	DCD	|__eh_cleanup|
	DCD	|__empty|
	ldmea	__fp, {__v1, __fp, __sp, __pc}^
	IMPORT	|__gccmain|
	ALIGN
|LC..5|
	DCB &45, &6e, &74, &65
	DCB &72, &65, &64, &20
	DCB &6d, &61, &69, &6e
	DCB &0a, &00
	ALIGN
|LC..9|
	DCB &43, &61, &75, &67
	DCB &68, &74, &20, &61
	DCB &20, &27, &25, &73
	DCB &27, &0a, &00
	IMPORT	|__sjpopnthrow|
	IMPORT	|__terminate|
	ALIGN
|LC..12|
	DCB &48, &6f, &77, &20
	DCB &64, &69, &64, &20
	DCB &49, &20, &63, &61
	DCB &74, &63, &68, &20
	DCB &74, &68, &69, &73
	DCB &3f, &0a, &00
	ALIGN
|LC..14|
	DCB &45, &78, &69, &74
	DCB &69, &6e, &67, &20
	DCB &6d, &61, &69, &6e
	DCB &2e, &0a, &00
	ALIGN
	EXPORT	|main|
	DCB &6d, &61, &69, &6e
	DCB &00
	ALIGN
	DCD	-16777208
|main|
	; args = 0, pretend = 0, frame = 236
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __v3, __v4, __v5, __v6, __fp, __ip, __lr, __pc}
	stfe	__f7, [__sp, #-12]!
	stfe	__f6, [__sp, #-12]!
	stfe	__f5, [__sp, #-12]!
	stfe	__f4, [__sp, #-12]!
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	sub	__sp, __sp, #236
	add	__a4, __fp, #4
	str	__a4, [__v6, #24]
	bl	|__gccmain|
	ldr	__a4, |L..51|
	ldr	__a2, |L..51|+4
	ldr	__a1, [__a4, #0]
	bl	|fprintf|
	bl	|__get_dynamic_handler_chain|
	str	__a1, [__v6, #172]
	ldr	__a4, [__a1, #0]
	str	__a4, [__v6, #0]
	add	__ip, __v6, #8
	str	__ip, [__v6, #176]
	mov	__a4, #0
	str	__a4, [__v6, #4]
	str	__v6, [__ip, #0]
	ldr	__a4, |L..51|+8
	str	__a4, [__ip, #4]
	bl	|___arm_alloca_block_init|
	ldr	__ip, [__v6, #176]
	str	__a1, [__ip, #8]
	mov	__a4, #0
	b	|L..20|
|L..19|
	ldr	__a4, [__v6, #24]
	sub	__fp, __a4, #4
	mov	__lr, __pc
	mov	__pc, __v5
	mov	__a4, #1
|L..20|
	cmp	__a4, #0
	bne	|L..18|
	ldr	__ip, [__v6, #172]
	str	__v6, [__ip, #0]
	bl	|throwfn__Fv|
	bl	|__get_dynamic_handler_chain|
	ldr	__a4, [__a1, #0]
	ldr	__a4, [__a4, #0]
	str	__a4, [__a1, #0]
|L..21|
	ldr	__a4, |L..51|
	ldr	__a2, |L..51|+12
	ldr	__a1, [__a4, #0]
	bl	|fprintf|
	mov	__a1, #0
	b	|L..49|
|L..18|
	bl	|__tfPCc|
	ldr	__v5, |L..51|+16
	ldr	__v1, |L..51|+20
	ldr	__a2, [__v5, #0]
	ldr	__a3, [__v1, #0]
	bl	|__throw_type_match_rtti|
	str	__a1, [__v6, #180]
	cmp	__a1, #0
	beq	|L..22|
	bl	|__get_dynamic_handler_chain|
	str	__a1, [__v6, #184]
	ldr	__a4, [__a1, #0]
	str	__a4, [__v6, #28]
	add	__ip, __v6, #36
	str	__ip, [__v6, #188]
	mov	__a4, #0
	str	__a4, [__v6, #32]
	str	__v6, [__ip, #0]
	ldr	__a4, |L..51|+24
	str	__a4, [__ip, #4]
	bl	|___arm_alloca_block_init|
	ldr	__ip, [__v6, #188]
	str	__a1, [__ip, #8]
	mov	__v1, #0
	b	|L..26|
|L..25|
	ldr	__a4, [__v6, #24]
	mov	__v1, #1
	sub	__fp, __a4, #4
	mov	__lr, __pc
	mov	__pc, __v5
|L..26|
	cmp	__v1, #0
	bne	|L..24|
	ldr	__ip, [__v6, #184]
	add	__a4, __v6, #28
	str	__a4, [__ip, #0]
	ldr	__a3, |L..51|+28
	mov	__a4, #1
	strb	__a4, [__a3, #0]
	bl	|__get_dynamic_handler_chain|
	str	__a1, [__v6, #196]
	ldr	__ip, [__v6, #180]
	ldr	__a4, [__a1, #0]
	str	__ip, [__v6, #192]
	str	__a4, [__v6, #52]
	str	__v1, [__v6, #56]
	add	__ip, __v6, #60
	str	__ip, [__v6, #200]
	str	__v6, [__ip, #0]
	ldr	__a4, |L..51|+32
	str	__a4, [__ip, #4]
	bl	|___arm_alloca_block_init|
	ldr	__ip, [__v6, #200]
	str	__a1, [__ip, #8]
	mov	__v1, #0
	b	|L..30|
|L..29|
	ldr	__a4, [__v6, #24]
	mov	__v1, #1
	sub	__fp, __a4, #4
	mov	__lr, __pc
	mov	__pc, __v5
|L..30|
	cmp	__v1, #0
	bne	|L..28|
	ldr	__ip, [__v6, #196]
	add	__a4, __v6, #52
	str	__a4, [__ip, #0]
	ldr	__a2, |L..51|+36
	ldr	__a3, [__v6, #192]
	ldr	__a4, |L..51|
	ldr	__a1, [__a4, #0]
	bl	|fprintf|
	b	|L..50|
|L..28|
	bl	|__sjpopnthrow|
|L..22|
	bl	|__tfi|
	ldr	__a2, [__v5, #0]
	ldr	__a3, [__v1, #0]
	bl	|__throw_type_match_rtti|
	cmp	__a1, #0
	beq	|L..31|
	bl	|__get_dynamic_handler_chain|
	str	__a1, [__v6, #204]
	ldr	__ip, [__v6, #180]
	ldr	__a4, [__a1, #0]
	str	__ip, [__v6, #80]
	str	__a4, [__v6, #76]
	add	__ip, __v6, #84
	str	__ip, [__v6, #208]
	str	__v6, [__ip, #0]
	ldr	__a4, |L..51|+40
	str	__a4, [__ip, #4]
	bl	|___arm_alloca_block_init|
	ldr	__ip, [__v6, #208]
	str	__a1, [__ip, #8]
	mov	__v1, #0
	b	|L..35|
|L..34|
	ldr	__a4, [__v6, #24]
	mov	__v1, #1
	sub	__fp, __a4, #4
	mov	__lr, __pc
	mov	__pc, __v5
|L..35|
	cmp	__v1, #0
	bne	|L..33|
	ldr	__ip, [__v6, #204]
	add	__a4, __v6, #76
	str	__a4, [__ip, #0]
	ldr	__a3, |L..51|+28
	mov	__a4, #1
	strb	__a4, [__a3, #0]
	bl	|__get_dynamic_handler_chain|
	str	__a1, [__v6, #212]
	ldr	__a4, [__a1, #0]
	str	__a4, [__v6, #100]
	str	__v1, [__v6, #104]
	add	__ip, __v6, #108
	str	__ip, [__v6, #216]
	str	__v6, [__ip, #0]
	ldr	__a4, |L..51|+44
	str	__a4, [__ip, #4]
	bl	|___arm_alloca_block_init|
	ldr	__ip, [__v6, #216]
	str	__a1, [__ip, #8]
	mov	__v1, #0
	b	|L..39|
|L..38|
	ldr	__a4, [__v6, #24]
	mov	__v1, #1
	sub	__fp, __a4, #4
	mov	__lr, __pc
	mov	__pc, __v5
|L..39|
	cmp	__v1, #0
	bne	|L..37|
	ldr	__ip, [__v6, #212]
	add	__a4, __v6, #100
	str	__a4, [__ip, #0]
	ldr	__a2, |L..51|+48
	ldr	__a4, |L..51|
	ldr	__a1, [__a4, #0]
	bl	|fprintf|
|L..50|
	bl	|__get_dynamic_handler_chain|
	ldr	__a4, [__a1, #0]
	ldr	__a4, [__a4, #0]
	str	__a4, [__a1, #0]
	bl	|__get_dynamic_handler_chain|
	ldr	__a4, [__a1, #0]
	ldr	__a4, [__a4, #0]
	str	__a4, [__a1, #0]
	ldr	__a4, |L..51|+52
	mov	__lr, __pc
	ldr	__pc, [__a4, #0]
	ldr	__a4, |L..51|+16
	str	__v1, [__a4, #0]
	ldr	__a4, |L..51|+28
	strb	__v1, [__a4, #0]
	b	|L..21|
|L..24|
	bl	|__get_dynamic_handler_chain|
	str	__a1, [__v6, #220]
	ldr	__a4, [__a1, #0]
	str	__a4, [__v6, #124]
	add	__ip, __v6, #132
	str	__ip, [__v6, #224]
	mov	__a4, #0
	str	__a4, [__v6, #128]
	str	__v6, [__ip, #0]
	ldr	__a4, |L..51|+56
	str	__a4, [__ip, #4]
	bl	|___arm_alloca_block_init|
	ldr	__ip, [__v6, #224]
	str	__a1, [__ip, #8]
	mov	__v1, #0
	b	|L..43|
|L..42|
	ldr	__a4, [__v6, #24]
	mov	__v1, #1
	sub	__fp, __a4, #4
	mov	__lr, __pc
	mov	__pc, __v5
|L..43|
	cmp	__v1, #0
	bne	|L..41|
	ldr	__ip, [__v6, #220]
	add	__a4, __v6, #124
	str	__a4, [__ip, #0]
	ldr	__a4, |L..51|+52
	mov	__lr, __pc
	ldr	__pc, [__a4, #0]
	ldr	__a4, |L..51|+16
	str	__v1, [__a4, #0]
	ldr	__a4, |L..51|+28
	strb	__v1, [__a4, #0]
	bl	|__get_dynamic_handler_chain|
	ldr	__a4, [__a1, #0]
	ldr	__a4, [__a4, #0]
	str	__a4, [__a1, #0]
	bl	|__sjthrow|
|L..37|
	bl	|__sjpopnthrow|
|L..41|
	bl	|__terminate|
|L..31|
	bl	|__sjthrow|
|L..52|
	ALIGN
|L..51|
	DCD	|__stderr|
	DCD	|LC..5|
	DCD	|L..19|
	DCD	|LC..14|
	DCD	|__eh_type|
	DCD	|__eh_value|
	DCD	|L..25|
	DCD	|__eh_in_catch|
	DCD	|L..29|
	DCD	|LC..9|
	DCD	|L..34|
	DCD	|L..38|
	DCD	|LC..12|
	DCD	|__eh_cleanup|
	DCD	|L..42|
|L..33|
	bl	|__get_dynamic_handler_chain|
	str	__a1, [__v6, #228]
	ldr	__a4, [__a1, #0]
	str	__a4, [__v6, #148]
	add	__ip, __v6, #156
	str	__ip, [__v6, #232]
	mov	__a4, #0
	str	__a4, [__v6, #152]
	str	__v6, [__ip, #0]
	ldr	__a4, |L..53|
	str	__a4, [__ip, #4]
	bl	|___arm_alloca_block_init|
	ldr	__ip, [__v6, #232]
	str	__a1, [__ip, #8]
	mov	__v1, #0
	b	|L..47|
|L..46|
	ldr	__a4, [__v6, #24]
	mov	__v1, #1
	sub	__fp, __a4, #4
	mov	__lr, __pc
	mov	__pc, __v5
|L..47|
	cmp	__v1, #0
	bne	|L..45|
	ldr	__ip, [__v6, #228]
	add	__a4, __v6, #148
	str	__a4, [__ip, #0]
	ldr	__a4, |L..53|+4
	mov	__lr, __pc
	ldr	__pc, [__a4, #0]
	ldr	__a4, |L..53|+8
	str	__v1, [__a4, #0]
	ldr	__a4, |L..53|+12
	strb	__v1, [__a4, #0]
	bl	|__get_dynamic_handler_chain|
	ldr	__a4, [__a1, #0]
	ldr	__a4, [__a4, #0]
	str	__a4, [__a1, #0]
	bl	|__sjthrow|
|L..45|
	bl	|__terminate|
|L..54|
	ALIGN
|L..53|
	DCD	|L..46|
	DCD	|__eh_cleanup|
	DCD	|__eh_type|
	DCD	|__eh_in_catch|
|L..49|
	ldfe	__f7, [__fp, #-48]
	ldfe	__f6, [__fp, #-60]
	ldfe	__f5, [__fp, #-72]
	ldfe	__f4, [__fp, #-84]
	ldmea	__fp, {__v1, __v2, __v3, __v4, __v5, __v6, __fp, __sp, __pc}^
	AREA |__tiPCc|, DATA, COMMON
	% 12	; size=12
	AREA |C$$code2|, CODE, READONLY
	ALIGN
|LC..16|
	DCB &50, &43, &63, &00
	ALIGN
	DCB &5f, &5f, &74, &66
	DCB &50, &43, &63, &00
	ALIGN
	DCD	-16777208
|__tfPCc|
	KEEP |__tfPCc|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	ldr	__v1, |L..59|
	ldr	__a4, [__v1, #0]
	cmp	__a4, #0
	bne	|L..58|
	bl	|__tfCc|
	ldr	__a2, |L..59|+4
	ldr	__a3, |L..59|+8
	mov	__a1, __v1
	bl	|__rtti_ptr|
|L..58|
	mov	__a1, __v1
	ldmea	__fp, {__v1, __fp, __sp, __pc}^
|L..60|
	ALIGN
|L..59|
	DCD	|__tiPCc|
	DCD	|LC..16|
	DCD	|__tiCc|
	AREA |__tiCc|, DATA, COMMON
	% 16	; size=16
	AREA |C$$code3|, CODE, READONLY
	ALIGN
|LC..17|
	DCB &43, &63, &00
	ALIGN
	DCB &5f, &5f, &74, &66
	DCB &43, &63, &00
	ALIGN
	DCD	-16777208
|__tfCc|
	KEEP |__tfCc|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	ldr	__v1, |L..65|
	ldr	__a4, [__v1, #0]
	cmp	__a4, #0
	bne	|L..64|
	bl	|__tfc|
	ldr	__a2, |L..65|+4
	ldr	__a4, |L..65|+8
	mov	__a1, __v1
	mov	__a3, #1
	bl	|__rtti_attr|
|L..64|
	mov	__a1, __v1
	ldmea	__fp, {__v1, __fp, __sp, __pc}^
|L..66|
	ALIGN
|L..65|
	DCD	|__tiCc|
	DCD	|LC..17|
	DCD	|__tic|
	AREA |__tiPc|, DATA, COMMON
	% 12	; size=12
	AREA |C$$code4|, CODE, READONLY
	ALIGN
|LC..18|
	DCB &50, &63, &00
	ALIGN
	DCB &5f, &5f, &74, &66
	DCB &50, &63, &00
	ALIGN
	DCD	-16777208
|__tfPc|
	KEEP |__tfPc|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	ldr	__v1, |L..71|
	ldr	__a4, [__v1, #0]
	cmp	__a4, #0
	bne	|L..70|
	bl	|__tfc|
	ldr	__a2, |L..71|+4
	ldr	__a3, |L..71|+8
	mov	__a1, __v1
	bl	|__rtti_ptr|
|L..70|
	mov	__a1, __v1
	ldmea	__fp, {__v1, __fp, __sp, __pc}^
|L..72|
	ALIGN
|L..71|
	DCD	|__tiPc|
	DCD	|LC..18|
	DCD	|__tic|
	ALIGN
	DCB &5f, &24, &5f, &33
	DCB &46, &6f, &6f, &00
	ALIGN
	DCD	-16777208
|_$_3Foo|
	KEEP |_$_3Foo|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	ldr	__a4, |L..73|
	mov	__v1, __a2
	ldr	__a2, |L..73|+4
	mov	__v2, __a1
	ldr	__a1, [__a4, #0]
	bl	|fprintf|
	tst	__v1, #1
	movne	__a1, __v2
	ldmeqea	__fp, {__v1, __v2, __fp, __sp, __pc}^
	ldmea	__fp, {__v1, __v2, __fp, __sp, __lr}
	b	|__builtin_delete|
|L..74|
	ALIGN
|L..73|
	DCD	|__stderr|
	DCD	|LC..1|
	AREA |__eh_pc|, DATA, COMMON
	% 4	; size=4
	AREA |__eh_type|, DATA, COMMON
	% 4	; size=4
	AREA |__eh_value|, DATA, COMMON
	% 4	; size=4
	AREA |__eh_cleanup|, DATA, COMMON
	% 4	; size=4
	AREA |__eh_in_catch|, DATA, COMMON
	% 4	; size=1
	AREA |C$$code5|, CODE, READONLY
	IMPORT	|__main|
	DCD	|__main|
	IMPORT	|__tic|
	IMPORT	|__rtti_attr|
	IMPORT	|__tfc|
	IMPORT	|__tiCc|
	IMPORT	|__rtti_ptr|
	IMPORT	|__throw_type_match_rtti|
	IMPORT	|__empty|
	IMPORT	|__tfi|
	IMPORT	|__builtin_new|
	IMPORT	|__3Foo|
	IMPORT	|__builtin_delete|
	IMPORT	|__stderr|
	IMPORT	|fprintf|
	END
