; Generated by gcc egcs-1.0.1 for ARM/RISC OS
__a1	RN	0
__a2	RN	1
__a3	RN	2
__a4	RN	3
__v1	RN	4
__v2	RN	5
__v3	RN	6
__v4	RN	7
__v5	RN	8
__v6	RN	9
__sl	RN	10
__fp	RN	11
__ip	RN	12
__sp	RN	13
__lr	RN	14
__pc	RN	15
__f0	FN	0
__f1	FN	1
__f2	FN	2
__f3	FN	3
__f4	FN	4
__f5	FN	5
__f6	FN	6
__f7	FN	7
	AREA |C$$code1|, CODE, READONLY
|gcc2_compiled.|
	EXPORT	|set_alignment|
	AREA |C$$data1|, DATA
	ALIGN
|set_alignment|
	DCD	0
	AREA |C$$code2|, CODE, READONLY
	ALIGN
	EXPORT	|get_pending_sizes|
|get_pending_sizes|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	ldr	__a3, |L..7|
	mov	__a4, #0
	str	__a4, [__a3, #0]
	movs	__pc, __lr
|L..8|
	ALIGN
|L..7|
	DCD	|pending_sizes|
	ALIGN
	EXPORT	|mode_for_size|
	DCB &6d, &6f, &64, &65
	DCB &5f, &66, &6f, &72
	DCB &5f, &73, &69, &7a
	DCB &65, &00
	ALIGN
	DCD	-16777200
|mode_for_size|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	; I don't think this function clobbers lr
	cmp	__a2, #0
	movne	__a1, #0
	moveqs	__pc, __lr
	b	|GET_MODE_BITSIZE|
	ALIGN
	DCB &73, &6d, &61, &6c
	DCB &6c, &65, &73, &74
	DCB &5f, &6d, &6f, &64
	DCB &65, &5f, &66, &6f
	DCB &72, &5f, &73, &69
	DCB &7a, &65, &00
	ALIGN
	DCD	-16777192
|smallest_mode_for_size|
	KEEP |smallest_mode_for_size|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	; I don't think this function clobbers lr
	bl	|abort|
	ldmea	__fp, {__fp, __sp, __pc}^
	EXPORT	|spec_size|
	AREA |C$$data2|, DATA
	ALIGN
|spec_size|
	DCD	0
	EXPORT	|const_size|
	ALIGN
|const_size|
	DCD	0
	EXPORT	|var_size|
	ALIGN
|var_size|
	DCD	0
	AREA |C$$code3|, CODE, READONLY
	ALIGN
	EXPORT	|make_signed_type|
	DCB &6d, &61, &6b, &65
	DCB &5f, &73, &69, &67
	DCB &6e, &65, &64, &5f
	DCB &74, &79, &70, &65
	DCB &00
	ALIGN
	DCD	-16777196
|make_signed_type|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	ldr	__a3, |L..26|
	ldr	__a4, [__a3, #0]
	cmp	__a4, #0
	ldreq	__a4, |L..26|+4
	ldreq	__a4, [__a4, #0]
	streq	__a4, [__a3, #0]
|L..25|
	ldr	__v1, |L..26|+4
	ldr	__a1, [__v1, #0]
	bl	|layout_type|
	ldr	__a1, [__v1, #0]
	ldmea	__fp, {__v1, __fp, __sp, __pc}^
|L..27|
	ALIGN
|L..26|
	DCD	|sizetype|
	DCD	|type|
	ALIGN
	EXPORT	|make_unsigned_type|
	DCB &6d, &61, &6b, &65
	DCB &5f, &75, &6e, &73
	DCB &69, &67, &6e, &65
	DCB &64, &5f, &74, &79
	DCB &70, &65, &00
	ALIGN
	DCD	-16777196
|make_unsigned_type|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	ldr	__a3, |L..30|
	ldr	__a4, [__a3, #0]
	cmp	__a4, #0
	ldreq	__a4, |L..30|+4
	ldreq	__a4, [__a4, #0]
	streq	__a4, [__a3, #0]
|L..29|
	ldr	__v1, |L..30|+4
	ldr	__a1, [__v1, #0]
	bl	|fixup_unsigned_type|
	ldr	__a1, [__v1, #0]
	ldmea	__fp, {__v1, __fp, __sp, __pc}^
|L..31|
	ALIGN
|L..30|
	DCD	|sizetype|
	DCD	|type|
	IMPORT	|__modsi3|
	ALIGN
	EXPORT	|get_best_mode|
|get_best_mode|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	movs	__pc, __lr
	ALIGN
	EXPORT	|save_storage_status|
|save_storage_status|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	movs	__pc, __lr
	ALIGN
	EXPORT	|restore_storage_status|
|restore_storage_status|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	movs	__pc, __lr
	AREA |sizetype|, DATA, COMMON
	% 4	; size=4
	AREA |size_zero_node|, DATA, COMMON
	% 4	; size=4
	AREA |size_one_node|, DATA, COMMON
	% 4	; size=4
	AREA |maximum_field_alignment|, DATA, COMMON
	% 4	; size=4
	AREA |pending_sizes|, DATA, COMMON
	% 4	; size=4
	AREA |immediate_size_expand|, DATA, COMMON
	% 4	; size=4
	AREA |chain|, DATA, COMMON
	% 4	; size=4
	AREA |size|, DATA, COMMON
	% 4	; size=4
	AREA |value|, DATA, COMMON
	% 4	; size=4
	AREA |divisor|, DATA, COMMON
	% 4	; size=4
	AREA |decl|, DATA, COMMON
	% 4	; size=4
	AREA |known_align|, DATA, COMMON
	% 4	; size=4
	AREA |rec|, DATA, COMMON
	% 4	; size=4
	AREA |record_align|, DATA, COMMON
	% 4	; size=4
	AREA |pending_statics|, DATA, COMMON
	% 4	; size=4
	AREA |var_align|, DATA, COMMON
	% 4	; size=4
	AREA |field|, DATA, COMMON
	% 4	; size=4
	AREA |C$$zidata1|,NOINIT
|desired_align|
	% 4	; size=4
	AREA |union_align|, DATA, COMMON
	% 4	; size=4
	AREA |type|, DATA, COMMON
	% 4	; size=4
	AREA |old|, DATA, COMMON
	% 4	; size=4
	AREA |element|, DATA, COMMON
	% 4	; size=4
	AREA |lb|, DATA, COMMON
	% 4	; size=4
	AREA |length|, DATA, COMMON
	% 4	; size=4
	AREA |bitpos|, DATA, COMMON
	% 4	; size=4
	AREA |size_in_bits|, DATA, COMMON
	% 4	; size=4
	AREA |rounded_size|, DATA, COMMON
	% 4	; size=4
	AREA |align|, DATA, COMMON
	% 4	; size=4
	AREA |variant|, DATA, COMMON
	% 4	; size=4
	IMPORT	|fixup_unsigned_type|
	IMPORT	|layout_type|
	IMPORT	|build_int_2|
	IMPORT	|TYPE_NEXT_VARIANT|
	IMPORT	|TYPE_DOMAIN|
	IMPORT	|TYPE_MAX_VALUE|
	IMPORT	|DECL_FIELD_BITPOS|
	IMPORT	|TREE_INT_CST_LOW|
	IMPORT	|size_binop|
	IMPORT	|TYPE_MIN_VALUE|
	IMPORT	|TREE_TYPE|
	IMPORT	|TYPE_PRECISION|
	IMPORT	|suspend_momentary|
	IMPORT	|DECL_ALIGN|
	IMPORT	|TYPE_SIZE|
	IMPORT	|MIN|
	IMPORT	|round_up|
	IMPORT	|TYPE_ALIGN|
	IMPORT	|MAX|
	IMPORT	|size_int|
	IMPORT	|TYPE_MODE|
	IMPORT	|DECL_FIELD_SIZE|
	IMPORT	|TREE_CODE|
	IMPORT	|abort|
	IMPORT	|GET_MODE_WIDER_MODE|
	IMPORT	|GET_CLASS_NARROWEST_MODE|
	IMPORT	|GET_MODE_BITSIZE|
	IMPORT	|save_expr|
	IMPORT	|TREE_VALUE|
	IMPORT	|SAVE_EXPR_CONTEXT|
	IMPORT	|TREE_CHAIN|
	END
