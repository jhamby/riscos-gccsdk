; Generated by gcc egcs-2.90.01 970821 (gcc2-970802 experimental) for ARM/RISC OS
__a1	RN	0
__a2	RN	1
__a3	RN	2
__a4	RN	3
__v1	RN	4
__v2	RN	5
__v3	RN	6
__v4	RN	7
__v5	RN	8
__v6	RN	9
__sl	RN	10
__fp	RN	11
__ip	RN	12
__sp	RN	13
__lr	RN	14
__pc	RN	15
__f0	FN	0
__f1	FN	1
__f2	FN	2
__f3	FN	3
__f4	FN	4
__f5	FN	5
__f6	FN	6
__f7	FN	7
	AREA |C$$code1|, CODE, READONLY
; GNU C version egcs-2.90.01 970821 (gcc2-970802 experimental) (arm-riscos) compiled by CC.
; options passed:  -O2
; options enabled:  -fdefer-pop -fomit-frame-pointer -fcse-follow-jumps
; -fcse-skip-blocks -fexpensive-optimizations -fthread-jumps
; -fstrength-reduce -fpeephole -fforce-mem -ffunction-cse -finline
; -fkeep-static-consts -fcaller-saves -freg-struct-return
; -frerun-cse-after-loop -fschedule-insns -fschedule-insns2 -fexceptions
; -fsjlj-exceptions -fcommon -fverbose-asm -fgnu-linker -fregmove
; -falias-check -fargument-alias -mapcs -mapcs-frame -mpoke-function-name
; -mapcs-stack-check

|gcc2_compiled.|
	ALIGN
	EXPORT	|__unixlib_default_sigaction|
	DCB &5f, &5f, &75, &6e
	DCB &69, &78, &6c, &69
	DCB &62, &5f, &64, &65
	DCB &66, &61, &75, &6c
	DCB &74, &5f, &73, &69
	DCB &67, &61, &63, &74
	DCB &69, &6f, &6e, &00
	ALIGN
	DCD	-16777188
|__unixlib_default_sigaction|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 0, current_function_anonymous_args = 0
	stmfd	__sp!, {__v1, __v2, __lr}
	mov	__a3, #0
	str	__a3, [__a1, #12]
	mov	__a4, #2
	str	__a4, [__a1, #16]
	str	__a3, [__a1, #8]
	mov	__v1, #1
	mov	__v2, #8
	add	__lr, __a1, #8
	add	__ip, __a1, #12
|L..5|
	ldmia	__lr, {__a1-__a3}	; load multiple
	add	__a4, __ip, __v2
	stmia	__a4, {__a1-__a3}	; str multiple
	add	__ip, __ip, #12
	add	__v1, __v1, #1
	cmp	__v1, #33
	ble	|L..5|
	ldmfd	__sp!, {__v1, __v2, __pc}^
	ALIGN
	EXPORT	|__unixlib_internal_post_signal|
	DCB &5f, &5f, &75, &6e
	DCB &69, &78, &6c, &69
	DCB &62, &5f, &69, &6e
	DCB &74, &65, &72, &6e
	DCB &61, &6c, &5f, &70
	DCB &6f, &73, &74, &5f
	DCB &73, &69, &67, &6e
	DCB &61, &6c, &00
	ALIGN
	DCD	-16777184
|__unixlib_internal_post_signal|
	; args = 0, pretend = 0, frame = 8
	; frame_needed = 1, current_function_anonymous_args = 0
	mov	__ip, __sp
	stmfd	__sp!, {__v1, __v2, __v3, __v4, __fp, __ip, __lr, __pc}
	sub	__fp, __ip, #4
	cmp	__sp, __sl
	IMPORT	|x$stack_overflow|
	bllt	|x$stack_overflow|
	sub	__sp, __sp, #8
	mov	__v2, __a1
	subs	__v1, __a2, #0
	beq	|L..9|
|L..10|
	ldr	__a4, |L..56|
	ldr	__a1, [__a4, #0]
	ldr	__a4, [__a1, #1792]
	add	__a4, __a4, #1
	str	__a4, [__a1, #1792]
	add	__a4, __v1, __v1, asl #1
	add	__a4, __v2, __a4, asl #2
	ldr	__ip, [__a4, #8]
	cmp	__ip, #0
	bne	|L..13|
	mov	__a4, #3342336
	str	__a4, [__sp, #0]
	mov	__a2, #3
	sub	__a3, __v1, #1
	mov	__a4, __a4, lsr __a3
	tst	__a4, #1
	beq	|L..14|
	mov	__a2, __ip
	b	|L..23|
|L..54|
	ldr	__a4, [__v2, #4]
	mov	__a3, #1
	bic	__a4, __a4, __a3, asl __a2
	str	__a4, [__v2, #4]
	b	|L..10|
|L..14|
	mov	__a4, #138412032
	add	__a4, __a4, #819200
	str	__a4, [__sp, #0]
	mov	__a4, __a4, lsr __a3
	tst	__a4, #1
	beq	|L..16|
|L..55|
	mov	__a2, #1
	b	|L..23|
|L..16|
	mov	__a4, #3824
	add	__a4, __a4, #12
	str	__a4, [__sp, #0]
	mov	__a4, __a4, lsr __a3
	tst	__a4, #1
	movne	__a2, #2
	bne	|L..23|
|L..18|
	cmp	__v1, #29
	bne	|L..23|
	ldr	__a3, [__a1, #1580]
	ldr	__a4, [__a1, #1584]
	cmp	__a3, __a4
	bne	|L..55|
	ldr	__ip, |L..56|+4
	mov	__a2, #4
	b	|L..23|
|L..13|
	cmp	__ip, #1
	movne	__a2, #4
	moveq	__a2, #1
|L..23|
	sub	__a3, __v1, #1
	mov	__a4, #3342336
	mov	__a4, __a4, lsr __a3
	tst	__a4, #1
	ldrne	__a4, [__v2, #4]
	bicne	__a4, __a4, #262144
	strne	__a4, [__v2, #4]
	bne	|L..12|
|L..26|
	cmp	__v1, #19
	bne	|L..12|
	ldr	__a4, [__v2, #4]
	bic	__a4, __a4, #3342336
	str	__a4, [__v2, #4]
	ldr	__a4, |L..56|
	ldr	__a3, [__a4, #0]
	ldrb	__a4, [__a3, #1608]
	and	__a4, __a4, #247
	strb	__a4, [__a3, #1608]
|L..12|
	ldr	__a4, |L..56|
	ldr	__a4, [__a4, #0]
	ldr	__a4, [__a4, #2444]
	cmp	__a4, #0
	beq	|L..29|
	cmp	__a2, #0
	bne	|L..29|
	tst	__v1, #3276800
	movne	__v1, #9
	movne	__a2, #3
|L..29|
	ldr	__a4, [__v2, #0]
	sub	__a3, __v1, #1
	mov	__a4, __a4, lsr __a3
	tst	__a4, #1
	beq	|L..32|
	cmp	__a2, #1
	bne	|L..31|
|L..32|
	cmp	__v1, #9
	beq	|L..30|
	ldr	__a4, |L..56|
	ldr	__a4, [__a4, #0]
	ldr	__a4, [__a4, #2448]
	cmp	__a4, #0
	beq	|L..30|
|L..31|
	ldr	__a4, [__v2, #4]
	mov	__a3, #1
	mov	__a2, __a3
	sub	__a3, __v1, #1
	orr	__a4, __a4, __a2, asl __a3
	str	__a4, [__v2, #4]
|L..30|
	cmp	__a2, #4
	ldrls	__pc, [__pc, __a2, asl #2]
	b	|L..9|
	ALIGN
|L..45|
	DCD	|L..34|
	DCD	|L..9|
	DCD	|L..39|
	DCD	|L..39|
	DCD	|L..43|
|L..34|
	ldr	__a4, |L..56|
	ldr	__a3, [__a4, #0]
	ldrb	__a4, [__a3, #1608]
	tst	__a4, #8
	orreq	__a4, __a4, #8
	streqb	__a4, [__a3, #1608]
|L..35|
	bl	|sigwakeup|
	b	|L..9|
|L..39|
	mov	__v2, __v1
	cmp	__a2, #3
	moveq	__a1, __v1
	bleq	|__write_termination|
	beq	|L..41|
|L..40|
	cmp	__a2, #2
	bne	|L..41|
	mov	__a1, __v1
	bl	|__write_corefile|
	orr	__a4, __v1, #128
	cmp	__a1, #0
	moveq	__v2, __v1
	movne	__v2, __a4
|L..41|
	mov	__a1, __v2
	bl	|_exit|
|L..43|
	ldr	__a3, [__v2, #4]
	sub	__a2, __v1, #1
	mov	__a4, #1
	mov	__a4, __a4, asl __a2
	bic	__a3, __a3, __a4
	str	__a3, [__v2, #4]
	ldr	__v3, [__v2, #0]
	mov	__a1, #12
	add	__a3, __v1, __v1, asl #1
	add	__a3, __v2, __a3, asl #2
	ldr	__a2, [__a3, __a1]
	orr	__a4, __a4, __a2
	orr	__a4, __v3, __a4
	str	__a4, [__v2, #0]
	mov	__a4, #0
	str	__a4, [__a3, #8]
	str	__a4, [__a3, __a1]
	mov	__a2, #16
	ldr	__a4, [__a3, __a2]
	mov	__v4, #2
	str	__v4, [__a3, __a2]
	mov	__a1, __v2
	mov	__a2, __ip
	mov	__a3, __v1
	bl	|__unixlib_setup_sighandler|
	cmp	__a1, #0
	movne	__v1, #3
	movne	__a2, __v4
	bne	|L..39|
|L..44|
	str	__v3, [__v2, #0]
|L..9|
	ldr	__a4, |L..56|
	ldr	__a4, [__a4, #0]
	ldr	__a4, [__a4, #2448]
	cmp	__a4, #0
	bne	|L..47|
	ldmia	__v2, {__a3, __a4}	; phole ldm
	bic	__a4, __a4, __a3
	str	__a4, [__sp, #4]
	cmp	__a4, #0
	beq	|L..47|
	mov	__v1, #1
	mov	__a3, __a4
|L..51|
	sub	__a2, __v1, #1
	mov	__a4, __a3, lsr __a2
	tst	__a4, #1
	bne	|L..54|
	add	__v1, __v1, #1
	cmp	__v1, #33
	ble	|L..51|
|L..47|
	mov	__a4, #0
	str	__a4, [__v2, #432]
	bl	|sigwakeup|
	ldmea	__fp, {__v1, __v2, __v3, __v4, __fp, __sp, __pc}^
|L..57|
	ALIGN
|L..56|
	DCD	|__u|
	DCD	|__unixlib_siginfo_handler|
	ALIGN
	EXPORT	|__unixlib_raise_signal|
	DCB &5f, &5f, &75, &6e
	DCB &69, &78, &6c, &69
	DCB &62, &5f, &72, &61
	DCB &69, &73, &65, &5f
	DCB &73, &69, &67, &6e
	DCB &61, &6c, &00
	ALIGN
	DCD	-16777192
|__unixlib_raise_signal|
	; args = 0, pretend = 0, frame = 0
	; frame_needed = 1, current_function_anonymous_args = 0
	; I don't think this function clobbers lr
	mov	__ip, __a2
	cmp	__a1, #0
	ldreq	__a4, |L..62|
	ldreq	__a4, [__a4, #0]
	addeq	__a1, __a4, #2000
	addeq	__a1, __a1, #4
|L..59|
	cmp	__ip, #0
	beq	|L..60|
	ldr	__a4, [__a1, #4]
	sub	__a2, __ip, #1
	mov	__a3, #1
	orr	__a4, __a4, __a3, asl __a2
	str	__a4, [__a1, #4]
|L..60|
	ldr	__a4, [__a1, #432]
	cmp	__a4, #0
	moveq	__a4, #1
	streq	__a4, [__a1, #432]
	moveq	__a2, __ip
	movnes	__pc, __lr
	b	|__unixlib_internal_post_signal|
|L..63|
	ALIGN
|L..62|
	DCD	|__u|
	IMPORT	|__unixlib_setup_sighandler|
	IMPORT	|_exit|
	IMPORT	|__write_corefile|
	IMPORT	|__write_termination|
	IMPORT	|sigwakeup|
	IMPORT	|__unixlib_siginfo_handler|
	IMPORT	|__u|
	END
