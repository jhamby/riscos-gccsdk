# 1 "builtinbuf.cc"
 
# 24 "builtinbuf.cc"


#pragma implementation


# 1 "builtinbuf.h" 1
 
# 24 "builtinbuf.h"





#pragma interface


# 1 "streambuf.h" 1
 
# 24 "streambuf.h"




#pragma interface


   



extern "C" {
# 1 "libio.h" 1
 
# 26 "libio.h"




# 1 "_G_config.h" 1
 






 

 
 
 

 

 

 



 



 

typedef unsigned int _G_sigset_t;

typedef int _G_pid_t;
typedef unsigned int _G_gid_t;
typedef unsigned int _G_uid_t;
typedef unsigned int _G_mode_t;
typedef unsigned int _G_clock_t;
typedef int _G_dev_t;
typedef int _G_fpos_t;
typedef long int _G_off_t;
typedef unsigned short int _G_nlink_t;
typedef unsigned int _G_ino_t;



typedef int _G_ptrdiff_t;



typedef unsigned int _G_size_t;
typedef unsigned int _G_time_t;
typedef int _G_ssize_t;



typedef unsigned int _G_wchar_t;
typedef unsigned int _G_wint_t;
typedef char * _G_va_list;




 






typedef          int   _G_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int  _G_uint8_t __attribute__ ((__mode__ (__QI__)));
typedef          int  _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef          int  _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
typedef          int  _G_int64_t __attribute__ ((__mode__ (__DI__)));
typedef unsigned int _G_uint64_t __attribute__ ((__mode__ (__DI__)));

__extension__ typedef long long _G_llong;
__extension__ typedef unsigned long long _G_ullong;
























 

 

 

 

 

 

 

 

 

 

 



 
 

# 30 "libio.h" 2

















# 55 "libio.h"






















 





































 
























 



















struct _IO_jump_t;  struct _IO_FILE;

 
# 174 "libio.h"









    typedef void _IO_lock_t;





 

struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
   

   
  int _pos;
# 207 "libio.h"

};

struct _IO_FILE {
  int _flags;		 


   
   
  char* _IO_read_ptr;	 
  char* _IO_read_end;	 
  char* _IO_read_base;	 
  char* _IO_write_base;	 
  char* _IO_write_ptr;	 
  char* _IO_write_end;	 
  char* _IO_buf_base;	 
  char* _IO_buf_end;	 
   
  char *_IO_save_base;  
  char *_IO_backup_base;   
  char *_IO_save_end;  

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _blksize;



  _G_off_t _offset;



   
  unsigned short _cur_column;
  char _unused;
  char _shortbuf[1];

   








};











struct _IO_FILE_plus;
extern struct _IO_FILE_plus _IO_stdin_, _IO_stdout_, _IO_stderr_;





 
typedef struct
{
  _G_ssize_t (*read) (struct _IO_FILE *, void *, _G_ssize_t);
  _G_ssize_t (*write) (struct _IO_FILE *, const void *, _G_ssize_t);
  _G_fpos_t (*seek) (struct _IO_FILE *, _G_off_t, int);
  int (*close) (struct _IO_FILE *);
} _IO_cookie_io_functions_t;

 
struct _IO_cookie_file
{
  struct _IO_FILE file;
  const void *vtable;
  void *cookie;
  _IO_cookie_io_functions_t io_functions;
};



extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);

















extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp);
extern int _IO_ferror (_IO_FILE *__fp);

extern int _IO_peekc_locked (_IO_FILE *__fp);

 



extern void _IO_flockfile (_IO_FILE *);
extern void _IO_funlockfile (_IO_FILE *);
extern int _IO_ftrylockfile (_IO_FILE *);













extern int _IO_vfscanf (_IO_FILE *, const char *, _G_va_list, int *);
extern int _IO_vfprintf (_IO_FILE *, const char *, _G_va_list);
extern _G_ssize_t _IO_padn (_IO_FILE *, int, _G_ssize_t);
extern _G_size_t _IO_sgetn (_IO_FILE *, void *, _G_size_t);





extern _G_fpos_t _IO_seekoff (_IO_FILE *, _G_off_t, int, int);
extern _G_fpos_t _IO_seekpos (_IO_FILE *, _G_fpos_t, int);


extern void _IO_free_backup_area (_IO_FILE *);


}



# 36 "streambuf.h" 2

}
 


























extern "C++" {
class istream;  
class ostream; class streambuf;

 







typedef _G_off_t streamoff;
typedef _G_fpos_t streampos;

typedef _G_ssize_t streamsize;

typedef unsigned long __fmtflags;
typedef unsigned char __iostate;

struct _ios_fields
{  
    streambuf *_strbuf;
    ostream* _tie;
    int _width;
    __fmtflags _flags;
    short _fill;
    __iostate _state;
    __iostate _exceptions;
    int _precision;

    void *_arrays;  
};
















enum state_value {
    _good = 0,
    _eof = 1,
    _fail = 2,
    _bad = 4 };
enum open_mode {
    input = 1,
    output = 2,
    atend = 4,
    append = 8 };


class ios : public _ios_fields {
  ios& operator=(ios&);   
  ios (const ios&);  
  public:
    typedef __fmtflags fmtflags;
    typedef int iostate;
    typedef int openmode;
    typedef _G_ssize_t streamsize;
    enum io_state {
	goodbit = 0,
	eofbit = 1,
	failbit = 2,
	badbit = 4 };
    enum open_mode {
	in = 1,
	out = 2,
	ate = 4,
	app = 8,
	trunc = 16,
	nocreate = 32,
	noreplace = 64,
	bin = 128,  
	binary = 128 };
    enum seek_dir { beg, cur, end};
    typedef enum seek_dir seekdir;
     
    enum { skipws=01,
	   left=02, right=04, internal=010,
	   dec=020, oct=040, hex=0100,
	   showbase=0200, showpoint=0400,
	   uppercase=01000, showpos=02000,
	   scientific=04000, fixed=010000,
	   unitbuf=020000, stdio=040000



	   };
    enum {  
	basefield=dec+oct+hex,
	floatfield = scientific+fixed,
	adjustfield = left+right+internal
    };

# 177 "streambuf.h"


    ostream* tie() const { return _tie; }
    ostream* tie(ostream* val) { ostream* save=_tie; _tie=val; return save; }

     
    short fill() const { return _fill; }
    short fill(short newf)
	{short oldf = _fill; _fill = newf; return oldf;}
    fmtflags flags() const { return _flags; }
    fmtflags flags(fmtflags new_val) {
	fmtflags old_val = _flags; _flags = new_val; return old_val; }
    int precision() const { return _precision; }
    int precision(int newp) {
	unsigned short oldp = _precision; _precision = (unsigned short)newp;
	return oldp; }
    fmtflags setf(fmtflags val) {
	fmtflags oldbits = _flags;
	_flags |= val; return oldbits; }
    fmtflags setf(fmtflags val, fmtflags mask) {
	fmtflags oldbits = _flags;
	_flags = (_flags & ~mask) | (val & mask); return oldbits; }
    fmtflags unsetf(fmtflags mask) {
	fmtflags oldbits = _flags;
	_flags &= ~mask; return oldbits; }
    int width() const { return _width; }
    int width(int val) { int save = _width; _width = val; return save; }




    void _throw_failure() const { }

    void clear(iostate state = 0) {
	_state = _strbuf ? state : state|badbit;
	if (_state & _exceptions) _throw_failure(); }
    void set(iostate flag) { _state |= flag;
	if (_state & _exceptions) _throw_failure(); }
    void setstate(iostate flag) { _state |= flag;  
	if (_state & _exceptions) _throw_failure(); }
    int good() const { return _state == 0; }
    int eof() const { return _state & ios::eofbit; }
    int fail() const { return _state & (ios::badbit|ios::failbit); }
    int bad() const { return _state & ios::badbit; }
    iostate rdstate() const { return _state; }
    operator void*() const { return fail() ? (void*)0 : (void*)(-1); }
    int operator!() const { return fail(); }
    iostate exceptions() const { return _exceptions; }
    void exceptions(iostate enable) {
	_exceptions = enable;
	if (_state & _exceptions) _throw_failure(); }

    streambuf* rdbuf() const { return _strbuf; }
    streambuf* rdbuf(streambuf *_s) {
      streambuf *_old = _strbuf; _strbuf = _s; clear (); return _old; }

    static int sync_with_stdio(int on);
    static void sync_with_stdio() { sync_with_stdio(1); }
    static fmtflags bitalloc();
    static int xalloc();
    void*& pword(int);
    void* pword(int) const;
    long& iword(int);
    long iword(int) const;


    void unset(state_value flag) { _state &= ~flag; }
    void close();
    int is_open();
    int readable();
    int writable();


     
    class Init {
    public:
      Init () { }
    };

  protected:
    inline ios(streambuf* sb = 0, ostream* tie_to = 0);
    inline virtual ~ios();
    inline void init(streambuf* sb, ostream* tie = 0);
};




typedef ios::seek_dir _seek_dir;


 
 
 
 
 

 
 
class streammarker : private _IO_marker {
    friend class streambuf;
    void set_offset(int offset) { _pos = offset; }
  public:
    streammarker(streambuf *sb);
    ~streammarker();
    int saving() { return  1; }
    int delta(streammarker&);
    int delta();
};

struct streambuf : public _IO_FILE {  
    friend class ios;
    friend class istream;
    friend class ostream;
    friend class streammarker;
    const void *&_vtable() { return *(const void**)((_IO_FILE*)this + 1); }
  protected:
    static streambuf* _list_all;  
    _IO_FILE*& xchain() { return _chain; }
    void _un_link();
    void _link_in();
    char* gptr() const
      { return _flags & 0x100 ? _IO_save_base : _IO_read_ptr; }
    char* pptr() const { return _IO_write_ptr; }
    char* egptr() const
      { return _flags & 0x100 ? _IO_save_end : _IO_read_end; }
    char* epptr() const { return _IO_write_end; }
    char* pbase() const { return _IO_write_base; }
    char* eback() const
      { return _flags & 0x100 ? _IO_save_base : _IO_read_base;}
    char* base() const { return _IO_buf_base; }
    char* ebuf() const { return _IO_buf_end; }
    int blen() const { return _IO_buf_end - _IO_buf_base; }
    void xput_char(char c) { *_IO_write_ptr++ = c; }
    int xflags() { return _flags; }
    int xflags(int f) {int fl = _flags; _flags = f; return fl;}
    void xsetflags(int f) { _flags |= f; }
    void xsetflags(int f, int mask)
      { _flags = (_flags & ~mask) | (f & mask); }
    void gbump(int n)
      { _flags & 0x100 ? (_IO_save_base+=n):(_IO_read_ptr+=n);}
    void pbump(int n) { _IO_write_ptr += n; }
    void setb(char* b, char* eb, int a=0);
    void setp(char* p, char* ep)
      { _IO_write_base=_IO_write_ptr=p; _IO_write_end=ep; }
    void setg(char* eb, char* g, char *eg) {
      if (_flags & 0x100) _IO_free_backup_area(this); 
      _IO_read_base = eb; _IO_read_ptr = g; _IO_read_end = eg; }
    char *shortbuf() { return _shortbuf; }

    int in_backup() { return _flags & 0x100; }
     
    char *Gbase() { return in_backup() ? _IO_save_base : _IO_read_base; }
     
    char *eGptr() { return in_backup() ? _IO_save_end : _IO_read_end; }
     
    char *Bbase() { return in_backup() ? _IO_read_base : _IO_save_base; }
    char *Bptr() { return _IO_backup_base; }
     
    char *eBptr() { return in_backup() ? _IO_read_end : _IO_save_end; }
    char *Nbase() { return _IO_save_base; }
    char *eNptr() { return _IO_save_end; }
    int have_backup() { return _IO_save_base != (__null); }
    int have_markers() { return _markers != (__null); }
    void free_backup_area();
    void unsave_markers();  
    int put_mode() { return _flags & 0x800; }
    int switch_to_get_mode();
    
    streambuf(int flags=0);
  public:
    static int flush_all();
    static void flush_all_linebuffered();  
    virtual ~streambuf();
    virtual int overflow(int c = (-1));  
    virtual int underflow();  
    virtual int uflow();  
    virtual int pbackfail(int c);
 
    virtual streamsize xsputn(const char* s, streamsize n);
    virtual streamsize xsgetn(char* s, streamsize n);
    virtual streampos seekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);
    virtual streampos seekpos(streampos pos, int mode = ios::in|ios::out);

    streampos pubseekoff(streamoff o, _seek_dir d, int mode=ios::in|ios::out)
      { return _IO_seekoff (this, o, d, mode); }
    streampos pubseekpos(streampos pos, int mode = ios::in|ios::out)
      { return _IO_seekpos (this, pos, mode); }
    streampos sseekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);
    streampos sseekpos(streampos pos, int mode = ios::in|ios::out);
    virtual streambuf* setbuf(char* p, int len);
    virtual int sync();
    virtual int doallocate();

    int seekmark(streammarker& mark, int delta = 0);
    int sputbackc(char c);
    int sungetc();
    int unbuffered() { return _flags & 2 ? 1 : 0; }
    int linebuffered() { return _flags & 0x200 ? 1 : 0; }
    void unbuffered(int i)
	{ if (i) _flags |= 2; else _flags &= ~2; }
    void linebuffered(int i)
	{ if (i) _flags |= 0x200; else _flags &= ~0x200; }
    int allocate() {  
	if (base() || unbuffered()) return 0;
	else return doallocate(); }
     
    void allocbuf() { if (base() == (__null)) doallocbuf(); }
    void doallocbuf();
    int in_avail() { return _IO_read_end - _IO_read_ptr; }
    int out_waiting() { return _IO_write_ptr - _IO_write_base; }
    streamsize sputn(const char* s, streamsize n) { return xsputn(s, n); }
    streamsize padn(char pad, streamsize n) { return _IO_padn(this, pad, n); }
    streamsize sgetn(char* s, streamsize n) { return _IO_sgetn(this, s, n); }
    int ignore(int);
    int get_column();
    int set_column(int);
    long sgetline(char* buf, _G_size_t n, char delim, int putback_delim);
    int sputc(int c) { return _IO_putc(c, this); }
    int sbumpc() { return _IO_getc(this); }
    int sgetc() { return ((this)->_IO_read_ptr >= (this)->_IO_read_end 	  && __underflow (this) == (-1) ? (-1) 	: *(unsigned char *) (this)->_IO_read_ptr); }
    int snextc() {
	if (_IO_read_ptr >= _IO_read_end && __underflow(this) == (-1))
	  return (-1);
	else return _IO_read_ptr++, sgetc(); }
    void stossc() { if (_IO_read_ptr < _IO_read_end) _IO_read_ptr++; }
    int vscan(char const *fmt0, _G_va_list ap, ios* stream = (__null));
    int scan(char const *fmt0 ...);
    int vform(char const *fmt0, _G_va_list ap);
    int form(char const *fmt0 ...);




    virtual streamsize sys_read(char* buf, streamsize size);
    virtual streamsize sys_write(const char*, streamsize);
    virtual streampos sys_seek(streamoff, _seek_dir);
    virtual int sys_close();
    virtual int sys_stat(void*);  




};

 
 

class filebuf : public streambuf {
  protected:
    void init();
  public:
    static const int openprot;  
    filebuf();
    filebuf(int fd);
    filebuf(int fd, char* p, int len);



    ~filebuf();
    filebuf* attach(int fd);
    filebuf* open(const char *filename, const char *mode);
    filebuf* open(const char *filename, ios::openmode mode, int prot = 0664);
    virtual int underflow();
    virtual int overflow(int c = (-1));
    int is_open() const { return _fileno >= 0; }
    int fd() const { return is_open() ? _fileno : (-1); }
    filebuf* close();
    virtual int doallocate();
    virtual streampos seekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);
    virtual streambuf* setbuf(char* p, int len);
    streamsize xsputn(const char* s, streamsize n);
    streamsize xsgetn(char* s, streamsize n);
    virtual int sync();
  protected:  
 
    int is_reading() { return eback() != egptr(); }
    char* cur_ptr() { return is_reading() ?  gptr() : pptr(); }
     
    char* file_ptr() { return eGptr(); }
     
    virtual streamsize sys_read(char* buf, streamsize size);
    virtual streampos sys_seek(streamoff, _seek_dir);
    virtual streamsize sys_write(const char*, streamsize);
    virtual int sys_stat(void*);  
    virtual int sys_close();




};

inline void ios::init(streambuf* sb, ostream* tie_to) {
		_state = sb ? ios::goodbit : ios::badbit; _exceptions=0;
		_strbuf=sb; _tie = tie_to; _width=0; _fill=' ';

		_flags=ios::skipws|ios::dec;



		_precision=6; _arrays = 0; }

inline ios::ios(streambuf* sb, ostream* tie_to) { init(sb, tie_to); }

inline ios::~ios() {



     
     
    operator delete[] (_arrays);
}
}  

# 32 "builtinbuf.h" 2


# 66 "builtinbuf.h"



# 29 "builtinbuf.cc" 2

# 1 "iostreamP.h" 1
 
# 24 "iostreamP.h"


# 1 "libioP.h" 1
 
# 25 "libioP.h"





# 1 "/home/riscos/dist/include/errno.h" 1 3
 
# 10 "/home/riscos/dist/include/errno.h" 3

 





extern "C" {



extern volatile int errno;



extern char *sys_errlist[];
extern int sys_nerr;

 

 

 

 

 

 

 

 

 

 

 

 

 


 

 

 


 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 


 





 








	}



# 30 "libioP.h" 2





# 45 "libioP.h"


# 1 "iolibio.h" 1


 



extern "C" {


extern int _IO_fclose (_IO_FILE*);
extern _IO_FILE *_IO_fdopen (int, const char*);
extern int _IO_fflush (_IO_FILE*);
extern int _IO_fgetpos (_IO_FILE*, _G_fpos_t*);
extern char* _IO_fgets (char*, int, _IO_FILE*);
extern _IO_FILE *_IO_fopen (const char*, const char*);
extern int _IO_fprintf (_IO_FILE*, const char*, ...);
extern int _IO_fputs (const char*, _IO_FILE*);
extern int _IO_fsetpos (_IO_FILE*, const _G_fpos_t *);
extern long int _IO_ftell (_IO_FILE*);
extern _G_size_t _IO_fread (void*, _G_size_t, _G_size_t, _IO_FILE*);
extern _G_size_t _IO_fwrite (const void*,
				      _G_size_t, _G_size_t, _IO_FILE*);
# 23 "iolibio.h"
extern char* _IO_gets (char*);
extern void _IO_perror (const char*);
extern int _IO_printf (const char*, ...);
extern int _IO_puts (const char*);
extern int _IO_scanf (const char*, ...);
extern void _IO_setbuffer (_IO_FILE *, char*, _G_size_t);
extern int _IO_setvbuf (_IO_FILE*, char*, int, _G_size_t);
extern int _IO_sscanf (const char*, const char*, ...);
extern int _IO_sprintf (char *, const char*, ...);
extern int _IO_ungetc (int, _IO_FILE*);
extern int _IO_vsscanf (const char *, const char *, _G_va_list);
extern int _IO_vsprintf (char*, const char*, _G_va_list);

struct obstack;
extern int _IO_obstack_vprintf (struct obstack *, const char *,
                                    _G_va_list);
# 39 "iolibio.h"
extern int _IO_obstack_printf (struct obstack *, const char *, ...);
















extern _IO_FILE* _IO_popen (const char*, const char*);





}

# 47 "libioP.h" 2



extern "C" {






 
# 77 "libioP.h"


# 87 "libioP.h"

 









 


typedef void (*_IO_finish_t) (_IO_FILE *, int);  


 


typedef int (*_IO_overflow_t) (_IO_FILE *, int);


 



typedef int (*_IO_underflow_t) (_IO_FILE *);


 






 

typedef int (*_IO_pbackfail_t) (_IO_FILE *, int);


 


typedef _G_size_t (*_IO_xsputn_t) (_IO_FILE *FP, const void *DATA,
					 _G_size_t N);
# 134 "libioP.h"


 


typedef _G_size_t (*_IO_xsgetn_t) (_IO_FILE *FP, void *DATA,
					 _G_size_t N);
# 141 "libioP.h"


 








typedef _G_fpos_t (*_IO_seekoff_t) (_IO_FILE *FP, _G_off_t OFF,
					  int DIR, int MODE);
# 154 "libioP.h"



 



 



typedef _G_fpos_t (*_IO_seekpos_t) (_IO_FILE *, _G_fpos_t, int);



 

typedef _IO_FILE* (*_IO_setbuf_t) (_IO_FILE *, char *, _G_ssize_t);


 


typedef int (*_IO_sync_t) (_IO_FILE *);


 


typedef int (*_IO_doallocate_t) (_IO_FILE *);


 
# 196 "libioP.h"

 



typedef _G_ssize_t (*_IO_read_t) (_IO_FILE *, void *, _G_ssize_t);


 



typedef _G_ssize_t (*_IO_write_t) (_IO_FILE *,const void *,_G_ssize_t);


 






typedef _G_fpos_t (*_IO_seek_t) (_IO_FILE *, _G_off_t, int);



 



typedef int (*_IO_close_t) (_IO_FILE *);  


 



typedef int (*_IO_stat_t) (_IO_FILE *, void *);


# 247 "libioP.h"






struct _IO_jump_t
{
    struct { short delta1, delta2; _G_size_t pfn; }  __dummy;



    struct { short delta1, delta2; _IO_finish_t pfn; }  __finish;
    struct { short delta1, delta2; _IO_overflow_t pfn; }  __overflow;
    struct { short delta1, delta2; _IO_underflow_t pfn; }  __underflow;
    struct { short delta1, delta2; _IO_underflow_t pfn; }  __uflow;
    struct { short delta1, delta2; _IO_pbackfail_t pfn; }  __pbackfail;
     
    struct { short delta1, delta2; _IO_xsputn_t pfn; }  __xsputn;
    struct { short delta1, delta2; _IO_xsgetn_t pfn; }  __xsgetn;
    struct { short delta1, delta2; _IO_seekoff_t pfn; }  __seekoff;
    struct { short delta1, delta2; _IO_seekpos_t pfn; }  __seekpos;
    struct { short delta1, delta2; _IO_setbuf_t pfn; }  __setbuf;
    struct { short delta1, delta2; _IO_sync_t pfn; }  __sync;
    struct { short delta1, delta2; _IO_doallocate_t pfn; }  __doallocate;
    struct { short delta1, delta2; _IO_read_t pfn; }  __read;
    struct { short delta1, delta2; _IO_write_t pfn; }  __write;
    struct { short delta1, delta2; _IO_seek_t pfn; }  __seek;
    struct { short delta1, delta2; _IO_close_t pfn; }  __close;
    struct { short delta1, delta2; _IO_stat_t pfn; }  __stat;








};

 




struct _IO_FILE_plus
{
  _IO_FILE file;
  const struct _IO_jump_t *vtable;
};

 





extern _G_fpos_t _IO_seekoff (_IO_FILE *, _G_off_t, int, int);
extern _G_fpos_t _IO_seekpos (_IO_FILE *, _G_fpos_t, int);


extern void _IO_switch_to_main_get_area (_IO_FILE *);
extern void _IO_switch_to_backup_area (_IO_FILE *);
extern int _IO_switch_to_get_mode (_IO_FILE *);
extern void _IO_init (_IO_FILE *, int);
extern int _IO_sputbackc (_IO_FILE *, int);
extern int _IO_sungetc (_IO_FILE *);
extern void _IO_un_link (_IO_FILE *);
extern void _IO_link_in (_IO_FILE *);
extern void _IO_doallocbuf (_IO_FILE *);
extern void _IO_unsave_markers (_IO_FILE *);
extern void _IO_setb (_IO_FILE *, char *, char *, int);
extern unsigned _IO_adjust_column (unsigned, const char *, int);


 

extern void _IO_init_marker (struct _IO_marker *, _IO_FILE *);
extern void _IO_remove_marker (struct _IO_marker *);
extern int _IO_marker_difference (struct _IO_marker *,
				       struct _IO_marker *);
# 328 "libioP.h"
extern int _IO_marker_delta (struct _IO_marker *);
extern int _IO_seekmark (_IO_FILE *, struct _IO_marker *, int);

 

extern int _IO_default_underflow (_IO_FILE *);
extern int _IO_default_uflow (_IO_FILE *);
extern int _IO_default_doallocate (_IO_FILE *);
extern void _IO_default_finish (_IO_FILE *, int);
extern int _IO_default_pbackfail (_IO_FILE *, int);
extern _IO_FILE* _IO_default_setbuf (_IO_FILE *, char *, _G_ssize_t);
extern _G_size_t _IO_default_xsputn (_IO_FILE *, const void *,
					   _G_size_t);
# 341 "libioP.h"
extern _G_size_t _IO_default_xsgetn (_IO_FILE *, void *, _G_size_t);






extern _G_fpos_t _IO_default_seekoff (_IO_FILE *, _G_off_t, int, int);
extern _G_fpos_t _IO_default_seekpos (_IO_FILE *, _G_fpos_t, int);

extern _G_ssize_t _IO_default_write (_IO_FILE *, const void *,
					   _G_ssize_t);
# 353 "libioP.h"
extern _G_ssize_t _IO_default_read (_IO_FILE *, void *, _G_ssize_t);
extern int _IO_default_stat (_IO_FILE *, void *);



extern _G_fpos_t _IO_default_seek (_IO_FILE *, _G_off_t, int);

extern int _IO_default_sync (_IO_FILE *);


extern struct _IO_jump_t _IO_file_jumps;
extern struct _IO_jump_t _IO_streambuf_jumps;
extern struct _IO_jump_t _IO_proc_jumps;
extern struct _IO_jump_t _IO_str_jumps;
extern int _IO_do_write (_IO_FILE *, const char *, _G_size_t);
extern int _IO_flush_all (void);
extern void _IO_cleanup (void);
extern void _IO_flush_all_linebuffered (void);
















 

extern int _IO_file_doallocate (_IO_FILE *);
extern _IO_FILE* _IO_file_setbuf (_IO_FILE *, char *, _G_ssize_t);




extern _G_fpos_t _IO_file_seekoff (_IO_FILE *, _G_off_t, int, int);
extern _G_fpos_t _IO_file_seek (_IO_FILE *, _G_off_t, int);

extern _G_size_t _IO_file_xsputn (_IO_FILE *, const void *, _G_size_t);
extern int _IO_file_stat (_IO_FILE *, void *);
extern int _IO_file_close (_IO_FILE *);
extern int _IO_file_underflow (_IO_FILE *);
extern int _IO_file_overflow (_IO_FILE *, int);

extern void _IO_file_init (_IO_FILE *);
extern _IO_FILE* _IO_file_attach (_IO_FILE *, int);
extern _IO_FILE* _IO_file_open (_IO_FILE *, const char *, int, int,
				     int, int);
# 408 "libioP.h"




extern _IO_FILE* _IO_file_fopen (_IO_FILE *, const char *, const char *);

extern _G_ssize_t _IO_file_write (_IO_FILE *, const void *,
					_G_ssize_t);
# 416 "libioP.h"
extern _G_ssize_t _IO_file_read (_IO_FILE *, void *, _G_ssize_t);
extern int _IO_file_sync (_IO_FILE *);
extern int _IO_file_close_it (_IO_FILE *);
extern void _IO_file_finish (_IO_FILE *, int);

 
extern _IO_FILE* _IO_proc_open (_IO_FILE *, const char *, const char *);
extern int _IO_proc_close (_IO_FILE *);

 
extern int _IO_str_underflow (_IO_FILE *);
extern int _IO_str_overflow (_IO_FILE *, int);
extern int _IO_str_pbackfail (_IO_FILE *, int);



extern _G_fpos_t _IO_str_seekoff (_IO_FILE *, _G_off_t, int, int);

extern void _IO_str_finish (_IO_FILE *, int);

 
extern void _IO_str_init_static (_IO_FILE *, char *, int, char *);
extern void _IO_str_init_readonly (_IO_FILE *, const char *, int);
extern _G_ssize_t _IO_str_count (_IO_FILE *);

extern int _IO_vasprintf (char **result_ptr, __const char *format,
			       _G_va_list args);
# 443 "libioP.h"
extern int _IO_vdprintf (int d, __const char *format, _G_va_list arg);
extern int _IO_vsnprintf (char *string, _G_size_t maxlen,
			       __const char *format, _G_va_list args);
# 446 "libioP.h"


extern _G_size_t _IO_getline (_IO_FILE *,char *, _G_size_t, int, int);
extern _G_size_t _IO_getline_info (_IO_FILE *,char *, _G_size_t,
					 int, int, int *);
# 451 "libioP.h"
extern _G_ssize_t _IO_getdelim (char **, _G_size_t *, int, _IO_FILE *);
extern double _IO_strtod (const char *, char **);
extern char *_IO_dtoa (double __d, int __mode, int __ndigits,
			    int *__decpt, int *__sign, char **__rve);
# 455 "libioP.h"
extern int _IO_outfloat (double __value, _IO_FILE *__sb, int __type,
			      int __width, int __precision, int __flags,
			      int __sign_mode, int __fill);
# 458 "libioP.h"

extern _IO_FILE *_IO_list_all;
extern void (*_IO_cleanup_registration_needed) (void);




# 476 "libioP.h"


# 494 "libioP.h"


# 518 "libioP.h"
















struct stat;
extern _G_ssize_t _IO_read (int, void *, _G_size_t);
extern _G_ssize_t _IO_write (int, const void *, _G_size_t);
extern _G_off_t _IO_lseek (int, _G_off_t, int);
extern int _IO_close (int);
extern int _IO_fstat (int, struct stat *);
extern int _IO_vscanf (const char *, _G_va_list);

 




 







 







 



 









}









 





 













extern char builtinbuf_vtable[] asm ("_vt$" "10" "builtinbuf");















extern struct _IO_fake_stdiobuf _IO_stdin_buf, _IO_stdout_buf, _IO_stderr_buf;

























# 26 "iostreamP.h" 2

# 30 "builtinbuf.cc" 2

# 78 "builtinbuf.cc"

