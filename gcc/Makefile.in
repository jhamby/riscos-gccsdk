# Top-level Makefile for the GNU Compiler Collection for ARM/RISC OS
# Copyright (c) 2000, 2001, 2002
# Copyright (c) 2003, 2004, 2005 GCCSDK Developers
# Written by Nick Burrett <nick@dsvr.net>

# Tell GNU make 3.79 not to run this directory in parallel.
# Not all of the required dependencies are present.
.NOTPARALLEL:

# Set by the configure script
prefix=@prefix@
exec_prefix=@exec_prefix@
datadir=@datadir@
includedir=@includedir@
infodir=@infodir@
libdir=@libdir@
libexecdir=@libexecdir@
localstatedir=@localstatedir@
bindir=@bindir@
mandir=@mandir@
oldincludedir=@oldincludedir@
sbindir=@sbindir@
sharedstatedir=@sharedstatedir@
srcdir=@srcdir@
sysconfdir=@sysconfdir@

TARGET_NAME=@target_name@
TARGET_DEFS=@target_defs@

# The native C and C++ compilers on the host computer
CC=@CC@
CXX=@CXX@

CFLAGS=@CFLAGS@ $(TARGET_DEFS)
CXXFLAGS=@CXXFLAGS@ $(TARGET_DEFS)

BISON=@BISON@
FLEX=@FLEX@
GREP=@GREP@
GPERF=@GPERF@
MAKEINFO=@MAKEINFO@
SED=@SED@
SHELL=@SHELL@

# Installation directory of Unix binaries i.e. the stage 1 compiler.
ux_gccpkg=@prefix@

# Installation directory of RISC OS binaries i.e. the stage 2 compiler.
ro_gccpkg=@with_riscos_dist@/!gcc
ro_syspkg=@with_riscos_dist@/!System
ro_unixlibpkg=@with_riscos_dist@/!unixlib
ro_libsclpkg=@with_riscos_dist@/!clib

# Installation directory of RISC OS distribution packaged as zip files.
ro_zippkg=@with_riscos_pkg@

# Suffix applied to executables (usually changed with --enable-filetype-ff8)
exesfx=@exesfx@

# Directory containing the porting scripts
ro_env=@with_riscos_env@

# Working directory where object files are stored
objdir=@topdir@/$(TARGET_NAME)

# Used in the GCC Makefiles and configuration files use these
hostsystem=@host_system@
targetsystem=HOST_ARM_RISCOS
host=@host@

# GCC compiler version that we are going to build.
VERSION = 3_4

# Define the installation base directory.  These don't determine the actual
# stored location of files, rather they are the hard-coded values that
# the gcc driver and pre-processor use to find the binaries and default
# headers
unix_prefix=$(ux_gccpkg)/
riscos_prefix=/gccpkg:

# Generic installation directories
# For building the gcc and cpp binaries, unix_prefix or riscos_prefix
# are prepended to these paths.
# For installing the software, ux_gccpkg or ro_gccpkg are prepended to
# these paths.
gn_standard_exec_prefix=bin/
gn_gcc_bin_dir=bin/$(TARGET_NAME)/$(VERSION)
gn_standard_startfile_prefix=startup/
gn_gcc_include_dir=lib/gcc-lib/$(TARGET_NAME)/$(VERSION)/include
gn_gplusplus_include_dir=lib/gcc-lib/$(TARGET_NAME)/$(VERSION)/include/g++-3
gn_cross_include_dir=include
gn_local_include_dir=local/include
gn_system_include_dir=sys/include
gn_share_dir=share

# Used by Makefiles that build libraries/binaries for RISC OS.  These point
# to the installation directories for cross-host and RISC OS.
ux_bin_dir = $(ux_gccpkg)/$(gn_standard_exec_prefix)
ux_gcc_bin_dir = $(ux_gccpkg)/$(gn_gcc_bin_dir)
ro_bin_dir = $(ro_gccpkg)/$(gn_standard_exec_prefix)
ro_gcc_bin_dir = $(ro_gccpkg)/$(gn_gcc_bin_dir)
info_dir = $(ro_gccpkg)/docs
unixlib_incl_dir = @topdir@/unixlib/source/clib
libscl_incl_dir = @topdir@/libscl

# After we have build the stage 1 cross-compiler, then we can use these
# to build the cross-libraries and cross-tools
CROSS_CC=$(ux_gccpkg)/$(gn_standard_exec_prefix)/gcc
CROSS_CXX=$(ux_gccpkg)/$(gn_standard_exec_prefix)/g++
CROSS_COBJC=$(ux_gccpkg)/$(gn_standard_exec_prefix)/gcc
CROSS_GCJ=$(ux_gccpkg)/$(gn_standard_exec_prefix)/gcj
CROSS_GCJH=$(ux_gccpkg)/$(gn_standard_exec_prefix)/gcjh
CROSS_GNATBIND=$(ux_gccpkg)/$(gn_standard_exec_prefix)/gnatbind
CROSS_CFLAGS=-O2 $(TARGET_DEFS) -mpoke-function-name
CROSS_COBJCFLAGS=-O2 $(TARGET_DEFS) -mpoke-function-name
CROSS_CXXFLAGS=-O2 $(TARGET_DEFS) -mpoke-function-name

# Name of the host computers archiver.  This is only used to build
# libiberty or linking against the cross-compiler.
AR = ar
AR_FLAGS = -rc

# Name of the RISC OS archiver.  Used to build all RISC OS libraries.
CROSS_AR = $(ux_gccpkg)/$(gn_standard_exec_prefix)/libfile
CROSS_AR_FLAGS = -c

CROSS_LINK = $(ux_gccpkg)/$(gn_standard_exec_prefix)/drlink

insthdr = @topdir@/scripts/install-headers.pl
instsrc = @topdir@/scripts/install-source.pl

# Place variables in the environment.  This saves us having to pass
# the variables to sub-makes on the command line.
export TARGET_NAME objdir hostsystem targetsystem
export ux_gccpkg ro_gccpkg ro_syspkg ro_zippkg ro_env unix_prefix riscos_prefix
export gn_standard_exec_prefix gn_standard_startfile_prefix
export gn_gcc_include_dir gn_gplusplus_include_dir gn_share_dir
export gn_local_include_dir gn_system_include_dir gn_cross_include_dir
export gn_gcc_bin_dir info_dir exesfx ro_unixlibpkg ro_libsclpkg
export ux_bin_dir ux_gcc_bin_dir ro_bin_dir ro_gcc_bin_dir
export unixlib_incl_dir libscl_incl_dir host
export CC CXX GNATCC CROSS_GCJ CROSS_GCJH
export CROSS_CC CROSS_CXX CROSS_COBJC CROSS_GNATBIND
export CROSS_CFLAGS CROSS_CXXFLAGS CROCC_COBJCFLAGS
export CROSS_AR CROSS_AR_FLAGS CROSS_LINK
export VERSION TARGET_NAME CFLAGS CXXFLAGS AR AR_FLAGS
export BISON FLEX GPERF GREP MAKEINFO SED SHELL
export insthdr instsrc

all:	build-cross build-native porting-scripts

# Setup build and installation directories.  Install run-time library
# headers
setup:	directories install_headers

# Tools that will run natively in any environment
# i.e. under Linux this will build the GCC cross-compiler, cross-assembler
# and cross-linker.  Under RISC OS this will build the compiler, assembler
# and linker natively

# These dependencies are split to help make get parallel building right.
build-cross:	c-libs libiberty-stg1 gcc-libs-stg1 gcc-libs-stg2 \
		riscos-aof-stg1 gcc-stg1

# These targets build the libraries and binaries suitable for execution
# on RISC OS machines only.
build-native:	libiberty-stg2 gcc-stg2 riscos-aof-stg2 \
		riscos-libs riscos-progs riscos-dist gcc-libs-stg2-extra

.PHONY: directories
.PHONY: c-libs
.PHONY: riscos-progs
.PHONY: riscos-libs
.PHONY: riscos-elf
.PHONY: riscos-dist
.PHONY: zlib

.PHONY: gcc-stg1
.PHONY: gcc-stg2
.PHONY: gcc-libs-stg1
.PHONY: gcc-libs-stg2
.PHONY: gcc-libs-stg2-extra
.PHONY: libiberty-stg1
.PHONY: libiberty-stg2
.PHONY: riscos-aof-stg1
.PHONY: riscos-aof-stg2

.PHONY: build-cross
.PHONY: build-native
.PHONY: porting-scripts

.PHONY: install_headers

# Target (trgXX) and compiler flags (cflXX) definitions.  The XX must
# match for both trg and cfl in all calls to sub-make processes.  We
# write them like this because it makes the rest of the makefile easy
# to read.
trg20=apcs32/arch3/unixlib
trg21=apcs32/arch4/unixlib

trg30=apcs32/arch3/libscl
trg31=apcs32/arch4/libscl

cfl20="CFL=-mapcs-32 -munixlib"
cfl21="CFL=-mapcs-32 -mcpu=strongarm -mtune=xscale -munixlib"

cfl30="CFL=-mapcs-32 -mlibscl"
cfl31="CFL=-mapcs-32 -mcpu=strongarm -mlibscl"

libiberty-stg1:
	$(MAKE) -C libiberty "STAGE=stage1"

libiberty-stg2: build-cross
	$(MAKE) -C libiberty "STAGE=stage2" "TRG=$(trg20)"

gcc-stg1: gcc-libs-stg1
	$(MAKE) -C gcc "STAGE=stage1" "TRG=$(trg20)"

gcc-stg2: libiberty-stg2
	$(MAKE) -C gcc "STAGE=stage2" "TRG=$(trg20)"

riscos-aof-stg1:
	$(MAKE) -C riscos-aof "STAGE=stage1"

riscos-aof-stg2: build-cross
	$(MAKE) -C riscos-aof "STAGE=stage2" "TRG=$(trg20)"

riscos-progs:
	$(MAKE) -C riscos-progs "TRG=$(trg20)" $(cfl20) "STAGE=stage2"

riscos-elf:
	$(MAKE) -C riscos-elf

porting-scripts:
	$(MAKE) -C porting-scripts

# The ballache of having to keep support with Objasm forces us
# to do this (CFL1) brain damage.
c-libs: gcc-stg1 riscos-aof-stg1 unixlib/Makefile unixlib/source/Makefile unixlib/source/object-list unixlib/objs/Makefile,fe1
	$(MAKE) -C unixlib "TRG=$(trg20)" $(cfl20)
	$(MAKE) -C libscl "TRG=$(trg30)" "TRG_UL=$(trg20)" $(cfl30)

riscos-libs:
	$(MAKE) -C $@ "TRG=$(trg20)" $(cfl20)

gcc-libs-stg1: libiberty-stg1
	$(MAKE) -C gcc zlib "TRG=$(trg20)" "STAGE=stage1"

gcc-libs-stg2: gcc-stg1 riscos-aof-stg1
	$(MAKE) -C gcc libgcc "TRG=$(trg20)" $(cfl20) "STAGE=stage2"
	$(MAKE) -C gcc libgcc "TRG=$(trg30)" $(cfl30) "STAGE=stage2"
	$(MAKE) -C gcc libffi "TRG=$(trg20)" $(cfl20) "STAGE=stage2"
	$(MAKE) -C gcc libf2c "TRG=$(trg20)" $(cfl20) "STAGE=stage2"
	$(MAKE) -C gcc libf2c "TRG=$(trg30)" $(cfl30) "STAGE=stage2"
	$(MAKE) -C gcc libobjc "TRG=$(trg20)" $(cfl20) "STAGE=stage2"
	$(MAKE) -C gcc libstdc "TRG=$(trg20)" $(cfl20) "STAGE=stage2" "lib_incl_dir=$(unixlib_incl_dir)"
	$(MAKE) -C gcc libstdc "TRG=$(trg30)" $(cfl30) "STAGE=stage2" "lib_incl_dir=$(libscl_incl_dir)"

gcc-libs-stg2-extra: libiberty-stg2
	$(MAKE) -C gcc zlib "TRG=$(trg20)" $(cfl20) "STAGE=stage2"

riscos-dist: riscos-libs riscos-progs gcc-stg2 riscos-aof-stg2
	$(MAKE) -C riscos-dist install

riscos-pkg: riscos-dist
	$(MAKE) -C riscos-dist package

# Make sure build and installation directories exist
directories:
	mkdir -p $(ux_gccpkg)/$(gn_standard_exec_prefix)
	mkdir -p $(ux_gccpkg)/$(gn_standard_startfile_prefix)
	mkdir -p $(ux_gccpkg)/$(gn_gcc_bin_dir)
	mkdir -p $(ux_gccpkg)/$(gn_gcc_include_dir)
	mkdir -p $(ux_gccpkg)/$(gn_gplusplus_include_dir)
	mkdir -p $(ux_gccpkg)/$(gn_cross_include_dir)
	mkdir -p $(ux_gccpkg)/$(gn_share_dir)

	mkdir -p $(ro_gccpkg)/$(gn_standard_exec_prefix)
	mkdir -p $(ro_gccpkg)/$(gn_standard_startfile_prefix)
	mkdir -p $(ro_gccpkg)/$(gn_gcc_bin_dir)
	mkdir -p $(ro_gccpkg)/$(gn_gcc_include_dir)/h
	mkdir -p $(ro_gccpkg)/$(gn_gplusplus_include_dir)/h
	mkdir -p $(ro_gccpkg)/$(gn_cross_include_dir)
	mkdir -p $(ro_gccpkg)/$(gn_share_dir)/jar

	mkdir -p $(ux_gccpkg)/$(gn_gcc_bin_dir)/$(trg20)
	mkdir -p $(ux_gccpkg)/$(gn_gcc_bin_dir)/$(trg21)
	mkdir -p $(ux_gccpkg)/$(gn_gcc_bin_dir)/$(trg30)
	mkdir -p $(ux_gccpkg)/$(gn_gcc_bin_dir)/$(trg31)

	mkdir -p $(ro_gccpkg)/$(gn_gcc_bin_dir)/$(trg20)/o
	mkdir -p $(ro_gccpkg)/$(gn_gcc_bin_dir)/$(trg21)/o
	mkdir -p $(ro_gccpkg)/$(gn_gcc_bin_dir)/$(trg30)/o
	mkdir -p $(ro_gccpkg)/$(gn_gcc_bin_dir)/$(trg31)/o

	mkdir -p ${ro_syspkg}/310/Modules
	mkdir -p $(info_dir)
	mkdir -p $(objdir)
	mkdir -p $(ro_zippkg)

	mkdir -p $(ro_unixlibpkg)/source/clib/o
	mkdir -p $(ro_libsclpkg)/o

# Install header files for our standard C run-time libraries.
install_headers:
	$(MAKE) -C libscl install_headers
	$(MAKE) -C gcc/gcc install_headers
	$(MAKE) -C gcc/libstdc install_headers

# Generate unixlib makefiles
# Regenerate whenever Changelog is updated, so that any new files added will get added to the makefiles
unixlib/source/Makefile unixlib/source/object-list unixlib/objs/Makefile,fe1: unixlib/Makefile

unixlib/Makefile: unixlib/Makefile.in unixlib/source/Makefile.in unixlib/Docs/Changelog
	(cd unixlib; ./gen-makefiles.pl --dynamicdeps --stubs --objdir $(objdir)/unixlib/$(trg20))

clean:
	find arm-riscos-aof -type f | xargs rm

bin-clean:
	find $(ro_gccpkg) -type f | grep ,ff8 | xargs rm
