; CMHG template, generated by CMunge 0.62 (19 Jul 2005)
; 
; Customise this to fit the module you are writing


; If you declare module-is-runnable the module will be entered at the main()
; function in user mode (ie like a normal C program).
; You will probably never need this field.
module-is-runnable: 

; When your module cannot be reentered you should declare this. At present
; it does nothing.
; You will probably never need this field.
module-is-not-reentrant: 

; When your module includes C++ code built using the CFront compiler, you
; should declare this. As part of the module initialisation sequence, the
; C++ global constructors will be called. Essentially this removes the
; requirement to manually invoke ______main.
module-is-c-plus-plus: 

; You should give your module a sensible name which describes its purpose
; both accurately and concisely. You must register any module names you use
; if they are to be distributed.
title-string: ModuleName

; The help-string is the name that is displayed to the user in *Help Modules
; and other places that a more readable name is required. You should attempt
; to make this a readable version of the title-string, and - at worst - use
; the same name as in the title-string. The tail message may be used to
; indicate a variant of the module, or a copyright string.
help-string: ModuleDescription 0.01 Tail message

; If you supply SWIs in your module, you must provide a base number at which
; these start. Each chunk is 64 entries long and must be registered if the
; module is going to be distributed.
swi-chunk-base-number: &1280

; If you have any error messages in your module that are returned through
; the standard interfaces, you should use different error numbers for each,
; starting at a base number. You should register your error bases before
; distributing the module. Using random error numbers is dangerous.
error-base: &1280

; Allocating error messages within the module is more efficient than doing
; so manually in your C code, and is less likely to pollute error number
; space. The number is optional, and if omitted will be allocated from the
; error chunk.
error-identifiers: err_Silly(&1234,"Silly")

; When the module is initialised, this routine will be entered. You should
; be very careful to initialise your module safely. If anything fails, you
; can return an error message. Finalisation code will not be called if you
; return an error.
initialisation-code: Mod_Init

; When the module is killed, this routine will be entered. If you do not
; wish to be killed then you should return an error and retain as much of
; the current state as possible. Causing an abort in this routine will leave
; a 'dead' module in the chain.
finalisation-code: Mod_Final

; Syntax and help messages may be internationalised by using a messages
; file.
international-help-file: "Resources:$.ThirdParty.ModuleName.Messages"

; The SWI handler is entered for every SWI the module provides. Generally,
; this is a switch statement, to dispatch each of the SWIs that are known.
swi-handler-code: Mod_SWI

; The SWI decoding code performs name-to-number and number-to-name
; translations for this module. In practice, you very rarely need to use
; this.
; You will probably never need this field.
swi-decoding-code: Mod_SWIDecoder

; The SWI decoding table lists the SWIs which the module supplies. The first
; entry is always the SWI prefix, used on all SWIs that the module provides.
; This should be the name of the module, or some obvious variant. You should
; register your SWI prefixes when you register a SWI chunk. Each name entry
; may be followed by /<entry> to use a particular routine to handle a SWI.
; 
swi-decoding-table: Prefix One Two Three

; The library initialisation code sets up the C environment for use with
; this module. You may wish to perform some initialisation prior to the C
; environment being created. You must call _clib_initialisemodule prior to
; returning, or provide an identical functionality.
; You will probably never need this field.
library-enter-code: _clib_initialisemodule

; The date-string is optional and should only be included if you feel that a
; date is a different reference to the version number. Certain ports from
; other platforms may wish to indicate their source base date using this
; field.
; You will probably never need this field.
date-string: 21 Dec 1999

; Generic veneers are used to provide a simple C environment for SVC and IRQ
; modes. You should register the Entry routine as the external interface (ie
; provide it as the code address to call). The Handler routine will be
; called from this. Parameters for the veneer may be specified in brackets
; in the same form as command keywords :
;   ({<field>: <value>})
; Field names:
;   private-word: <register> Private word register
;   carry-capable:           Veneer is capable of handling returning of the
;                            carry flag
; 
generic-veneers: Veneer_Entry/Veneer_Handler

; IRQ veneers are used to provide a simple C environment for SVC and IRQ
; modes. You should register the Entry routine as the external interface (ie
; provide it as the code address to call). The Handler routine will be
; called from this. You can return 0 or 1 from your routine to say you
; either handled the interrupt, or did not.
irq-handlers: IRQ_Entry/IRQ_Handler

; Vector veneers are used to provide a simple C environment for SVC and IRQ
; modes. You should register the Entry routine as the external interface (ie
; provide it as the code address to call). The Handler routine will be
; called from this. You can return 0 or 1 from your routine to say you
; either handled the vector, or did not.
vector-handlers: Vector_Entry/Vector_Handler

; VectorTrap veneers are used to provide a simple C environment for SVC and
; IRQ modes. You should register the Entry routine as the external interface
; (ie provide it as the code address to call). The Handler routine will be
; called from this. You can an error to pass this back to the calling. The
; function 'trap' can be called with a register block and private value to
; pass the call on to the vector. The trap function will return registers in
; the supplied block, and if an error is flagged this will be the return
; value.
vector-traps: VectorTrap_Entry/VectorTrap_Handler

; Event handlers are used to provide a simple C environment for SVC and IRQ
; modes. You should register the Entry routine as the external interface (ie
; provide it as the code address to call). The Handler routine will be
; called from this. You can return 0 or 1 from your routine to say you
; either handled the interrupt, or did not. The list of numbers at the end
; of the line indicates which events (in R0) will be passed to the Handler
; routine. You can also trap upcalls with an event handler, as their reason
; codes are also passed in R0.
event-handler: Event_Entry/Event_Handler 1 2 3 4 5 6

; The command table is one of the more complex fields in the CMHG file. The
; first entry is the routine to call to process the commands as they arrive.
; The remainder of the entries are the command definitions. These take the
; form :
;   <Command>({<field>: <value>})
; 
; Field names:
;   min-args: <number>       Minimum number of arguments to command
;   max-args: <number>       Maximum number of arguments to command
;   gstrans-map: <bits>      Bitmap of arguments that should be GSTransd
;   fs-command:              Declares that this is a filing system command
;   international:           Declares this this uses international tokens
;   add-syntax:              Adds the syntax message to the help message
;   configure:               Declares that this is a configuration name
;   status:                  Declares that this is a configuration name
;   help:                    Declares that we want to be called for help
;                            message processing. Not implemented
;   help-text: <string>      The text/token to use for *Help
;   invalid-syntax: <string> The text/token to use for syntax errors
command-keyword-table: Mod_Command
   ModuleCommand()

; The module service entry will be called to process services. You are
; strongly recommended to include the numbers of the services you wish to
; handle.
service-call-handler: Mod_Service 1 2 3 4 5 6

