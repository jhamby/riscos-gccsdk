The RISC OS Software Development Kit [GCCSDK 3.4.6 Release 1]
=============================================================

GCCSDK is a portable build environment for creating ARM executables to
be run natively on RISC OS.  The build environment is designed to be
hosted on a Unix-like system, such as GNU/Linux, FreeBSD or Solaris.
GCCSDK releases are tied-in with the corresponding RISC OS GCC releases.


Prerequisites
-------------

In order to successfully build GCCSDK, you will need to have the following
packages installed on your system, with at *least* these software revisions.

	autoconf 	version 2.50
	bison		version 1.27
	flex		version 2.5.4
	gperf		version 2.7.2
	sed		version 2.05
	make		version 3.80
	makeinfo	version 4.2 (texinfo package on Debian)

You will of course need a C compiler for the system you are building on
(normally gcc), and one of the tools requires C++, so you will also need
g++.  The versions of these aren't particularly important, but it is
recommended you use at least version 3.3 of GCC.  Other versions are known
to work.

On older Linux installations, in particular, Debian Woody, makeinfo 4.1
may only be available.  This is only required to build documentation,
and a work around is shown below.


Installation
------------

Make sure you've got about 200 MB spare disk space. It is recommended that
you install GCCSDK has a non-root user.

Generate the configure script.
  $ autoconf ; autoheader

The package creates two main installations.

- The first, is a Unix-based cross-compiler for targeting RISC OS which will
  be installed under the directory specified with the `--prefix' option.
  The cross-compiler binaries themselves are stored in the `bin' subdirectory
  and when using those binaries they should be accessed via the environment
  variable GCCSDK_INSTALL_CROSSBIN.

  The `--with-riscos-env' option points to a directory where porting tools
  are installed and cross compiled libraries and data files may be installed.
  This `env' directory should be accessed via the environment variable
  GCCSDK_INSTALL_ENV.

- The second, is a complete GCC compiler toolset built to run natively on
  RISC OS and will be installed under the directory specified with
  the `--with-riscos-dist' option.  `--with-riscos-pkg' points
  to a directory where distributable zip files of the RISC OS GCC toolset
  will be created.  These should then be suitable for unpacking on a RISC OS
  computer to make a working compiler.

Configure it.
  $ ./configure --prefix=/home/riscos/cross \
	--with-riscos-dist=/home/riscos \
	--with-riscos-pkg=/home/riscos/riscos-pkg \
	--with-riscos-env=/home/riscos/env \
	--enable-filetype-ff8 --enable-checking=no

The `do-configure' script encapsulates this command, so instead of the
above, you can adapt `do-configure' script if needed and run
`./do-configure'.

On systems with makeinfo 4.1, you can avoid building documentation by
prefixing the `./configure' or `./do-configure' commands with:

  ac_cv_prog_MAKEINFO=echo

Adding the flag `--enable-filetype-ff8' to the configure options will add the
`,ff8' suffix to any RISC OS executables built under Unix.  This is to allow
filetyping by networking filing systems from RISC OS, such as LanMan98 and
Sunfish.  We supply a modified version of `zip' in the
GCCSDK_INSTALL_CROSSBIN directory which can encode proper filetypes into
zipfiles whenever it sees the `,xxx' suffix.  

Create installation directory structure
  $ make setup

To build the full compiler package, including native compilers for execution
on RISC OS and the porting scripts, just type:
  $ make

If, instead, you just want a cross-compiler, then type:
  $ make build-cross

And the porting scripts, then type:
  $ make porting-scripts

Optionally, you can create the RISC OS GCC compiler zip packages using
this command.
  $ make riscos-pkg

Expect the building of the full package to take around 25 minutes on a 3GHz
system.


Using the porting tools
-----------------------

Once built, the porting tools are stored in the directory specified with the
`--with-riscos-env` configure option.  They will by default make use of the
cross compiler found in the directory specified with the `--prefix' configure
option.  Those tools can make use of an alternative cross compiler build by
via the environment variable GCCSDK_INSTALL_CROSSBIN.
  $ export GCCSDK_INSTALL_CROSSBIN=/home/riscos/cross/bin

When you don't want to use the porting tools but do want to access e.g.
the include headers and libraries, do this via environment variable
GCCSDK_INSTALL_ENV which you also need to setup for this case only.
  $ export GCCSDK_INSTALL_ENV=/home/riscos/env

  $ gcc -I$GCCSDK_INSTALL_ENV/include -c example.c
  $ gcc -o example example.o -L$GCCSDK_INSTALL_ENV/lib -lOSLib32

Programs or setups using the porting tools, like GCCSDK Autobuilder, are also
using the environment variable GCCSDK_INSTALL_ENV.


Using the cross-compiler
------------------------

The cross-compiler can be used on its own.  The recommended way is to
define the environment variable GCCSDK_INSTALL_CROSSBIN.
  $ export GCCSDK_INSTALL_CROSSBIN=/home/riscos/cross/bin

Add add this environment value to your PATH.
  $ PATH=$GCCSDK_INSTALL_CROSSBIN:$PATH
  
Then use it as you would the GCC compiler normally.

GCCSDK_INSTALL_CROSSBIN is sometimes also used explicitly to access the
GCCSDK cross-compiler.


RISC OS filename compatibility issues for the cross-compiler
------------------------------------------------------------

Since the cross-compiler is built to execute on a Unix-like file system,
it expects file naming conventions particular to that operating system.
However, since there is going to be a lot of source code out there that
makes use of some RISC OS pathname features, the pre-processor has been
fixed to cope with path variable names in file names.

When the pre-processor attempts to read an include statement like:
  #include <DeskLib:Wimp.h>
it will try to resolve the DeskLib reference against the environment variable
DESKLIB_PATH.  So you could install the DeskLib header files in a place
such as /home/riscos/env/include/DeskLib.  To get GCC to search in that
directory for those headers, simply define the variable:
  $ export DESKLIB_PATH=/home/riscos/env/include/DeskLib


Bug reporting
-------------

Please use the bug-tracking system at <URL:http://gccsdk.riscos.info/bugs/>.


GCCSDK package contents
-----------------------

The cross-compiler contains the following tools:

  Language compilers for C, C++ and Fortran 77.

   cmunge - Justin Fletcher's free alternative to CMHG.
   decaof - Andy Duplain's AOF decoder.
   drlink - Dave Daniels' RISC OS AOF linker.
  libfile - a RISC OS ALF builder.
     gcov - a test coverage program
   libscl - C library headers and stubs for linking with the SharedCLibrary.
  unixlib - A C library with BSD, System V and POSIX library extensions.
      zip - A file archive utility

The RISC OS distribution contains the following tools:

  Language compilers for C, C++ and Fortran 77.

   cmunge - Justin Fletcher's free alternative to CMHG.
   decaof - Andy Duplain's AOF decoder.
   drlink - Dave Daniels' RISC OS AOF linker.
drenderer - Andreas Dehmel's DRenderer sound module used by UnixLib.
  libfile - a RISC OS ALF builder.
     gcov - a test coverage program
   libscl - C library headers and stubs for linking with the SharedCLibrary.
  unixlib - A C library with BSD, System V and POSIX library extensions.
    bison - A YACC implementation.
     flex - A lexical analyser.
     grep - A patten matcher
    gperf - A perfect hash generator
     gzip - A file compression utility
     make - A make utility
    mkdir - A port of the Unix directory creator.
    patch - A program that can patch files when supplied with the output
            of diff.
      sed - A batch stream editor
    touch - A port of the Unix touch command for changing file timestamps.
      zip - A file archive utility


FAQ
---

Q1. How can I build UnixLib with function names?

A1. The default is for GCC to not embed function names in the program,
    so backtraces will show ?() for functions.   The following applies
    equally to most parts of the build process:

    In unixlib/source/Makefile, add "-mpoke-function-name" to the
    CROSS_CFLAGS line.

    Delete previous UnixLib objects:

       make clean

    Rebuild with make:

       make

    If you want function names in all libraries and RISC OS binaries
    then edit the top-level Makefile.in and set the following lines thus:

       CROSS_CFLAGS=-O2 $(TARGET_DEFS) -mpoke-function-name
       CROSS_CXXFLAGS=-O2 $(TARGET_DEFS) -mpoke-function-name

-----------------------------------------------------------------------------

Q2. What systems has GCCSDK been built on?

A2. Systems on which it has successfully been built upon include:
        Debian i386/Linux,
        RedHat i386/Linux,
        Debian ARM/Linux,
        FreeBSD,
        OpenBSD,
        Cygwin (Windows),
        Mac OS X
        and others.

-----------------------------------------------------------------------------

Q3. Where does the UnixLib library file end up?

A3. It depends on the `--with-riscos-dist' and '--prefix' parameters you
    pass to configure.  With the default `--with-riscos-dist' parameter
    UnixLib for the RISC OS distribution is located at:
      /home/riscos/riscos-dist/!gcc/bin/arm-riscos-aof/3_4/apcs32/abs/unixlib/o/unixlib

    With the default `--prefix' parameter UnixLib for Unix cross compiling
    can be found at:
      /home/riscos/cross/bin/arm-riscos-aof/3_4/apcs32/abs/unixlib/unixlib.o

-----------------------------------------------------------------------------

Q4. My Unix variant appears to be unsupported.  How do I fix it?

A4. Change gccsdk/configure.in to correctly detect your CPU and OS type,
    fixing up cpu_type and os_type respectively.

    Little endian CPUs (like i386) and big endian CPUs (Sparc, MIPS, PowerPC)
    are supported.

-----------------------------------------------------------------------------

Q5. Where do I report bugs or send patches ?

A5. The preferred method for issuing bug reports for any package distributed
    with GCCSDK can be registered at <URL:http://gccsdk.riscos.info/bugs/>.
    A centralised location for bug reports helps the authors keep track of
    problems which can otherwise get lost under large piles of e-mail.

    Alternatively bugs or patches can be e-mailed to the GCCSDK mailing list
    gcc@gccsdk.riscos.info.

-EOF-
